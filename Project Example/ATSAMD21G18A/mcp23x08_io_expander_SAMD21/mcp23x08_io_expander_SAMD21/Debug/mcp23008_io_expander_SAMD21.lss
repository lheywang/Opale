
mcp23008_io_expander_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e28  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          0000004c  00003e28  00003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  00003e74  00003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000064  20000000  00003e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000134  20000064  00003ee4  00020064  2**2
                  ALLOC
  5 .stack        00002000  20000198  00004018  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00025fc3  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000331f  00000000  00000000  000460aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000df83  00000000  00000000  000493c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c28  00000000  00000000  0005734c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c98  00000000  00000000  00057f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000193cd  00000000  00000000  00058c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ef62  00000000  00000000  00071fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00087aad  00000000  00000000  00080f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002604  00000000  00000000  001089e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 21 00 20 21 01 00 00 1d 01 00 00 1d 01 00 00     .!. !...........
	...
      2c:	1d 01 00 00 00 00 00 00 00 00 00 00 1d 01 00 00     ................
      3c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      4c:	1d 01 00 00 85 08 00 00 1d 01 00 00 1d 01 00 00     ................
      5c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      6c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      7c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      8c:	1d 01 00 00 1d 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      ac:	1d 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00003e28 	.word	0x00003e28

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00003e28 	.word	0x00003e28
     10c:	00003e28 	.word	0x00003e28
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	f000 f94d 	bl	3b4 <system_init>
}
     11a:	bd10      	pop	{r4, pc}

0000011c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     11c:	e7fe      	b.n	11c <Dummy_Handler>
	...

00000120 <Reset_Handler>:
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	b083      	sub	sp, #12
     124:	4b2c      	ldr	r3, [pc, #176]	; (1d8 <Reset_Handler+0xb8>)
     126:	447b      	add	r3, pc
        if (pSrc != pDest) {
     128:	4a2c      	ldr	r2, [pc, #176]	; (1dc <Reset_Handler+0xbc>)
     12a:	589a      	ldr	r2, [r3, r2]
     12c:	9200      	str	r2, [sp, #0]
     12e:	4a2c      	ldr	r2, [pc, #176]	; (1e0 <Reset_Handler+0xc0>)
     130:	589a      	ldr	r2, [r3, r2]
     132:	9201      	str	r2, [sp, #4]
     134:	9a00      	ldr	r2, [sp, #0]
     136:	9901      	ldr	r1, [sp, #4]
     138:	428a      	cmp	r2, r1
     13a:	d00d      	beq.n	158 <Reset_Handler+0x38>
     13c:	4a28      	ldr	r2, [pc, #160]	; (1e0 <Reset_Handler+0xc0>)
     13e:	589a      	ldr	r2, [r3, r2]
     140:	4926      	ldr	r1, [pc, #152]	; (1dc <Reset_Handler+0xbc>)
     142:	5859      	ldr	r1, [r3, r1]
     144:	e003      	b.n	14e <Reset_Handler+0x2e>
                        *pDest++ = *pSrc++;
     146:	6808      	ldr	r0, [r1, #0]
     148:	6010      	str	r0, [r2, #0]
     14a:	3204      	adds	r2, #4
     14c:	3104      	adds	r1, #4
                for (; pDest < &_erelocate;) {
     14e:	4825      	ldr	r0, [pc, #148]	; (1e4 <Reset_Handler+0xc4>)
     150:	5818      	ldr	r0, [r3, r0]
     152:	9000      	str	r0, [sp, #0]
     154:	4282      	cmp	r2, r0
     156:	d3f6      	bcc.n	146 <Reset_Handler+0x26>
                        *pDest++ = *pSrc++;
     158:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xc8>)
     15a:	589a      	ldr	r2, [r3, r2]
     15c:	e002      	b.n	164 <Reset_Handler+0x44>
                *pDest++ = 0;
     15e:	2100      	movs	r1, #0
     160:	6011      	str	r1, [r2, #0]
     162:	3204      	adds	r2, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xcc>)
     166:	5859      	ldr	r1, [r3, r1]
     168:	9100      	str	r1, [sp, #0]
     16a:	428a      	cmp	r2, r1
     16c:	d3f7      	bcc.n	15e <Reset_Handler+0x3e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     16e:	4a20      	ldr	r2, [pc, #128]	; (1f0 <Reset_Handler+0xd0>)
     170:	589b      	ldr	r3, [r3, r2]
     172:	9300      	str	r3, [sp, #0]
     174:	23ff      	movs	r3, #255	; 0xff
     176:	9a00      	ldr	r2, [sp, #0]
     178:	439a      	bics	r2, r3
     17a:	0013      	movs	r3, r2
     17c:	4a1d      	ldr	r2, [pc, #116]	; (1f4 <Reset_Handler+0xd4>)
     17e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     180:	2102      	movs	r1, #2
     182:	2390      	movs	r3, #144	; 0x90
     184:	005b      	lsls	r3, r3, #1
     186:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xd8>)
     188:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18a:	4a1c      	ldr	r2, [pc, #112]	; (1fc <Reset_Handler+0xdc>)
     18c:	78d3      	ldrb	r3, [r2, #3]
     18e:	2503      	movs	r5, #3
     190:	43ab      	bics	r3, r5
     192:	2402      	movs	r4, #2
     194:	4323      	orrs	r3, r4
     196:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     198:	78d3      	ldrb	r3, [r2, #3]
     19a:	270c      	movs	r7, #12
     19c:	43bb      	bics	r3, r7
     19e:	2608      	movs	r6, #8
     1a0:	4333      	orrs	r3, r6
     1a2:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a4:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xe0>)
     1a6:	7b98      	ldrb	r0, [r3, #14]
     1a8:	2230      	movs	r2, #48	; 0x30
     1aa:	4390      	bics	r0, r2
     1ac:	2220      	movs	r2, #32
     1ae:	4310      	orrs	r0, r2
     1b0:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b2:	7b99      	ldrb	r1, [r3, #14]
     1b4:	43b9      	bics	r1, r7
     1b6:	4331      	orrs	r1, r6
     1b8:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1ba:	7b9a      	ldrb	r2, [r3, #14]
     1bc:	43aa      	bics	r2, r5
     1be:	4322      	orrs	r2, r4
     1c0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c2:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xe4>)
     1c4:	6851      	ldr	r1, [r2, #4]
     1c6:	2380      	movs	r3, #128	; 0x80
     1c8:	430b      	orrs	r3, r1
     1ca:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1cc:	f002 fe00 	bl	2dd0 <__libc_init_array>
        main();
     1d0:	f001 f8ac 	bl	132c <main>
     1d4:	e7fe      	b.n	1d4 <Reset_Handler+0xb4>
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	00003cfe 	.word	0x00003cfe
     1dc:	00000008 	.word	0x00000008
     1e0:	00000010 	.word	0x00000010
     1e4:	00000040 	.word	0x00000040
     1e8:	0000000c 	.word	0x0000000c
     1ec:	00000034 	.word	0x00000034
     1f0:	00000004 	.word	0x00000004
     1f4:	e000ed00 	.word	0xe000ed00
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000

00000208 <EXTERNAL_IRQ_0_init>:
struct i2c_m_sync_desc I2C_0;

struct usart_sync_descriptor USART_0;

void EXTERNAL_IRQ_0_init(void)
{
     208:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     20a:	4a11      	ldr	r2, [pc, #68]	; (250 <EXTERNAL_IRQ_0_init+0x48>)
     20c:	4b11      	ldr	r3, [pc, #68]	; (254 <EXTERNAL_IRQ_0_init+0x4c>)
     20e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     210:	20c0      	movs	r0, #192	; 0xc0
     212:	05c0      	lsls	r0, r0, #23
     214:	2480      	movs	r4, #128	; 0x80
     216:	0464      	lsls	r4, r4, #17
     218:	6044      	str	r4, [r0, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     21a:	4b0f      	ldr	r3, [pc, #60]	; (258 <EXTERNAL_IRQ_0_init+0x50>)
     21c:	4a0f      	ldr	r2, [pc, #60]	; (25c <EXTERNAL_IRQ_0_init+0x54>)
     21e:	629a      	str	r2, [r3, #40]	; 0x28
     220:	4a0f      	ldr	r2, [pc, #60]	; (260 <EXTERNAL_IRQ_0_init+0x58>)
     222:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     224:	6044      	str	r4, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     226:	2158      	movs	r1, #88	; 0x58
     228:	5c5a      	ldrb	r2, [r3, r1]
     22a:	2504      	movs	r5, #4
     22c:	432a      	orrs	r2, r5
     22e:	b2d2      	uxtb	r2, r2
     230:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     232:	6184      	str	r4, [r0, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     234:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     236:	2001      	movs	r0, #1
     238:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23a:	4302      	orrs	r2, r0
     23c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     240:	391c      	subs	r1, #28
     242:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     244:	200f      	movs	r0, #15
     246:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     248:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(ext_int, PINMUX_PA24A_EIC_EXTINT12);

	ext_irq_init();
     24a:	f000 f92d 	bl	4a8 <ext_irq_init>
}
     24e:	bd70      	pop	{r4, r5, r6, pc}
     250:	00004005 	.word	0x00004005
     254:	40000c00 	.word	0x40000c00
     258:	41004400 	.word	0x41004400
     25c:	40020000 	.word	0x40020000
     260:	c0020100 	.word	0xc0020100

00000264 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     264:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     266:	4b13      	ldr	r3, [pc, #76]	; (2b4 <I2C_0_PORT_init+0x50>)
     268:	2050      	movs	r0, #80	; 0x50
     26a:	5c19      	ldrb	r1, [r3, r0]
     26c:	2204      	movs	r2, #4
     26e:	4391      	bics	r1, r2
     270:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     272:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     274:	2501      	movs	r5, #1
     276:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     278:	2401      	movs	r4, #1
     27a:	4321      	orrs	r1, r4
     27c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     27e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     280:	3818      	subs	r0, #24
     282:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     284:	260f      	movs	r6, #15
     286:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     288:	2602      	movs	r6, #2
     28a:	4331      	orrs	r1, r6
     28c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     28e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     290:	2151      	movs	r1, #81	; 0x51
     292:	5c5e      	ldrb	r6, [r3, r1]
     294:	4396      	bics	r6, r2
     296:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     298:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     29a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29c:	4322      	orrs	r2, r4
     29e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2a4:	3942      	subs	r1, #66	; 0x42
     2a6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2a8:	2120      	movs	r1, #32
     2aa:	430a      	orrs	r2, r1
     2ac:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ae:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
}
     2b0:	bd70      	pop	{r4, r5, r6, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	41004400 	.word	0x41004400

000002b8 <I2C_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2b8:	4a05      	ldr	r2, [pc, #20]	; (2d0 <I2C_0_CLOCK_init+0x18>)
     2ba:	6a13      	ldr	r3, [r2, #32]
     2bc:	2108      	movs	r1, #8
     2be:	430b      	orrs	r3, r1
     2c0:	6213      	str	r3, [r2, #32]
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <I2C_0_CLOCK_init+0x1c>)
     2c4:	4a04      	ldr	r2, [pc, #16]	; (2d8 <I2C_0_CLOCK_init+0x20>)
     2c6:	805a      	strh	r2, [r3, #2]
     2c8:	4a04      	ldr	r2, [pc, #16]	; (2dc <I2C_0_CLOCK_init+0x24>)
     2ca:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
}
     2cc:	4770      	bx	lr
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	40000400 	.word	0x40000400
     2d4:	40000c00 	.word	0x40000c00
     2d8:	00004015 	.word	0x00004015
     2dc:	00004313 	.word	0x00004313

000002e0 <I2C_0_init>:

void I2C_0_init(void)
{
     2e0:	b510      	push	{r4, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	4c07      	ldr	r4, [pc, #28]	; (304 <I2C_0_init+0x24>)
     2e6:	447c      	add	r4, pc
	I2C_0_CLOCK_init();
     2e8:	f7ff ffe6 	bl	2b8 <I2C_0_CLOCK_init>
	i2c_m_sync_init(&I2C_0, SERCOM1);
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <I2C_0_init+0x28>)
     2ee:	58e3      	ldr	r3, [r4, r3]
     2f0:	9301      	str	r3, [sp, #4]
     2f2:	4906      	ldr	r1, [pc, #24]	; (30c <I2C_0_init+0x2c>)
     2f4:	0018      	movs	r0, r3
     2f6:	f000 f921 	bl	53c <i2c_m_sync_init>
	I2C_0_PORT_init();
     2fa:	f7ff ffb3 	bl	264 <I2C_0_PORT_init>
}
     2fe:	b002      	add	sp, #8
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	00003b3e 	.word	0x00003b3e
     308:	00000048 	.word	0x00000048
     30c:	42000c00 	.word	0x42000c00

00000310 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     310:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <USART_0_PORT_init+0x40>)
     314:	22c2      	movs	r2, #194	; 0xc2
     316:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     318:	2501      	movs	r5, #1
     31a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     31c:	2401      	movs	r4, #1
     31e:	4321      	orrs	r1, r4
     320:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     322:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     324:	20b1      	movs	r0, #177	; 0xb1
     326:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     328:	3ab3      	subs	r2, #179	; 0xb3
     32a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     32c:	2203      	movs	r2, #3
     32e:	4311      	orrs	r1, r2
     330:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     332:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     334:	21c3      	movs	r1, #195	; 0xc3
     336:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     338:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     33a:	4322      	orrs	r2, r4
     33c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     33e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     340:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     342:	39b4      	subs	r1, #180	; 0xb4
     344:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     346:	2130      	movs	r1, #48	; 0x30
     348:	430a      	orrs	r2, r1
     34a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     34c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB02, PINMUX_PB02D_SERCOM5_PAD0);

	gpio_set_pin_function(PB03, PINMUX_PB03D_SERCOM5_PAD1);
}
     34e:	bd30      	pop	{r4, r5, pc}
     350:	41004400 	.word	0x41004400

00000354 <USART_0_CLOCK_init>:
     354:	4a04      	ldr	r2, [pc, #16]	; (368 <USART_0_CLOCK_init+0x14>)
     356:	6a13      	ldr	r3, [r2, #32]
     358:	2180      	movs	r1, #128	; 0x80
     35a:	430b      	orrs	r3, r1
     35c:	6213      	str	r3, [r2, #32]
     35e:	4a03      	ldr	r2, [pc, #12]	; (36c <USART_0_CLOCK_init+0x18>)
     360:	4b03      	ldr	r3, [pc, #12]	; (370 <USART_0_CLOCK_init+0x1c>)
     362:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     364:	4770      	bx	lr
     366:	46c0      	nop			; (mov r8, r8)
     368:	40000400 	.word	0x40000400
     36c:	00004019 	.word	0x00004019
     370:	40000c00 	.word	0x40000c00

00000374 <USART_0_init>:

void USART_0_init(void)
{
     374:	b510      	push	{r4, lr}
     376:	b082      	sub	sp, #8
     378:	4c07      	ldr	r4, [pc, #28]	; (398 <USART_0_init+0x24>)
     37a:	447c      	add	r4, pc
	USART_0_CLOCK_init();
     37c:	f7ff ffea 	bl	354 <USART_0_CLOCK_init>
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <USART_0_init+0x28>)
     382:	58e3      	ldr	r3, [r4, r3]
     384:	9301      	str	r3, [sp, #4]
     386:	2200      	movs	r2, #0
     388:	4905      	ldr	r1, [pc, #20]	; (3a0 <USART_0_init+0x2c>)
     38a:	0018      	movs	r0, r3
     38c:	f000 f9a0 	bl	6d0 <usart_sync_init>
	USART_0_PORT_init();
     390:	f7ff ffbe 	bl	310 <USART_0_PORT_init>
}
     394:	b002      	add	sp, #8
     396:	bd10      	pop	{r4, pc}
     398:	00003aaa 	.word	0x00003aaa
     39c:	00000030 	.word	0x00000030
     3a0:	42001c00 	.word	0x42001c00

000003a4 <delay_driver_init>:

void delay_driver_init(void)
{
     3a4:	b510      	push	{r4, lr}
	delay_init(SysTick);
     3a6:	4802      	ldr	r0, [pc, #8]	; (3b0 <delay_driver_init+0xc>)
     3a8:	f000 f840 	bl	42c <delay_init>
}
     3ac:	bd10      	pop	{r4, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	e000e010 	.word	0xe000e010

000003b4 <system_init>:

void system_init(void)
{
     3b4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3b6:	f000 fa05 	bl	7c4 <_init_chip>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3ba:	22c0      	movs	r2, #192	; 0xc0
     3bc:	05d2      	lsls	r2, r2, #23
     3be:	2308      	movs	r3, #8
     3c0:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3c2:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	4b15      	ldr	r3, [pc, #84]	; (41c <system_init+0x68>)
     3c6:	4916      	ldr	r1, [pc, #88]	; (420 <system_init+0x6c>)
     3c8:	6299      	str	r1, [r3, #40]	; 0x28
     3ca:	21c0      	movs	r1, #192	; 0xc0
     3cc:	0609      	lsls	r1, r1, #24
     3ce:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	2443      	movs	r4, #67	; 0x43
     3d2:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	2101      	movs	r1, #1
     3d6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d8:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3da:	2080      	movs	r0, #128	; 0x80
     3dc:	0340      	lsls	r0, r0, #13
     3de:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3e0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3e2:	2480      	movs	r4, #128	; 0x80
     3e4:	05e4      	lsls	r4, r4, #23
     3e6:	629c      	str	r4, [r3, #40]	; 0x28
     3e8:	480e      	ldr	r0, [pc, #56]	; (424 <system_init+0x70>)
     3ea:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ec:	2554      	movs	r5, #84	; 0x54
     3ee:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f4:	2080      	movs	r0, #128	; 0x80
     3f6:	0480      	lsls	r0, r0, #18
     3f8:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3fa:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3fc:	629c      	str	r4, [r3, #40]	; 0x28
     3fe:	4a0a      	ldr	r2, [pc, #40]	; (428 <system_init+0x74>)
     400:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     402:	2059      	movs	r0, #89	; 0x59
     404:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     406:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     408:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(user_led_blue, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(user_led_blue, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     40a:	f7ff fefd 	bl	208 <EXTERNAL_IRQ_0_init>

	I2C_0_init();
     40e:	f7ff ff67 	bl	2e0 <I2C_0_init>

	USART_0_init();
     412:	f7ff ffaf 	bl	374 <USART_0_init>

	delay_driver_init();
     416:	f7ff ffc5 	bl	3a4 <delay_driver_init>
}
     41a:	bd70      	pop	{r4, r5, r6, pc}
     41c:	41004400 	.word	0x41004400
     420:	40000008 	.word	0x40000008
     424:	c0000010 	.word	0xc0000010
     428:	c0000200 	.word	0xc0000200

0000042c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     42c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <delay_init+0x10>)
     430:	447b      	add	r3, pc
     432:	6018      	str	r0, [r3, #0]
     434:	f000 ff56 	bl	12e4 <_delay_init>
}
     438:	bd10      	pop	{r4, pc}
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	1ffffc4c 	.word	0x1ffffc4c

00000440 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     440:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     442:	4b05      	ldr	r3, [pc, #20]	; (458 <delay_ms+0x18>)
     444:	447b      	add	r3, pc
     446:	681c      	ldr	r4, [r3, #0]
     448:	f000 f9b6 	bl	7b8 <_get_cycles_for_ms>
     44c:	0001      	movs	r1, r0
     44e:	0020      	movs	r0, r4
     450:	f000 ff4c 	bl	12ec <_delay_cycles>
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	1ffffc38 	.word	0x1ffffc38

0000045c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     45c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     45e:	2501      	movs	r5, #1
     460:	2400      	movs	r4, #0

	while (upper >= lower) {
     462:	e008      	b.n	476 <process_ext_irq+0x1a>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     464:	4a0e      	ldr	r2, [pc, #56]	; (4a0 <process_ext_irq+0x44>)
     466:	447a      	add	r2, pc
     468:	58b3      	ldr	r3, [r6, r2]
     46a:	2b00      	cmp	r3, #0
     46c:	d000      	beq.n	470 <process_ext_irq+0x14>
				ext_irqs[middle].cb();
     46e:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     470:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     472:	3a01      	subs	r2, #1
     474:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     476:	42ac      	cmp	r4, r5
     478:	d8fa      	bhi.n	470 <process_ext_irq+0x14>
		middle = (upper + lower) >> 1;
     47a:	192b      	adds	r3, r5, r4
     47c:	105b      	asrs	r3, r3, #1
     47e:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     480:	2a00      	cmp	r2, #0
     482:	d1f5      	bne.n	470 <process_ext_irq+0x14>
     484:	21ff      	movs	r1, #255	; 0xff
     486:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     488:	00de      	lsls	r6, r3, #3
     48a:	4906      	ldr	r1, [pc, #24]	; (4a4 <process_ext_irq+0x48>)
     48c:	4479      	add	r1, pc
     48e:	1989      	adds	r1, r1, r6
     490:	6849      	ldr	r1, [r1, #4]
     492:	4281      	cmp	r1, r0
     494:	d0e6      	beq.n	464 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     496:	d2ec      	bcs.n	472 <process_ext_irq+0x16>
			lower = middle + 1;
     498:	3201      	adds	r2, #1
     49a:	b2d4      	uxtb	r4, r2
     49c:	e7eb      	b.n	476 <process_ext_irq+0x1a>
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	1ffffc1a 	.word	0x1ffffc1a
     4a4:	1ffffbf4 	.word	0x1ffffbf4

000004a8 <ext_irq_init>:
{
     4a8:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     4aa:	2300      	movs	r3, #0
     4ac:	2b00      	cmp	r3, #0
     4ae:	d004      	beq.n	4ba <ext_irq_init+0x12>
	return _ext_irq_init(process_ext_irq);
     4b0:	4808      	ldr	r0, [pc, #32]	; (4d4 <ext_irq_init+0x2c>)
     4b2:	4478      	add	r0, pc
     4b4:	f000 f99a 	bl	7ec <_ext_irq_init>
}
     4b8:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     4ba:	4a07      	ldr	r2, [pc, #28]	; (4d8 <ext_irq_init+0x30>)
     4bc:	447a      	add	r2, pc
     4be:	00d9      	lsls	r1, r3, #3
     4c0:	1850      	adds	r0, r2, r1
     4c2:	2401      	movs	r4, #1
     4c4:	4264      	negs	r4, r4
     4c6:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     4c8:	2000      	movs	r0, #0
     4ca:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     4cc:	3301      	adds	r3, #1
     4ce:	b29b      	uxth	r3, r3
     4d0:	e7ec      	b.n	4ac <ext_irq_init+0x4>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	ffffffa7 	.word	0xffffffa7
     4d8:	1ffffbc4 	.word	0x1ffffbc4

000004dc <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     4dc:	b510      	push	{r4, lr}
     4de:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     4e0:	3814      	subs	r0, #20
     4e2:	8b84      	ldrh	r4, [r0, #28]
     4e4:	ab01      	add	r3, sp, #4
     4e6:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     4e8:	0014      	movs	r4, r2
     4ea:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     4ec:	4a06      	ldr	r2, [pc, #24]	; (508 <i2c_m_sync_write+0x2c>)
     4ee:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     4f0:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     4f2:	0019      	movs	r1, r3
     4f4:	f000 fd5e 	bl	fb4 <_i2c_m_sync_transfer>

	if (ret) {
     4f8:	2800      	cmp	r0, #0
     4fa:	d102      	bne.n	502 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     4fc:	0020      	movs	r0, r4
     4fe:	b004      	add	sp, #16
     500:	bd10      	pop	{r4, pc}
		return ret;
     502:	0004      	movs	r4, r0
     504:	e7fa      	b.n	4fc <i2c_m_sync_write+0x20>
     506:	46c0      	nop			; (mov r8, r8)
     508:	ffff8000 	.word	0xffff8000

0000050c <i2c_m_sync_read>:
{
     50c:	b510      	push	{r4, lr}
     50e:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     510:	3814      	subs	r0, #20
     512:	8b84      	ldrh	r4, [r0, #28]
     514:	ab01      	add	r3, sp, #4
     516:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     518:	0014      	movs	r4, r2
     51a:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     51c:	4a06      	ldr	r2, [pc, #24]	; (538 <i2c_m_sync_read+0x2c>)
     51e:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     520:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     522:	0019      	movs	r1, r3
     524:	f000 fd46 	bl	fb4 <_i2c_m_sync_transfer>
	if (ret) {
     528:	2800      	cmp	r0, #0
     52a:	d102      	bne.n	532 <i2c_m_sync_read+0x26>
}
     52c:	0020      	movs	r0, r4
     52e:	b004      	add	sp, #16
     530:	bd10      	pop	{r4, pc}
		return ret;
     532:	0004      	movs	r4, r0
     534:	e7fa      	b.n	52c <i2c_m_sync_read+0x20>
     536:	46c0      	nop			; (mov r8, r8)
     538:	ffff8001 	.word	0xffff8001

0000053c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     53c:	b570      	push	{r4, r5, r6, lr}
     53e:	0004      	movs	r4, r0
     540:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     542:	1e43      	subs	r3, r0, #1
     544:	4198      	sbcs	r0, r3
     546:	b2c0      	uxtb	r0, r0
     548:	225e      	movs	r2, #94	; 0x5e
     54a:	4908      	ldr	r1, [pc, #32]	; (56c <i2c_m_sync_init+0x30>)
     54c:	4479      	add	r1, pc
     54e:	f000 f90d 	bl	76c <assert>

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     552:	0029      	movs	r1, r5
     554:	0020      	movs	r0, r4
     556:	f000 fcd7 	bl	f08 <_i2c_m_sync_init>
	if (init_status) {
     55a:	2800      	cmp	r0, #0
     55c:	d105      	bne.n	56a <i2c_m_sync_init+0x2e>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     55e:	4b04      	ldr	r3, [pc, #16]	; (570 <i2c_m_sync_init+0x34>)
     560:	447b      	add	r3, pc
     562:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     564:	4b03      	ldr	r3, [pc, #12]	; (574 <i2c_m_sync_init+0x38>)
     566:	447b      	add	r3, pc
     568:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     56a:	bd70      	pop	{r4, r5, r6, pc}
     56c:	0000317c 	.word	0x0000317c
     570:	ffffffa9 	.word	0xffffffa9
     574:	ffffff73 	.word	0xffffff73

00000578 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     578:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     57a:	f000 fcdb 	bl	f34 <_i2c_m_sync_enable>
}
     57e:	bd10      	pop	{r4, pc}

00000580 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     580:	0589      	lsls	r1, r1, #22
     582:	0d89      	lsrs	r1, r1, #22
     584:	2380      	movs	r3, #128	; 0x80
     586:	00db      	lsls	r3, r3, #3
     588:	401a      	ands	r2, r3
     58a:	430a      	orrs	r2, r1
     58c:	8382      	strh	r2, [r0, #28]
}
     58e:	0010      	movs	r0, r2
     590:	4770      	bx	lr

00000592 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     592:	3014      	adds	r0, #20
     594:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     596:	2000      	movs	r0, #0
     598:	4770      	bx	lr
	...

0000059c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     59c:	b570      	push	{r4, r5, r6, lr}
     59e:	0004      	movs	r4, r0
     5a0:	000d      	movs	r5, r1
     5a2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     5a4:	2800      	cmp	r0, #0
     5a6:	d00f      	beq.n	5c8 <io_write+0x2c>
     5a8:	2900      	cmp	r1, #0
     5aa:	d00b      	beq.n	5c4 <io_write+0x28>
     5ac:	2001      	movs	r0, #1
     5ae:	2234      	movs	r2, #52	; 0x34
     5b0:	4906      	ldr	r1, [pc, #24]	; (5cc <io_write+0x30>)
     5b2:	4479      	add	r1, pc
     5b4:	f000 f8da 	bl	76c <assert>
	return io_descr->write(io_descr, buf, length);
     5b8:	6823      	ldr	r3, [r4, #0]
     5ba:	0032      	movs	r2, r6
     5bc:	0029      	movs	r1, r5
     5be:	0020      	movs	r0, r4
     5c0:	4798      	blx	r3
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     5c4:	2000      	movs	r0, #0
     5c6:	e7f2      	b.n	5ae <io_write+0x12>
     5c8:	2000      	movs	r0, #0
     5ca:	e7f0      	b.n	5ae <io_write+0x12>
     5cc:	00003132 	.word	0x00003132

000005d0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
     5d6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     5d8:	2800      	cmp	r0, #0
     5da:	d00f      	beq.n	5fc <io_read+0x2c>
     5dc:	2900      	cmp	r1, #0
     5de:	d00b      	beq.n	5f8 <io_read+0x28>
     5e0:	2001      	movs	r0, #1
     5e2:	223d      	movs	r2, #61	; 0x3d
     5e4:	4906      	ldr	r1, [pc, #24]	; (600 <io_read+0x30>)
     5e6:	4479      	add	r1, pc
     5e8:	f000 f8c0 	bl	76c <assert>
	return io_descr->read(io_descr, buf, length);
     5ec:	6863      	ldr	r3, [r4, #4]
     5ee:	0032      	movs	r2, r6
     5f0:	0029      	movs	r1, r5
     5f2:	0020      	movs	r0, r4
     5f4:	4798      	blx	r3
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     5f8:	2000      	movs	r0, #0
     5fa:	e7f2      	b.n	5e2 <io_read+0x12>
     5fc:	2000      	movs	r0, #0
     5fe:	e7f0      	b.n	5e2 <io_read+0x12>
     600:	000030fe 	.word	0x000030fe

00000604 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     606:	0005      	movs	r5, r0
     608:	000e      	movs	r6, r1
     60a:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     60c:	2800      	cmp	r0, #0
     60e:	d024      	beq.n	65a <usart_sync_write+0x56>
     610:	2900      	cmp	r1, #0
     612:	d024      	beq.n	65e <usart_sync_write+0x5a>
     614:	2a00      	cmp	r2, #0
     616:	d124      	bne.n	662 <usart_sync_write+0x5e>
     618:	2000      	movs	r0, #0
     61a:	22f1      	movs	r2, #241	; 0xf1
     61c:	4912      	ldr	r1, [pc, #72]	; (668 <usart_sync_write+0x64>)
     61e:	4479      	add	r1, pc
     620:	f000 f8a4 	bl	76c <assert>
	while (!_usart_sync_is_ready_to_send(&descr->device))
     624:	002c      	movs	r4, r5
     626:	3408      	adds	r4, #8
     628:	0020      	movs	r0, r4
     62a:	f000 fc5c 	bl	ee6 <_usart_sync_is_ready_to_send>
     62e:	2800      	cmp	r0, #0
     630:	d0f8      	beq.n	624 <usart_sync_write+0x20>
     632:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     634:	5d71      	ldrb	r1, [r6, r5]
     636:	0020      	movs	r0, r4
     638:	f000 fc4d 	bl	ed6 <_usart_sync_write_byte>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     63c:	0020      	movs	r0, r4
     63e:	f000 fc52 	bl	ee6 <_usart_sync_is_ready_to_send>
     642:	2800      	cmp	r0, #0
     644:	d0fa      	beq.n	63c <usart_sync_write+0x38>
			;
	} while (++offset < length);
     646:	3501      	adds	r5, #1
     648:	42bd      	cmp	r5, r7
     64a:	d3f3      	bcc.n	634 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
     64c:	0020      	movs	r0, r4
     64e:	f000 fc4f 	bl	ef0 <_usart_sync_is_transmit_done>
     652:	2800      	cmp	r0, #0
     654:	d0fa      	beq.n	64c <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
     656:	0028      	movs	r0, r5
     658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     65a:	2000      	movs	r0, #0
     65c:	e7dd      	b.n	61a <usart_sync_write+0x16>
     65e:	2000      	movs	r0, #0
     660:	e7db      	b.n	61a <usart_sync_write+0x16>
     662:	2001      	movs	r0, #1
     664:	e7d9      	b.n	61a <usart_sync_write+0x16>
     666:	46c0      	nop			; (mov r8, r8)
     668:	000030da 	.word	0x000030da

0000066c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     66e:	46ce      	mov	lr, r9
     670:	4647      	mov	r7, r8
     672:	b580      	push	{r7, lr}
     674:	1e05      	subs	r5, r0, #0
     676:	4688      	mov	r8, r1
     678:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     67a:	d020      	beq.n	6be <usart_sync_read+0x52>
     67c:	2900      	cmp	r1, #0
     67e:	d020      	beq.n	6c2 <usart_sync_read+0x56>
     680:	2a00      	cmp	r2, #0
     682:	d120      	bne.n	6c6 <usart_sync_read+0x5a>
     684:	2000      	movs	r0, #0
     686:	2286      	movs	r2, #134	; 0x86
     688:	0052      	lsls	r2, r2, #1
     68a:	4910      	ldr	r1, [pc, #64]	; (6cc <usart_sync_read+0x60>)
     68c:	4479      	add	r1, pc
     68e:	f000 f86d 	bl	76c <assert>
	uint32_t                      offset = 0;
     692:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     694:	002c      	movs	r4, r5
     696:	3408      	adds	r4, #8
     698:	0020      	movs	r0, r4
     69a:	f000 fc2f 	bl	efc <_usart_sync_is_byte_received>
     69e:	2800      	cmp	r0, #0
     6a0:	d0f8      	beq.n	694 <usart_sync_read+0x28>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     6a2:	4643      	mov	r3, r8
     6a4:	199f      	adds	r7, r3, r6
     6a6:	0020      	movs	r0, r4
     6a8:	f000 fc19 	bl	ede <_usart_sync_read_byte>
     6ac:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     6ae:	3601      	adds	r6, #1
     6b0:	454e      	cmp	r6, r9
     6b2:	d3ef      	bcc.n	694 <usart_sync_read+0x28>

	return (int32_t)offset;
}
     6b4:	0030      	movs	r0, r6
     6b6:	bc0c      	pop	{r2, r3}
     6b8:	4690      	mov	r8, r2
     6ba:	4699      	mov	r9, r3
     6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     6be:	2000      	movs	r0, #0
     6c0:	e7e1      	b.n	686 <usart_sync_read+0x1a>
     6c2:	2000      	movs	r0, #0
     6c4:	e7df      	b.n	686 <usart_sync_read+0x1a>
     6c6:	2001      	movs	r0, #1
     6c8:	e7dd      	b.n	686 <usart_sync_read+0x1a>
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	0000306c 	.word	0x0000306c

000006d0 <usart_sync_init>:
{
     6d0:	b570      	push	{r4, r5, r6, lr}
     6d2:	0004      	movs	r4, r0
     6d4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     6d6:	2800      	cmp	r0, #0
     6d8:	d017      	beq.n	70a <usart_sync_init+0x3a>
     6da:	2900      	cmp	r1, #0
     6dc:	d013      	beq.n	706 <usart_sync_init+0x36>
     6de:	2001      	movs	r0, #1
     6e0:	2234      	movs	r2, #52	; 0x34
     6e2:	490b      	ldr	r1, [pc, #44]	; (710 <usart_sync_init+0x40>)
     6e4:	4479      	add	r1, pc
     6e6:	f000 f841 	bl	76c <assert>
	init_status = _usart_sync_init(&descr->device, hw);
     6ea:	0020      	movs	r0, r4
     6ec:	3008      	adds	r0, #8
     6ee:	0029      	movs	r1, r5
     6f0:	f000 fbd6 	bl	ea0 <_usart_sync_init>
	if (init_status) {
     6f4:	2800      	cmp	r0, #0
     6f6:	d105      	bne.n	704 <usart_sync_init+0x34>
	descr->io.read  = usart_sync_read;
     6f8:	4b06      	ldr	r3, [pc, #24]	; (714 <usart_sync_init+0x44>)
     6fa:	447b      	add	r3, pc
     6fc:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     6fe:	4b06      	ldr	r3, [pc, #24]	; (718 <usart_sync_init+0x48>)
     700:	447b      	add	r3, pc
     702:	6023      	str	r3, [r4, #0]
}
     704:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     706:	2000      	movs	r0, #0
     708:	e7ea      	b.n	6e0 <usart_sync_init+0x10>
     70a:	2000      	movs	r0, #0
     70c:	e7e8      	b.n	6e0 <usart_sync_init+0x10>
     70e:	46c0      	nop			; (mov r8, r8)
     710:	00003014 	.word	0x00003014
     714:	ffffff6f 	.word	0xffffff6f
     718:	ffffff01 	.word	0xffffff01

0000071c <usart_sync_enable>:
{
     71c:	b510      	push	{r4, lr}
     71e:	0004      	movs	r4, r0
	ASSERT(descr);
     720:	1e43      	subs	r3, r0, #1
     722:	4198      	sbcs	r0, r3
     724:	b2c0      	uxtb	r0, r0
     726:	2253      	movs	r2, #83	; 0x53
     728:	4904      	ldr	r1, [pc, #16]	; (73c <usart_sync_enable+0x20>)
     72a:	4479      	add	r1, pc
     72c:	f000 f81e 	bl	76c <assert>
	_usart_sync_enable(&descr->device);
     730:	0020      	movs	r0, r4
     732:	3008      	adds	r0, #8
     734:	f000 fbc6 	bl	ec4 <_usart_sync_enable>
}
     738:	2000      	movs	r0, #0
     73a:	bd10      	pop	{r4, pc}
     73c:	00002fce 	.word	0x00002fce

00000740 <usart_sync_get_io_descriptor>:
{
     740:	b570      	push	{r4, r5, r6, lr}
     742:	0004      	movs	r4, r0
     744:	000d      	movs	r5, r1
	ASSERT(descr && io);
     746:	2800      	cmp	r0, #0
     748:	d00c      	beq.n	764 <usart_sync_get_io_descriptor+0x24>
     74a:	2900      	cmp	r1, #0
     74c:	d008      	beq.n	760 <usart_sync_get_io_descriptor+0x20>
     74e:	2001      	movs	r0, #1
     750:	2269      	movs	r2, #105	; 0x69
     752:	4905      	ldr	r1, [pc, #20]	; (768 <usart_sync_get_io_descriptor+0x28>)
     754:	4479      	add	r1, pc
     756:	f000 f809 	bl	76c <assert>
	*io = &descr->io;
     75a:	602c      	str	r4, [r5, #0]
}
     75c:	2000      	movs	r0, #0
     75e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     760:	2000      	movs	r0, #0
     762:	e7f5      	b.n	750 <usart_sync_get_io_descriptor+0x10>
     764:	2000      	movs	r0, #0
     766:	e7f3      	b.n	750 <usart_sync_get_io_descriptor+0x10>
     768:	00002fa4 	.word	0x00002fa4

0000076c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     76c:	2800      	cmp	r0, #0
     76e:	d100      	bne.n	772 <assert+0x6>
		__asm("BKPT #0");
     770:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     772:	4770      	bx	lr

00000774 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     774:	b082      	sub	sp, #8
     776:	0003      	movs	r3, r0
     778:	4a0a      	ldr	r2, [pc, #40]	; (7a4 <_sbrk+0x30>)
     77a:	447a      	add	r2, pc
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     77c:	490a      	ldr	r1, [pc, #40]	; (7a8 <_sbrk+0x34>)
     77e:	4479      	add	r1, pc
     780:	6809      	ldr	r1, [r1, #0]
     782:	2900      	cmp	r1, #0
     784:	d006      	beq.n	794 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     786:	4a09      	ldr	r2, [pc, #36]	; (7ac <_sbrk+0x38>)
     788:	447a      	add	r2, pc
     78a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     78c:	18c3      	adds	r3, r0, r3
     78e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     790:	b002      	add	sp, #8
     792:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     794:	4906      	ldr	r1, [pc, #24]	; (7b0 <_sbrk+0x3c>)
     796:	5852      	ldr	r2, [r2, r1]
     798:	9201      	str	r2, [sp, #4]
     79a:	4a06      	ldr	r2, [pc, #24]	; (7b4 <_sbrk+0x40>)
     79c:	447a      	add	r2, pc
     79e:	9901      	ldr	r1, [sp, #4]
     7a0:	6011      	str	r1, [r2, #0]
     7a2:	e7f0      	b.n	786 <_sbrk+0x12>
     7a4:	000036aa 	.word	0x000036aa
     7a8:	1ffff90a 	.word	0x1ffff90a
     7ac:	1ffff900 	.word	0x1ffff900
     7b0:	00000044 	.word	0x00000044
     7b4:	1ffff8ec 	.word	0x1ffff8ec

000007b8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     7b8:	0103      	lsls	r3, r0, #4
     7ba:	1a1b      	subs	r3, r3, r0
     7bc:	011a      	lsls	r2, r3, #4
     7be:	2064      	movs	r0, #100	; 0x64
     7c0:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     7c2:	4770      	bx	lr

000007c4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     7c4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     7c6:	4b08      	ldr	r3, [pc, #32]	; (7e8 <_init_chip+0x24>)
     7c8:	685a      	ldr	r2, [r3, #4]
     7ca:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     7cc:	f000 f8d8 	bl	980 <_pm_init>
	_sysctrl_init_sources();
     7d0:	f000 fd2e 	bl	1230 <_sysctrl_init_sources>
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     7d4:	2002      	movs	r0, #2
     7d6:	f000 f8b3 	bl	940 <_gclk_init_generators_by_fref>
#endif
	_sysctrl_init_referenced_generators();
     7da:	f000 fd35 	bl	1248 <_sysctrl_init_referenced_generators>
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     7de:	20fd      	movs	r0, #253	; 0xfd
     7e0:	f000 f8ae 	bl	940 <_gclk_init_generators_by_fref>
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     7e4:	bd10      	pop	{r4, pc}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	41004000 	.word	0x41004000

000007ec <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     7ec:	4b22      	ldr	r3, [pc, #136]	; (878 <_ext_irq_init+0x8c>)
     7ee:	785b      	ldrb	r3, [r3, #1]
     7f0:	09db      	lsrs	r3, r3, #7
     7f2:	d1fb      	bne.n	7ec <_ext_irq_init>
     7f4:	4b20      	ldr	r3, [pc, #128]	; (878 <_ext_irq_init+0x8c>)
     7f6:	785b      	ldrb	r3, [r3, #1]
     7f8:	09db      	lsrs	r3, r3, #7
     7fa:	d1fb      	bne.n	7f4 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     7fc:	4b1e      	ldr	r3, [pc, #120]	; (878 <_ext_irq_init+0x8c>)
     7fe:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     800:	079b      	lsls	r3, r3, #30
     802:	d50a      	bpl.n	81a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     804:	2200      	movs	r2, #0
     806:	4b1c      	ldr	r3, [pc, #112]	; (878 <_ext_irq_init+0x8c>)
     808:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     80a:	4b1b      	ldr	r3, [pc, #108]	; (878 <_ext_irq_init+0x8c>)
     80c:	785b      	ldrb	r3, [r3, #1]
     80e:	09db      	lsrs	r3, r3, #7
     810:	d1fb      	bne.n	80a <_ext_irq_init+0x1e>
     812:	4b19      	ldr	r3, [pc, #100]	; (878 <_ext_irq_init+0x8c>)
     814:	785b      	ldrb	r3, [r3, #1]
     816:	09db      	lsrs	r3, r3, #7
     818:	d1fb      	bne.n	812 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     81a:	2201      	movs	r2, #1
     81c:	4b16      	ldr	r3, [pc, #88]	; (878 <_ext_irq_init+0x8c>)
     81e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     820:	4b15      	ldr	r3, [pc, #84]	; (878 <_ext_irq_init+0x8c>)
     822:	785b      	ldrb	r3, [r3, #1]
     824:	09db      	lsrs	r3, r3, #7
     826:	d1fb      	bne.n	820 <_ext_irq_init+0x34>
     828:	4b13      	ldr	r3, [pc, #76]	; (878 <_ext_irq_init+0x8c>)
     82a:	785b      	ldrb	r3, [r3, #1]
     82c:	09db      	lsrs	r3, r3, #7
     82e:	d1fb      	bne.n	828 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     830:	4b11      	ldr	r3, [pc, #68]	; (878 <_ext_irq_init+0x8c>)
     832:	2200      	movs	r2, #0
     834:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     836:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     838:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     83a:	619a      	str	r2, [r3, #24]
     83c:	2280      	movs	r2, #128	; 0x80
     83e:	0292      	lsls	r2, r2, #10
     840:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     842:	781a      	ldrb	r2, [r3, #0]
     844:	2102      	movs	r1, #2
     846:	430a      	orrs	r2, r1
     848:	b2d2      	uxtb	r2, r2
     84a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     84c:	4b0a      	ldr	r3, [pc, #40]	; (878 <_ext_irq_init+0x8c>)
     84e:	785b      	ldrb	r3, [r3, #1]
     850:	09db      	lsrs	r3, r3, #7
     852:	d1fb      	bne.n	84c <_ext_irq_init+0x60>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     854:	4b09      	ldr	r3, [pc, #36]	; (87c <_ext_irq_init+0x90>)
     856:	2210      	movs	r2, #16
     858:	2180      	movs	r1, #128	; 0x80
     85a:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     85c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     860:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     864:	3101      	adds	r1, #1
     866:	31ff      	adds	r1, #255	; 0xff
     868:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     86a:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     86c:	4b04      	ldr	r3, [pc, #16]	; (880 <_ext_irq_init+0x94>)
     86e:	447b      	add	r3, pc
     870:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     872:	2000      	movs	r0, #0
     874:	4770      	bx	lr
     876:	46c0      	nop			; (mov r8, r8)
     878:	40001800 	.word	0x40001800
     87c:	e000e100 	.word	0xe000e100
     880:	1ffff81e 	.word	0x1ffff81e

00000884 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     884:	b570      	push	{r4, r5, r6, lr}
     886:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     888:	4b28      	ldr	r3, [pc, #160]	; (92c <EIC_Handler+0xa8>)
     88a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     88c:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     88e:	400a      	ands	r2, r1
     890:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     892:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     894:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     896:	4b26      	ldr	r3, [pc, #152]	; (930 <EIC_Handler+0xac>)
     898:	447b      	add	r3, pc
     89a:	6818      	ldr	r0, [r3, #0]
     89c:	1e43      	subs	r3, r0, #1
     89e:	4198      	sbcs	r0, r3
     8a0:	b2c0      	uxtb	r0, r0
     8a2:	22d2      	movs	r2, #210	; 0xd2
     8a4:	4923      	ldr	r1, [pc, #140]	; (934 <EIC_Handler+0xb0>)
     8a6:	4479      	add	r1, pc
     8a8:	f7ff ff60 	bl	76c <assert>
	uint32_t          pin = INVALID_PIN_NUMBER;
     8ac:	2501      	movs	r5, #1
     8ae:	426d      	negs	r5, r5

	while (flags) {
     8b0:	e030      	b.n	914 <EIC_Handler+0x90>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     8b2:	3901      	subs	r1, #1
     8b4:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     8b6:	42b0      	cmp	r0, r6
     8b8:	d80f      	bhi.n	8da <EIC_Handler+0x56>
				middle = (upper + lower) >> 1;
     8ba:	1832      	adds	r2, r6, r0
     8bc:	1052      	asrs	r2, r2, #1
     8be:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
     8c0:	23ff      	movs	r3, #255	; 0xff
     8c2:	4013      	ands	r3, r2
     8c4:	00db      	lsls	r3, r3, #3
     8c6:	4a1c      	ldr	r2, [pc, #112]	; (938 <EIC_Handler+0xb4>)
     8c8:	447a      	add	r2, pc
     8ca:	5c9b      	ldrb	r3, [r3, r2]
     8cc:	42a3      	cmp	r3, r4
     8ce:	d003      	beq.n	8d8 <EIC_Handler+0x54>
				if (_map[middle].extint < pos) {
     8d0:	daef      	bge.n	8b2 <EIC_Handler+0x2e>
					lower = middle + 1;
     8d2:	3101      	adds	r1, #1
     8d4:	b2c8      	uxtb	r0, r1
     8d6:	e7ee      	b.n	8b6 <EIC_Handler+0x32>
					pin = _map[middle].pin;
     8d8:	2518      	movs	r5, #24
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     8da:	1c6b      	adds	r3, r5, #1
     8dc:	d004      	beq.n	8e8 <EIC_Handler+0x64>
				callback(pin);
     8de:	4b17      	ldr	r3, [pc, #92]	; (93c <EIC_Handler+0xb8>)
     8e0:	447b      	add	r3, pc
     8e2:	681b      	ldr	r3, [r3, #0]
     8e4:	0028      	movs	r0, r5
     8e6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     8e8:	2201      	movs	r2, #1
     8ea:	40a2      	lsls	r2, r4
     8ec:	9b01      	ldr	r3, [sp, #4]
     8ee:	4393      	bics	r3, r2
     8f0:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     8f2:	9801      	ldr	r0, [sp, #4]
     8f4:	f001 fdac 	bl	2450 <__ffssi2>
     8f8:	3801      	subs	r0, #1
     8fa:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     8fc:	1c63      	adds	r3, r4, #1
     8fe:	d002      	beq.n	906 <EIC_Handler+0x82>
     900:	2601      	movs	r6, #1
     902:	2000      	movs	r0, #0
     904:	e7d7      	b.n	8b6 <EIC_Handler+0x32>
	return ((Eic *)hw)->INTFLAG.reg;
     906:	4b09      	ldr	r3, [pc, #36]	; (92c <EIC_Handler+0xa8>)
     908:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     90a:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     90c:	400a      	ands	r2, r1
     90e:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     910:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     912:	611a      	str	r2, [r3, #16]
	while (flags) {
     914:	9b01      	ldr	r3, [sp, #4]
     916:	2b00      	cmp	r3, #0
     918:	d005      	beq.n	926 <EIC_Handler+0xa2>
		pos = ffs(flags) - 1;
     91a:	9801      	ldr	r0, [sp, #4]
     91c:	f001 fd98 	bl	2450 <__ffssi2>
     920:	3801      	subs	r0, #1
     922:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     924:	e7ea      	b.n	8fc <EIC_Handler+0x78>
	}
}
     926:	b002      	add	sp, #8
     928:	bd70      	pop	{r4, r5, r6, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	40001800 	.word	0x40001800
     930:	1ffff7f4 	.word	0x1ffff7f4
     934:	00002e76 	.word	0x00002e76
     938:	00002e4c 	.word	0x00002e4c
     93c:	1ffff7ac 	.word	0x1ffff7ac

00000940 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     940:	07c3      	lsls	r3, r0, #31
     942:	d509      	bpl.n	958 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     944:	4b0b      	ldr	r3, [pc, #44]	; (974 <_gclk_init_generators_by_fref+0x34>)
     946:	2280      	movs	r2, #128	; 0x80
     948:	0052      	lsls	r2, r2, #1
     94a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     94c:	4a0a      	ldr	r2, [pc, #40]	; (978 <_gclk_init_generators_by_fref+0x38>)
     94e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     950:	4b08      	ldr	r3, [pc, #32]	; (974 <_gclk_init_generators_by_fref+0x34>)
     952:	785b      	ldrb	r3, [r3, #1]
     954:	09db      	lsrs	r3, r3, #7
     956:	d1fb      	bne.n	950 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     958:	0783      	lsls	r3, r0, #30
     95a:	d509      	bpl.n	970 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     95c:	4b05      	ldr	r3, [pc, #20]	; (974 <_gclk_init_generators_by_fref+0x34>)
     95e:	2202      	movs	r2, #2
     960:	32ff      	adds	r2, #255	; 0xff
     962:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     964:	4a05      	ldr	r2, [pc, #20]	; (97c <_gclk_init_generators_by_fref+0x3c>)
     966:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     968:	4b02      	ldr	r3, [pc, #8]	; (974 <_gclk_init_generators_by_fref+0x34>)
     96a:	785b      	ldrb	r3, [r3, #1]
     96c:	09db      	lsrs	r3, r3, #7
     96e:	d1fb      	bne.n	968 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     970:	4770      	bx	lr
     972:	46c0      	nop			; (mov r8, r8)
     974:	40000c00 	.word	0x40000c00
     978:	00010700 	.word	0x00010700
     97c:	00010301 	.word	0x00010301

00000980 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     980:	4b07      	ldr	r3, [pc, #28]	; (9a0 <_pm_init+0x20>)
     982:	7a1a      	ldrb	r2, [r3, #8]
     984:	2101      	movs	r1, #1
     986:	430a      	orrs	r2, r1
     988:	b2d2      	uxtb	r2, r2
     98a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     98c:	7a5a      	ldrb	r2, [r3, #9]
     98e:	b2d2      	uxtb	r2, r2
     990:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     992:	7a9a      	ldrb	r2, [r3, #10]
     994:	b2d2      	uxtb	r2, r2
     996:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     998:	7ada      	ldrb	r2, [r3, #11]
     99a:	b2d2      	uxtb	r2, r2
     99c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     99e:	4770      	bx	lr
     9a0:	40000400 	.word	0x40000400

000009a4 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     9a4:	4b02      	ldr	r3, [pc, #8]	; (9b0 <_sercom_get_hardware_index+0xc>)
     9a6:	469c      	mov	ip, r3
     9a8:	4460      	add	r0, ip
     9aa:	0a80      	lsrs	r0, r0, #10
     9ac:	b2c0      	uxtb	r0, r0
}
     9ae:	4770      	bx	lr
     9b0:	bdfff800 	.word	0xbdfff800

000009b4 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     9b4:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9b6:	f7ff fff5 	bl	9a4 <_sercom_get_hardware_index>
     9ba:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     9bc:	2000      	movs	r0, #0
     9be:	2800      	cmp	r0, #0
     9c0:	d007      	beq.n	9d2 <_get_sercom_index+0x1e>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     9c2:	4a09      	ldr	r2, [pc, #36]	; (9e8 <_get_sercom_index+0x34>)
     9c4:	4909      	ldr	r1, [pc, #36]	; (9ec <_get_sercom_index+0x38>)
     9c6:	4479      	add	r1, pc
     9c8:	2000      	movs	r0, #0
     9ca:	f7ff fecf 	bl	76c <assert>
	return 0;
     9ce:	2000      	movs	r0, #0
}
     9d0:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     9d2:	0083      	lsls	r3, r0, #2
     9d4:	181b      	adds	r3, r3, r0
     9d6:	0099      	lsls	r1, r3, #2
     9d8:	4b05      	ldr	r3, [pc, #20]	; (9f0 <_get_sercom_index+0x3c>)
     9da:	447b      	add	r3, pc
     9dc:	5ccb      	ldrb	r3, [r1, r3]
     9de:	429a      	cmp	r2, r3
     9e0:	d0f6      	beq.n	9d0 <_get_sercom_index+0x1c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     9e2:	3001      	adds	r0, #1
     9e4:	b2c0      	uxtb	r0, r0
     9e6:	e7ea      	b.n	9be <_get_sercom_index+0xa>
     9e8:	0000023a 	.word	0x0000023a
     9ec:	00002dbe 	.word	0x00002dbe
     9f0:	00002d5a 	.word	0x00002d5a

000009f4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     9f4:	b570      	push	{r4, r5, r6, lr}
     9f6:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     9f8:	f7ff ffdc 	bl	9b4 <_get_sercom_index>
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     9fc:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     9fe:	07db      	lsls	r3, r3, #31
     a00:	d41e      	bmi.n	a40 <_usart_init+0x4c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     a02:	0083      	lsls	r3, r0, #2
     a04:	181b      	adds	r3, r3, r0
     a06:	009a      	lsls	r2, r3, #2
     a08:	4b38      	ldr	r3, [pc, #224]	; (aec <_usart_init+0xf8>)
     a0a:	447b      	add	r3, pc
     a0c:	189b      	adds	r3, r3, r2
     a0e:	685a      	ldr	r2, [r3, #4]
     a10:	231c      	movs	r3, #28
     a12:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a14:	69e3      	ldr	r3, [r4, #28]
     a16:	079b      	lsls	r3, r3, #30
     a18:	d1fc      	bne.n	a14 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a1a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a1c:	079b      	lsls	r3, r3, #30
     a1e:	d509      	bpl.n	a34 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a20:	6823      	ldr	r3, [r4, #0]
     a22:	2102      	movs	r1, #2
     a24:	438b      	bics	r3, r1
     a26:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a28:	69e3      	ldr	r3, [r4, #28]
     a2a:	079b      	lsls	r3, r3, #30
     a2c:	d1fc      	bne.n	a28 <_usart_init+0x34>
     a2e:	69e3      	ldr	r3, [r4, #28]
     a30:	079b      	lsls	r3, r3, #30
     a32:	d4fc      	bmi.n	a2e <_usart_init+0x3a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     a34:	2301      	movs	r3, #1
     a36:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a38:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a3a:	69e3      	ldr	r3, [r4, #28]
     a3c:	079b      	lsls	r3, r3, #30
     a3e:	d1fc      	bne.n	a3a <_usart_init+0x46>
     a40:	69e3      	ldr	r3, [r4, #28]
     a42:	07db      	lsls	r3, r3, #31
     a44:	d4fc      	bmi.n	a40 <_usart_init+0x4c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     a46:	0083      	lsls	r3, r0, #2
     a48:	181b      	adds	r3, r3, r0
     a4a:	009a      	lsls	r2, r3, #2
     a4c:	4b28      	ldr	r3, [pc, #160]	; (af0 <_usart_init+0xfc>)
     a4e:	447b      	add	r3, pc
     a50:	189b      	adds	r3, r3, r2
     a52:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a54:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a56:	69e3      	ldr	r3, [r4, #28]
     a58:	079b      	lsls	r3, r3, #30
     a5a:	d1fc      	bne.n	a56 <_usart_init+0x62>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     a5c:	0083      	lsls	r3, r0, #2
     a5e:	181b      	adds	r3, r3, r0
     a60:	009a      	lsls	r2, r3, #2
     a62:	4b24      	ldr	r3, [pc, #144]	; (af4 <_usart_init+0x100>)
     a64:	447b      	add	r3, pc
     a66:	189b      	adds	r3, r3, r2
     a68:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     a6a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a6c:	69e3      	ldr	r3, [r4, #28]
     a6e:	075b      	lsls	r3, r3, #29
     a70:	d1fc      	bne.n	a6c <_usart_init+0x78>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     a72:	0083      	lsls	r3, r0, #2
     a74:	181b      	adds	r3, r3, r0
     a76:	009a      	lsls	r2, r3, #2
     a78:	4b1f      	ldr	r3, [pc, #124]	; (af8 <_usart_init+0x104>)
     a7a:	447b      	add	r3, pc
     a7c:	189b      	adds	r3, r3, r2
     a7e:	685b      	ldr	r3, [r3, #4]
     a80:	049a      	lsls	r2, r3, #18
     a82:	d40c      	bmi.n	a9e <_usart_init+0xaa>
     a84:	22c0      	movs	r2, #192	; 0xc0
     a86:	01d2      	lsls	r2, r2, #7
     a88:	4213      	tst	r3, r2
     a8a:	d108      	bne.n	a9e <_usart_init+0xaa>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     a8c:	0083      	lsls	r3, r0, #2
     a8e:	181b      	adds	r3, r3, r0
     a90:	009a      	lsls	r2, r3, #2
     a92:	4b1a      	ldr	r3, [pc, #104]	; (afc <_usart_init+0x108>)
     a94:	447b      	add	r3, pc
     a96:	189b      	adds	r3, r3, r2
     a98:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     a9a:	81a3      	strh	r3, [r4, #12]
     a9c:	e016      	b.n	acc <_usart_init+0xd8>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     a9e:	0083      	lsls	r3, r0, #2
     aa0:	181b      	adds	r3, r3, r0
     aa2:	009a      	lsls	r2, r3, #2
     aa4:	4916      	ldr	r1, [pc, #88]	; (b00 <_usart_init+0x10c>)
     aa6:	4479      	add	r1, pc
     aa8:	1889      	adds	r1, r1, r2
     aaa:	898a      	ldrh	r2, [r1, #12]
     aac:	89a3      	ldrh	r3, [r4, #12]
     aae:	04d2      	lsls	r2, r2, #19
     ab0:	0cd2      	lsrs	r2, r2, #19
     ab2:	0b5b      	lsrs	r3, r3, #13
     ab4:	035b      	lsls	r3, r3, #13
     ab6:	4313      	orrs	r3, r2
     ab8:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     aba:	7b8b      	ldrb	r3, [r1, #14]
     abc:	2207      	movs	r2, #7
     abe:	401a      	ands	r2, r3
     ac0:	89a3      	ldrh	r3, [r4, #12]
     ac2:	0352      	lsls	r2, r2, #13
     ac4:	04db      	lsls	r3, r3, #19
     ac6:	0cdb      	lsrs	r3, r3, #19
     ac8:	4313      	orrs	r3, r2
     aca:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     acc:	4b0d      	ldr	r3, [pc, #52]	; (b04 <_usart_init+0x110>)
     ace:	447b      	add	r3, pc
     ad0:	0082      	lsls	r2, r0, #2
     ad2:	1815      	adds	r5, r2, r0
     ad4:	00a9      	lsls	r1, r5, #2
     ad6:	000d      	movs	r5, r1
     ad8:	1859      	adds	r1, r3, r1
     ada:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     adc:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     ade:	195b      	adds	r3, r3, r5
     ae0:	7c1a      	ldrb	r2, [r3, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     ae2:	2330      	movs	r3, #48	; 0x30
     ae4:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     ae6:	2000      	movs	r0, #0
     ae8:	bd70      	pop	{r4, r5, r6, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00002d2a 	.word	0x00002d2a
     af0:	00002ce6 	.word	0x00002ce6
     af4:	00002cd0 	.word	0x00002cd0
     af8:	00002cba 	.word	0x00002cba
     afc:	00002ca0 	.word	0x00002ca0
     b00:	00002c8e 	.word	0x00002c8e
     b04:	00002c66 	.word	0x00002c66

00000b08 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     b08:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     b0a:	f7ff ff4b 	bl	9a4 <_sercom_get_hardware_index>
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     b0e:	2300      	movs	r3, #0
     b10:	2b00      	cmp	r3, #0
     b12:	d009      	beq.n	b28 <_get_i2cm_index+0x20>
		if (_i2cms[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     b14:	22e6      	movs	r2, #230	; 0xe6
     b16:	0092      	lsls	r2, r2, #2
     b18:	490a      	ldr	r1, [pc, #40]	; (b44 <_get_i2cm_index+0x3c>)
     b1a:	4479      	add	r1, pc
     b1c:	2000      	movs	r0, #0
     b1e:	f7ff fe25 	bl	76c <assert>
	return -1;
     b22:	2001      	movs	r0, #1
     b24:	4240      	negs	r0, r0
}
     b26:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
     b28:	005a      	lsls	r2, r3, #1
     b2a:	18d2      	adds	r2, r2, r3
     b2c:	00d1      	lsls	r1, r2, #3
     b2e:	4a06      	ldr	r2, [pc, #24]	; (b48 <_get_i2cm_index+0x40>)
     b30:	447a      	add	r2, pc
     b32:	1852      	adds	r2, r2, r1
     b34:	7d12      	ldrb	r2, [r2, #20]
     b36:	4290      	cmp	r0, r2
     b38:	d002      	beq.n	b40 <_get_i2cm_index+0x38>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     b3a:	3301      	adds	r3, #1
     b3c:	b2db      	uxtb	r3, r3
     b3e:	e7e7      	b.n	b10 <_get_i2cm_index+0x8>
			return i;
     b40:	b258      	sxtb	r0, r3
     b42:	e7f0      	b.n	b26 <_get_i2cm_index+0x1e>
     b44:	00002c6a 	.word	0x00002c6a
     b48:	00002c04 	.word	0x00002c04

00000b4c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	0005      	movs	r5, r0
     b50:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     b52:	0008      	movs	r0, r1
     b54:	f7ff ffd8 	bl	b08 <_get_i2cm_index>
     b58:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     b5a:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     b5c:	07db      	lsls	r3, r3, #31
     b5e:	d41e      	bmi.n	b9e <_i2c_m_sync_init_impl+0x52>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     b60:	0043      	lsls	r3, r0, #1
     b62:	181b      	adds	r3, r3, r0
     b64:	00da      	lsls	r2, r3, #3
     b66:	4b2c      	ldr	r3, [pc, #176]	; (c18 <_i2c_m_sync_init_impl+0xcc>)
     b68:	447b      	add	r3, pc
     b6a:	189b      	adds	r3, r3, r2
     b6c:	699a      	ldr	r2, [r3, #24]
     b6e:	231c      	movs	r3, #28
     b70:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b72:	69e3      	ldr	r3, [r4, #28]
     b74:	079b      	lsls	r3, r3, #30
     b76:	d1fc      	bne.n	b72 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     b78:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     b7a:	079b      	lsls	r3, r3, #30
     b7c:	d509      	bpl.n	b92 <_i2c_m_sync_init_impl+0x46>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     b7e:	6823      	ldr	r3, [r4, #0]
     b80:	2102      	movs	r1, #2
     b82:	438b      	bics	r3, r1
     b84:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b86:	69e3      	ldr	r3, [r4, #28]
     b88:	079b      	lsls	r3, r3, #30
     b8a:	d1fc      	bne.n	b86 <_i2c_m_sync_init_impl+0x3a>
     b8c:	69e3      	ldr	r3, [r4, #28]
     b8e:	079b      	lsls	r3, r3, #30
     b90:	d4fc      	bmi.n	b8c <_i2c_m_sync_init_impl+0x40>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     b92:	2301      	movs	r3, #1
     b94:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     b96:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b98:	69e3      	ldr	r3, [r4, #28]
     b9a:	079b      	lsls	r3, r3, #30
     b9c:	d1fc      	bne.n	b98 <_i2c_m_sync_init_impl+0x4c>
     b9e:	69e3      	ldr	r3, [r4, #28]
     ba0:	07db      	lsls	r3, r3, #31
     ba2:	d4fc      	bmi.n	b9e <_i2c_m_sync_init_impl+0x52>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     ba4:	0043      	lsls	r3, r0, #1
     ba6:	181b      	adds	r3, r3, r0
     ba8:	00da      	lsls	r2, r3, #3
     baa:	4b1c      	ldr	r3, [pc, #112]	; (c1c <_i2c_m_sync_init_impl+0xd0>)
     bac:	447b      	add	r3, pc
     bae:	189b      	adds	r3, r3, r2
     bb0:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     bb2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bb4:	69e3      	ldr	r3, [r4, #28]
     bb6:	079b      	lsls	r3, r3, #30
     bb8:	d1fc      	bne.n	bb4 <_i2c_m_sync_init_impl+0x68>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     bba:	0043      	lsls	r3, r0, #1
     bbc:	181b      	adds	r3, r3, r0
     bbe:	00da      	lsls	r2, r3, #3
     bc0:	4b17      	ldr	r3, [pc, #92]	; (c20 <_i2c_m_sync_init_impl+0xd4>)
     bc2:	447b      	add	r3, pc
     bc4:	189b      	adds	r3, r3, r2
     bc6:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     bc8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bca:	69e3      	ldr	r3, [r4, #28]
     bcc:	075b      	lsls	r3, r3, #29
     bce:	d4fc      	bmi.n	bca <_i2c_m_sync_init_impl+0x7e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     bd0:	0042      	lsls	r2, r0, #1
     bd2:	1812      	adds	r2, r2, r0
     bd4:	00d1      	lsls	r1, r2, #3
     bd6:	4b13      	ldr	r3, [pc, #76]	; (c24 <_i2c_m_sync_init_impl+0xd8>)
     bd8:	447b      	add	r3, pc
     bda:	185b      	adds	r3, r3, r1
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     bdc:	6a1a      	ldr	r2, [r3, #32]
     bde:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     be0:	7eda      	ldrb	r2, [r3, #27]
     be2:	2303      	movs	r3, #3
     be4:	401a      	ands	r2, r3
     be6:	81aa      	strh	r2, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     be8:	3b02      	subs	r3, #2
     bea:	4293      	cmp	r3, r2
     bec:	419b      	sbcs	r3, r3
     bee:	425b      	negs	r3, r3
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     bf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     bf2:	490d      	ldr	r1, [pc, #52]	; (c28 <_i2c_m_sync_init_impl+0xdc>)
     bf4:	400a      	ands	r2, r1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     bf6:	039b      	lsls	r3, r3, #14
     bf8:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     bfa:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bfc:	69e3      	ldr	r3, [r4, #28]
     bfe:	075b      	lsls	r3, r3, #29
     c00:	d4fc      	bmi.n	bfc <_i2c_m_sync_init_impl+0xb0>

	service->trise = _i2cms[i].trise;
     c02:	0043      	lsls	r3, r0, #1
     c04:	1818      	adds	r0, r3, r0
     c06:	00c2      	lsls	r2, r0, #3
     c08:	4b08      	ldr	r3, [pc, #32]	; (c2c <_i2c_m_sync_init_impl+0xe0>)
     c0a:	447b      	add	r3, pc
     c0c:	189b      	adds	r3, r3, r2
     c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     c10:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     c12:	2000      	movs	r0, #0
     c14:	bd70      	pop	{r4, r5, r6, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	00002bcc 	.word	0x00002bcc
     c1c:	00002b88 	.word	0x00002b88
     c20:	00002b72 	.word	0x00002b72
     c24:	00002b5c 	.word	0x00002b5c
     c28:	ffffbfff 	.word	0xffffbfff
     c2c:	00002b2a 	.word	0x00002b2a

00000c30 <_sercom_i2c_sync_send_address>:
{
     c30:	b570      	push	{r4, r5, r6, lr}
     c32:	0005      	movs	r5, r0
	void *             hw    = i2c_dev->hw;
     c34:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     c36:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     c38:	0edb      	lsrs	r3, r3, #27
     c3a:	2601      	movs	r6, #1
     c3c:	401e      	ands	r6, r3
	ASSERT(i2c_dev);
     c3e:	1e43      	subs	r3, r0, #1
     c40:	4198      	sbcs	r0, r3
     c42:	b2c0      	uxtb	r0, r0
     c44:	4a8f      	ldr	r2, [pc, #572]	; (e84 <_sercom_i2c_sync_send_address+0x254>)
     c46:	4990      	ldr	r1, [pc, #576]	; (e88 <_sercom_i2c_sync_send_address+0x258>)
     c48:	4479      	add	r1, pc
     c4a:	f7ff fd8f 	bl	76c <assert>
	if (msg->len == 1 && sclsm) {
     c4e:	686b      	ldr	r3, [r5, #4]
     c50:	2b01      	cmp	r3, #1
     c52:	d04d      	beq.n	cf0 <_sercom_i2c_sync_send_address+0xc0>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c54:	6863      	ldr	r3, [r4, #4]
     c56:	4a8d      	ldr	r2, [pc, #564]	; (e8c <_sercom_i2c_sync_send_address+0x25c>)
     c58:	4013      	ands	r3, r2
     c5a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c5c:	69e3      	ldr	r3, [r4, #28]
     c5e:	075b      	lsls	r3, r3, #29
     c60:	d4fc      	bmi.n	c5c <_sercom_i2c_sync_send_address+0x2c>
	if (msg->addr & I2C_M_TEN) {
     c62:	882b      	ldrh	r3, [r5, #0]
     c64:	055a      	lsls	r2, r3, #21
     c66:	d54e      	bpl.n	d06 <_sercom_i2c_sync_send_address+0xd6>
		if (msg->flags & I2C_M_RD) {
     c68:	886a      	ldrh	r2, [r5, #2]
     c6a:	07d2      	lsls	r2, r2, #31
     c6c:	d504      	bpl.n	c78 <_sercom_i2c_sync_send_address+0x48>
			msg->flags |= I2C_M_TEN;
     c6e:	886a      	ldrh	r2, [r5, #2]
     c70:	2180      	movs	r1, #128	; 0x80
     c72:	00c9      	lsls	r1, r1, #3
     c74:	430a      	orrs	r2, r1
     c76:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     c78:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c7a:	4a85      	ldr	r2, [pc, #532]	; (e90 <_sercom_i2c_sync_send_address+0x260>)
     c7c:	401a      	ands	r2, r3
     c7e:	69e3      	ldr	r3, [r4, #28]
     c80:	075b      	lsls	r3, r3, #29
     c82:	d4fc      	bmi.n	c7e <_sercom_i2c_sync_send_address+0x4e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c86:	2180      	movs	r1, #128	; 0x80
     c88:	01c9      	lsls	r1, r1, #7
     c8a:	400b      	ands	r3, r1
     c8c:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     c8e:	2280      	movs	r2, #128	; 0x80
     c90:	0212      	lsls	r2, r2, #8
     c92:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     c94:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c96:	69e3      	ldr	r3, [r4, #28]
     c98:	075b      	lsls	r3, r3, #29
     c9a:	d4fc      	bmi.n	c96 <_sercom_i2c_sync_send_address+0x66>
	void *   hw      = i2c_dev->hw;
     c9c:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     c9e:	4a7d      	ldr	r2, [pc, #500]	; (e94 <_sercom_i2c_sync_send_address+0x264>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     ca0:	7e33      	ldrb	r3, [r6, #24]
     ca2:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     ca4:	0018      	movs	r0, r3
		if (timeout-- == 0) {
     ca6:	1e51      	subs	r1, r2, #1
     ca8:	2a00      	cmp	r2, #0
     caa:	d002      	beq.n	cb2 <_sercom_i2c_sync_send_address+0x82>
     cac:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     cae:	079b      	lsls	r3, r3, #30
     cb0:	d0f6      	beq.n	ca0 <_sercom_i2c_sync_send_address+0x70>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     cb2:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     cb4:	0edb      	lsrs	r3, r3, #27
     cb6:	2201      	movs	r2, #1
     cb8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cba:	69e3      	ldr	r3, [r4, #28]
     cbc:	075b      	lsls	r3, r3, #29
     cbe:	d4fc      	bmi.n	cba <_sercom_i2c_sync_send_address+0x8a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     cc0:	8b63      	ldrh	r3, [r4, #26]
     cc2:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     cc4:	07c1      	lsls	r1, r0, #31
     cc6:	d400      	bmi.n	cca <_sercom_i2c_sync_send_address+0x9a>
     cc8:	e08f      	b.n	dea <_sercom_i2c_sync_send_address+0x1ba>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     cca:	079a      	lsls	r2, r3, #30
     ccc:	d52f      	bpl.n	d2e <_sercom_i2c_sync_send_address+0xfe>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     cce:	2201      	movs	r2, #1
     cd0:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     cd2:	886a      	ldrh	r2, [r5, #2]
     cd4:	2180      	movs	r1, #128	; 0x80
     cd6:	0149      	lsls	r1, r1, #5
     cd8:	430a      	orrs	r2, r1
     cda:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     cdc:	886a      	ldrh	r2, [r5, #2]
     cde:	496e      	ldr	r1, [pc, #440]	; (e98 <_sercom_i2c_sync_send_address+0x268>)
     ce0:	400a      	ands	r2, r1
     ce2:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     ce4:	07db      	lsls	r3, r3, #31
     ce6:	d400      	bmi.n	cea <_sercom_i2c_sync_send_address+0xba>
     ce8:	e0c6      	b.n	e78 <_sercom_i2c_sync_send_address+0x248>
				return I2C_ERR_BUS;
     cea:	2005      	movs	r0, #5
     cec:	4240      	negs	r0, r0
     cee:	e0a2      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
	if (msg->len == 1 && sclsm) {
     cf0:	2e00      	cmp	r6, #0
     cf2:	d0af      	beq.n	c54 <_sercom_i2c_sync_send_address+0x24>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cf4:	6862      	ldr	r2, [r4, #4]
     cf6:	2380      	movs	r3, #128	; 0x80
     cf8:	02db      	lsls	r3, r3, #11
     cfa:	4313      	orrs	r3, r2
     cfc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cfe:	69e3      	ldr	r3, [r4, #28]
     d00:	075b      	lsls	r3, r3, #29
     d02:	d4fc      	bmi.n	cfe <_sercom_i2c_sync_send_address+0xce>
     d04:	e7ad      	b.n	c62 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     d06:	005b      	lsls	r3, r3, #1
     d08:	22ff      	movs	r2, #255	; 0xff
     d0a:	4013      	ands	r3, r2
     d0c:	886a      	ldrh	r2, [r5, #2]
     d0e:	2101      	movs	r1, #1
     d10:	400a      	ands	r2, r1
     d12:	431a      	orrs	r2, r3
     d14:	69e3      	ldr	r3, [r4, #28]
     d16:	075b      	lsls	r3, r3, #29
     d18:	d4fc      	bmi.n	d14 <_sercom_i2c_sync_send_address+0xe4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     d1c:	2180      	movs	r1, #128	; 0x80
     d1e:	01c9      	lsls	r1, r1, #7
     d20:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
     d22:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d24:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d26:	69e3      	ldr	r3, [r4, #28]
     d28:	075b      	lsls	r3, r3, #29
     d2a:	d4fc      	bmi.n	d26 <_sercom_i2c_sync_send_address+0xf6>
     d2c:	e7b6      	b.n	c9c <_sercom_i2c_sync_send_address+0x6c>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     d2e:	075b      	lsls	r3, r3, #29
     d30:	d41b      	bmi.n	d6a <_sercom_i2c_sync_send_address+0x13a>
			if (msg->flags & I2C_M_TEN) {
     d32:	886b      	ldrh	r3, [r5, #2]
     d34:	055b      	lsls	r3, r3, #21
     d36:	d534      	bpl.n	da2 <_sercom_i2c_sync_send_address+0x172>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     d38:	882a      	ldrh	r2, [r5, #0]
     d3a:	1212      	asrs	r2, r2, #8
     d3c:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     d3e:	2306      	movs	r3, #6
     d40:	401a      	ands	r2, r3
     d42:	69e3      	ldr	r3, [r4, #28]
     d44:	075b      	lsls	r3, r3, #29
     d46:	d4fc      	bmi.n	d42 <_sercom_i2c_sync_send_address+0x112>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d4a:	2180      	movs	r1, #128	; 0x80
     d4c:	01c9      	lsls	r1, r1, #7
     d4e:	400b      	ands	r3, r1
     d50:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     d52:	22f1      	movs	r2, #241	; 0xf1
     d54:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d56:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d58:	69e3      	ldr	r3, [r4, #28]
     d5a:	075b      	lsls	r3, r3, #29
     d5c:	d4fc      	bmi.n	d58 <_sercom_i2c_sync_send_address+0x128>
				msg->flags &= ~I2C_M_TEN;
     d5e:	886b      	ldrh	r3, [r5, #2]
     d60:	4a4e      	ldr	r2, [pc, #312]	; (e9c <_sercom_i2c_sync_send_address+0x26c>)
     d62:	4013      	ands	r3, r2
     d64:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     d66:	2000      	movs	r0, #0
     d68:	e065      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
				if (msg->len > 0) {
     d6a:	686b      	ldr	r3, [r5, #4]
     d6c:	2b00      	cmp	r3, #0
     d6e:	dd04      	ble.n	d7a <_sercom_i2c_sync_send_address+0x14a>
					msg->flags |= I2C_M_FAIL;
     d70:	886b      	ldrh	r3, [r5, #2]
     d72:	2280      	movs	r2, #128	; 0x80
     d74:	0152      	lsls	r2, r2, #5
     d76:	4313      	orrs	r3, r2
     d78:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     d7a:	886b      	ldrh	r3, [r5, #2]
     d7c:	b21b      	sxth	r3, r3
     d7e:	2b00      	cmp	r3, #0
     d80:	db06      	blt.n	d90 <_sercom_i2c_sync_send_address+0x160>
				msg->flags &= ~I2C_M_BUSY;
     d82:	886b      	ldrh	r3, [r5, #2]
     d84:	4a44      	ldr	r2, [pc, #272]	; (e98 <_sercom_i2c_sync_send_address+0x268>)
     d86:	4013      	ands	r3, r2
     d88:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     d8a:	2002      	movs	r0, #2
     d8c:	4240      	negs	r0, r0
     d8e:	e052      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d90:	6862      	ldr	r2, [r4, #4]
     d92:	23c0      	movs	r3, #192	; 0xc0
     d94:	029b      	lsls	r3, r3, #10
     d96:	4313      	orrs	r3, r2
     d98:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d9a:	69e3      	ldr	r3, [r4, #28]
     d9c:	075b      	lsls	r3, r3, #29
     d9e:	d4fc      	bmi.n	d9a <_sercom_i2c_sync_send_address+0x16a>
     da0:	e7ef      	b.n	d82 <_sercom_i2c_sync_send_address+0x152>
			if (msg->len == 0) {
     da2:	6868      	ldr	r0, [r5, #4]
     da4:	2800      	cmp	r0, #0
     da6:	d111      	bne.n	dcc <_sercom_i2c_sync_send_address+0x19c>
				if (msg->flags & I2C_M_STOP) {
     da8:	886b      	ldrh	r3, [r5, #2]
     daa:	b21b      	sxth	r3, r3
     dac:	2b00      	cmp	r3, #0
     dae:	db04      	blt.n	dba <_sercom_i2c_sync_send_address+0x18a>
				msg->flags &= ~I2C_M_BUSY;
     db0:	886b      	ldrh	r3, [r5, #2]
     db2:	4a39      	ldr	r2, [pc, #228]	; (e98 <_sercom_i2c_sync_send_address+0x268>)
     db4:	4013      	ands	r3, r2
     db6:	806b      	strh	r3, [r5, #2]
     db8:	e03d      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     dba:	6862      	ldr	r2, [r4, #4]
     dbc:	23c0      	movs	r3, #192	; 0xc0
     dbe:	029b      	lsls	r3, r3, #10
     dc0:	4313      	orrs	r3, r2
     dc2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dc4:	69e3      	ldr	r3, [r4, #28]
     dc6:	075b      	lsls	r3, r3, #29
     dc8:	d4fc      	bmi.n	dc4 <_sercom_i2c_sync_send_address+0x194>
     dca:	e7f1      	b.n	db0 <_sercom_i2c_sync_send_address+0x180>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     dcc:	68ab      	ldr	r3, [r5, #8]
     dce:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     dd0:	2328      	movs	r3, #40	; 0x28
     dd2:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dd4:	69e3      	ldr	r3, [r4, #28]
     dd6:	075b      	lsls	r3, r3, #29
     dd8:	d4fc      	bmi.n	dd4 <_sercom_i2c_sync_send_address+0x1a4>
				msg->buffer++;
     dda:	68ab      	ldr	r3, [r5, #8]
     ddc:	3301      	adds	r3, #1
     dde:	60ab      	str	r3, [r5, #8]
				msg->len--;
     de0:	686b      	ldr	r3, [r5, #4]
     de2:	3b01      	subs	r3, #1
     de4:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     de6:	2000      	movs	r0, #0
     de8:	e025      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
	} else if (flags & SB_FLAG) {
     dea:	0781      	lsls	r1, r0, #30
     dec:	d547      	bpl.n	e7e <_sercom_i2c_sync_send_address+0x24e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     dee:	6869      	ldr	r1, [r5, #4]
     df0:	2900      	cmp	r1, #0
     df2:	d03c      	beq.n	e6e <_sercom_i2c_sync_send_address+0x23e>
     df4:	075b      	lsls	r3, r3, #29
     df6:	d43a      	bmi.n	e6e <_sercom_i2c_sync_send_address+0x23e>
			msg->len--;
     df8:	3901      	subs	r1, #1
     dfa:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     dfc:	2900      	cmp	r1, #0
     dfe:	d101      	bne.n	e04 <_sercom_i2c_sync_send_address+0x1d4>
     e00:	2a00      	cmp	r2, #0
     e02:	d01b      	beq.n	e3c <_sercom_i2c_sync_send_address+0x20c>
     e04:	2901      	cmp	r1, #1
     e06:	d017      	beq.n	e38 <_sercom_i2c_sync_send_address+0x208>
			if (msg->len == 0) {
     e08:	686b      	ldr	r3, [r5, #4]
     e0a:	2b00      	cmp	r3, #0
     e0c:	d107      	bne.n	e1e <_sercom_i2c_sync_send_address+0x1ee>
				if (msg->flags & I2C_M_STOP) {
     e0e:	886b      	ldrh	r3, [r5, #2]
     e10:	b21b      	sxth	r3, r3
     e12:	2b00      	cmp	r3, #0
     e14:	db1b      	blt.n	e4e <_sercom_i2c_sync_send_address+0x21e>
				msg->flags &= ~I2C_M_BUSY;
     e16:	886b      	ldrh	r3, [r5, #2]
     e18:	4a1f      	ldr	r2, [pc, #124]	; (e98 <_sercom_i2c_sync_send_address+0x268>)
     e1a:	4013      	ands	r3, r2
     e1c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     e1e:	68aa      	ldr	r2, [r5, #8]
     e20:	1c53      	adds	r3, r2, #1
     e22:	60ab      	str	r3, [r5, #8]
     e24:	69e3      	ldr	r3, [r4, #28]
     e26:	075b      	lsls	r3, r3, #29
     e28:	d4fc      	bmi.n	e24 <_sercom_i2c_sync_send_address+0x1f4>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     e2a:	2328      	movs	r3, #40	; 0x28
     e2c:	5ce3      	ldrb	r3, [r4, r3]
     e2e:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e30:	2302      	movs	r3, #2
     e32:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     e34:	2000      	movs	r0, #0
}
     e36:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     e38:	2a00      	cmp	r2, #0
     e3a:	d0e5      	beq.n	e08 <_sercom_i2c_sync_send_address+0x1d8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e3c:	6862      	ldr	r2, [r4, #4]
     e3e:	2380      	movs	r3, #128	; 0x80
     e40:	02db      	lsls	r3, r3, #11
     e42:	4313      	orrs	r3, r2
     e44:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e46:	69e3      	ldr	r3, [r4, #28]
     e48:	075b      	lsls	r3, r3, #29
     e4a:	d4fc      	bmi.n	e46 <_sercom_i2c_sync_send_address+0x216>
     e4c:	e7dc      	b.n	e08 <_sercom_i2c_sync_send_address+0x1d8>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     e4e:	6863      	ldr	r3, [r4, #4]
     e50:	4a11      	ldr	r2, [pc, #68]	; (e98 <_sercom_i2c_sync_send_address+0x268>)
     e52:	4013      	ands	r3, r2
     e54:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e56:	69e3      	ldr	r3, [r4, #28]
     e58:	075b      	lsls	r3, r3, #29
     e5a:	d4fc      	bmi.n	e56 <_sercom_i2c_sync_send_address+0x226>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e5c:	6862      	ldr	r2, [r4, #4]
     e5e:	23c0      	movs	r3, #192	; 0xc0
     e60:	029b      	lsls	r3, r3, #10
     e62:	4313      	orrs	r3, r2
     e64:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e66:	69e3      	ldr	r3, [r4, #28]
     e68:	075b      	lsls	r3, r3, #29
     e6a:	d4fc      	bmi.n	e66 <_sercom_i2c_sync_send_address+0x236>
     e6c:	e7d3      	b.n	e16 <_sercom_i2c_sync_send_address+0x1e6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e6e:	2302      	movs	r3, #2
     e70:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     e72:	2002      	movs	r0, #2
     e74:	4240      	negs	r0, r0
     e76:	e7de      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
			return I2C_ERR_BAD_ADDRESS;
     e78:	2004      	movs	r0, #4
     e7a:	4240      	negs	r0, r0
     e7c:	e7db      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
	return I2C_OK;
     e7e:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
     e80:	e7d9      	b.n	e36 <_sercom_i2c_sync_send_address+0x206>
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	00000594 	.word	0x00000594
     e88:	00002b3c 	.word	0x00002b3c
     e8c:	fffbffff 	.word	0xfffbffff
     e90:	000007fe 	.word	0x000007fe
     e94:	0000ffff 	.word	0x0000ffff
     e98:	fffffeff 	.word	0xfffffeff
     e9c:	fffffbff 	.word	0xfffffbff

00000ea0 <_usart_sync_init>:
{
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	0005      	movs	r5, r0
     ea4:	000c      	movs	r4, r1
	ASSERT(device);
     ea6:	1e43      	subs	r3, r0, #1
     ea8:	4198      	sbcs	r0, r3
     eaa:	b2c0      	uxtb	r0, r0
     eac:	22b4      	movs	r2, #180	; 0xb4
     eae:	4904      	ldr	r1, [pc, #16]	; (ec0 <_usart_sync_init+0x20>)
     eb0:	4479      	add	r1, pc
     eb2:	f7ff fc5b 	bl	76c <assert>
	device->hw = hw;
     eb6:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     eb8:	0020      	movs	r0, r4
     eba:	f7ff fd9b 	bl	9f4 <_usart_init>
}
     ebe:	bd70      	pop	{r4, r5, r6, pc}
     ec0:	000028d4 	.word	0x000028d4

00000ec4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ec4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ec6:	6813      	ldr	r3, [r2, #0]
     ec8:	2102      	movs	r1, #2
     eca:	430b      	orrs	r3, r1
     ecc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ece:	69d3      	ldr	r3, [r2, #28]
     ed0:	079b      	lsls	r3, r3, #30
     ed2:	d1fc      	bne.n	ece <_usart_sync_enable+0xa>
}
     ed4:	4770      	bx	lr

00000ed6 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     ed6:	6803      	ldr	r3, [r0, #0]
     ed8:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     eda:	8519      	strh	r1, [r3, #40]	; 0x28
}
     edc:	4770      	bx	lr

00000ede <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     ede:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     ee0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     ee2:	b2c0      	uxtb	r0, r0
}
     ee4:	4770      	bx	lr

00000ee6 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     ee6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     ee8:	7e18      	ldrb	r0, [r3, #24]
     eea:	2301      	movs	r3, #1
     eec:	4018      	ands	r0, r3
}
     eee:	4770      	bx	lr

00000ef0 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     ef0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     ef2:	7e1b      	ldrb	r3, [r3, #24]
     ef4:	085b      	lsrs	r3, r3, #1
     ef6:	2001      	movs	r0, #1
     ef8:	4018      	ands	r0, r3
}
     efa:	4770      	bx	lr

00000efc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     efc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     efe:	7e1b      	ldrb	r3, [r3, #24]
     f00:	089b      	lsrs	r3, r3, #2
     f02:	2001      	movs	r0, #1
     f04:	4018      	ands	r0, r3
}
     f06:	4770      	bx	lr

00000f08 <_i2c_m_sync_init>:
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	0004      	movs	r4, r0
     f0c:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     f0e:	1e43      	subs	r3, r0, #1
     f10:	4198      	sbcs	r0, r3
     f12:	b2c0      	uxtb	r0, r0
     f14:	4a05      	ldr	r2, [pc, #20]	; (f2c <_i2c_m_sync_init+0x24>)
     f16:	4906      	ldr	r1, [pc, #24]	; (f30 <_i2c_m_sync_init+0x28>)
     f18:	4479      	add	r1, pc
     f1a:	f7ff fc27 	bl	76c <assert>
	i2c_dev->hw = hw;
     f1e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     f20:	0029      	movs	r1, r5
     f22:	0020      	movs	r0, r4
     f24:	f7ff fe12 	bl	b4c <_i2c_m_sync_init_impl>
}
     f28:	bd70      	pop	{r4, r5, r6, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00000507 	.word	0x00000507
     f30:	0000286c 	.word	0x0000286c

00000f34 <_i2c_m_sync_enable>:
{
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     f38:	4d1a      	ldr	r5, [pc, #104]	; (fa4 <_i2c_m_sync_enable+0x70>)
     f3a:	447d      	add	r5, pc
     f3c:	1e43      	subs	r3, r0, #1
     f3e:	4198      	sbcs	r0, r3
     f40:	b2c0      	uxtb	r0, r0
     f42:	4a19      	ldr	r2, [pc, #100]	; (fa8 <_i2c_m_sync_enable+0x74>)
     f44:	0029      	movs	r1, r5
     f46:	f7ff fc11 	bl	76c <assert>
	return _i2c_m_enable_implementation(i2c_dev->hw);
     f4a:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     f4c:	0020      	movs	r0, r4
     f4e:	1e43      	subs	r3, r0, #1
     f50:	4198      	sbcs	r0, r3
     f52:	b2c0      	uxtb	r0, r0
     f54:	4a15      	ldr	r2, [pc, #84]	; (fac <_i2c_m_sync_enable+0x78>)
     f56:	0029      	movs	r1, r5
     f58:	f7ff fc08 	bl	76c <assert>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     f5c:	6823      	ldr	r3, [r4, #0]
     f5e:	2202      	movs	r2, #2
     f60:	4313      	orrs	r3, r2
     f62:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f64:	69e3      	ldr	r3, [r4, #28]
     f66:	079b      	lsls	r3, r3, #30
     f68:	d1fc      	bne.n	f64 <_i2c_m_sync_enable+0x30>
     f6a:	2004      	movs	r0, #4
     f6c:	4910      	ldr	r1, [pc, #64]	; (fb0 <_i2c_m_sync_enable+0x7c>)
     f6e:	69e3      	ldr	r3, [r4, #28]
     f70:	075b      	lsls	r3, r3, #29
     f72:	d4fc      	bmi.n	f6e <_i2c_m_sync_enable+0x3a>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     f74:	8b62      	ldrh	r2, [r4, #26]
     f76:	0912      	lsrs	r2, r2, #4
     f78:	2303      	movs	r3, #3
     f7a:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     f7c:	2b01      	cmp	r3, #1
     f7e:	d00b      	beq.n	f98 <_i2c_m_sync_enable+0x64>
		timeout--;
     f80:	3901      	subs	r1, #1
		if (timeout <= 0) {
     f82:	2900      	cmp	r1, #0
     f84:	dcf3      	bgt.n	f6e <_i2c_m_sync_enable+0x3a>
			if (--timeout_attempt)
     f86:	3801      	subs	r0, #1
     f88:	2800      	cmp	r0, #0
     f8a:	d007      	beq.n	f9c <_i2c_m_sync_enable+0x68>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     f8c:	2310      	movs	r3, #16
     f8e:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f90:	69e3      	ldr	r3, [r4, #28]
     f92:	075b      	lsls	r3, r3, #29
     f94:	d4fc      	bmi.n	f90 <_i2c_m_sync_enable+0x5c>
     f96:	e7e9      	b.n	f6c <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
     f98:	2000      	movs	r0, #0
}
     f9a:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     f9c:	2006      	movs	r0, #6
     f9e:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
     fa0:	e7fb      	b.n	f9a <_i2c_m_sync_enable+0x66>
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	0000284a 	.word	0x0000284a
     fa8:	00000524 	.word	0x00000524
     fac:	000005f4 	.word	0x000005f4
     fb0:	0000ffff 	.word	0x0000ffff

00000fb4 <_i2c_m_sync_transfer>:
{
     fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fb6:	0005      	movs	r5, r0
     fb8:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
     fba:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     fbc:	4f96      	ldr	r7, [pc, #600]	; (1218 <_i2c_m_sync_transfer+0x264>)
     fbe:	447f      	add	r7, pc
     fc0:	1e43      	subs	r3, r0, #1
     fc2:	4198      	sbcs	r0, r3
     fc4:	b2c0      	uxtb	r0, r0
     fc6:	4a95      	ldr	r2, [pc, #596]	; (121c <_i2c_m_sync_transfer+0x268>)
     fc8:	0039      	movs	r1, r7
     fca:	f7ff fbcf 	bl	76c <assert>
	ASSERT(i2c_dev->hw);
     fce:	6928      	ldr	r0, [r5, #16]
     fd0:	1e43      	subs	r3, r0, #1
     fd2:	4198      	sbcs	r0, r3
     fd4:	b2c0      	uxtb	r0, r0
     fd6:	22b8      	movs	r2, #184	; 0xb8
     fd8:	00d2      	lsls	r2, r2, #3
     fda:	0039      	movs	r1, r7
     fdc:	f7ff fbc6 	bl	76c <assert>
	ASSERT(msg);
     fe0:	0030      	movs	r0, r6
     fe2:	1e43      	subs	r3, r0, #1
     fe4:	4198      	sbcs	r0, r3
     fe6:	b2c0      	uxtb	r0, r0
     fe8:	4a8d      	ldr	r2, [pc, #564]	; (1220 <_i2c_m_sync_transfer+0x26c>)
     fea:	0039      	movs	r1, r7
     fec:	f7ff fbbe 	bl	76c <assert>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     ff0:	886b      	ldrh	r3, [r5, #2]
     ff2:	05db      	lsls	r3, r3, #23
     ff4:	d500      	bpl.n	ff8 <_i2c_m_sync_transfer+0x44>
     ff6:	e10b      	b.n	1210 <_i2c_m_sync_transfer+0x25c>
	msg->flags |= I2C_M_BUSY;
     ff8:	8872      	ldrh	r2, [r6, #2]
     ffa:	2380      	movs	r3, #128	; 0x80
     ffc:	005b      	lsls	r3, r3, #1
     ffe:	469c      	mov	ip, r3
    1000:	431a      	orrs	r2, r3
    1002:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    1004:	002a      	movs	r2, r5
    1006:	0031      	movs	r1, r6
    1008:	c989      	ldmia	r1!, {r0, r3, r7}
    100a:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    100c:	6862      	ldr	r2, [r4, #4]
    100e:	4663      	mov	r3, ip
    1010:	4313      	orrs	r3, r2
    1012:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1014:	69e3      	ldr	r3, [r4, #28]
    1016:	075b      	lsls	r3, r3, #29
    1018:	d4fc      	bmi.n	1014 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    101a:	0028      	movs	r0, r5
    101c:	f7ff fe08 	bl	c30 <_sercom_i2c_sync_send_address>
	if (ret) {
    1020:	2800      	cmp	r0, #0
    1022:	d100      	bne.n	1026 <_i2c_m_sync_transfer+0x72>
    1024:	e09d      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1026:	886b      	ldrh	r3, [r5, #2]
    1028:	4a7e      	ldr	r2, [pc, #504]	; (1224 <_i2c_m_sync_transfer+0x270>)
    102a:	4013      	ands	r3, r2
    102c:	806b      	strh	r3, [r5, #2]
}
    102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    1030:	2005      	movs	r0, #5
    1032:	4240      	negs	r0, r0
    1034:	e0a6      	b.n	1184 <_i2c_m_sync_transfer+0x1d0>
			if (msg->flags & I2C_M_STOP) {
    1036:	8873      	ldrh	r3, [r6, #2]
    1038:	b21b      	sxth	r3, r3
    103a:	2b00      	cmp	r3, #0
    103c:	db04      	blt.n	1048 <_i2c_m_sync_transfer+0x94>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    103e:	886b      	ldrh	r3, [r5, #2]
    1040:	4a78      	ldr	r2, [pc, #480]	; (1224 <_i2c_m_sync_transfer+0x270>)
    1042:	4013      	ands	r3, r2
    1044:	806b      	strh	r3, [r5, #2]
			return ret;
    1046:	e7f2      	b.n	102e <_i2c_m_sync_transfer+0x7a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1048:	6862      	ldr	r2, [r4, #4]
    104a:	23c0      	movs	r3, #192	; 0xc0
    104c:	029b      	lsls	r3, r3, #10
    104e:	4313      	orrs	r3, r2
    1050:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1052:	69e3      	ldr	r3, [r4, #28]
    1054:	075b      	lsls	r3, r3, #29
    1056:	d4fc      	bmi.n	1052 <_i2c_m_sync_transfer+0x9e>
    1058:	e7f1      	b.n	103e <_i2c_m_sync_transfer+0x8a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    105a:	0753      	lsls	r3, r2, #29
    105c:	d41b      	bmi.n	1096 <_i2c_m_sync_transfer+0xe2>
			if (msg->flags & I2C_M_TEN) {
    105e:	886b      	ldrh	r3, [r5, #2]
    1060:	055b      	lsls	r3, r3, #21
    1062:	d534      	bpl.n	10ce <_i2c_m_sync_transfer+0x11a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1064:	882a      	ldrh	r2, [r5, #0]
    1066:	1212      	asrs	r2, r2, #8
    1068:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    106a:	2306      	movs	r3, #6
    106c:	401a      	ands	r2, r3
    106e:	69e3      	ldr	r3, [r4, #28]
    1070:	075b      	lsls	r3, r3, #29
    1072:	d4fc      	bmi.n	106e <_i2c_m_sync_transfer+0xba>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1074:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1076:	2180      	movs	r1, #128	; 0x80
    1078:	01c9      	lsls	r1, r1, #7
    107a:	400b      	ands	r3, r1
    107c:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    107e:	22f1      	movs	r2, #241	; 0xf1
    1080:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1082:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1084:	69e3      	ldr	r3, [r4, #28]
    1086:	075b      	lsls	r3, r3, #29
    1088:	d4fc      	bmi.n	1084 <_i2c_m_sync_transfer+0xd0>
				msg->flags &= ~I2C_M_TEN;
    108a:	886b      	ldrh	r3, [r5, #2]
    108c:	4a66      	ldr	r2, [pc, #408]	; (1228 <_i2c_m_sync_transfer+0x274>)
    108e:	4013      	ands	r3, r2
    1090:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1092:	2000      	movs	r0, #0
    1094:	e065      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
				if (msg->len > 0) {
    1096:	686b      	ldr	r3, [r5, #4]
    1098:	2b00      	cmp	r3, #0
    109a:	dd04      	ble.n	10a6 <_i2c_m_sync_transfer+0xf2>
					msg->flags |= I2C_M_FAIL;
    109c:	886b      	ldrh	r3, [r5, #2]
    109e:	2280      	movs	r2, #128	; 0x80
    10a0:	0152      	lsls	r2, r2, #5
    10a2:	4313      	orrs	r3, r2
    10a4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    10a6:	886b      	ldrh	r3, [r5, #2]
    10a8:	b21b      	sxth	r3, r3
    10aa:	2b00      	cmp	r3, #0
    10ac:	db06      	blt.n	10bc <_i2c_m_sync_transfer+0x108>
				msg->flags &= ~I2C_M_BUSY;
    10ae:	886b      	ldrh	r3, [r5, #2]
    10b0:	4a5c      	ldr	r2, [pc, #368]	; (1224 <_i2c_m_sync_transfer+0x270>)
    10b2:	4013      	ands	r3, r2
    10b4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    10b6:	2002      	movs	r0, #2
    10b8:	4240      	negs	r0, r0
    10ba:	e052      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10bc:	6862      	ldr	r2, [r4, #4]
    10be:	23c0      	movs	r3, #192	; 0xc0
    10c0:	029b      	lsls	r3, r3, #10
    10c2:	4313      	orrs	r3, r2
    10c4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10c6:	69e3      	ldr	r3, [r4, #28]
    10c8:	075b      	lsls	r3, r3, #29
    10ca:	d4fc      	bmi.n	10c6 <_i2c_m_sync_transfer+0x112>
    10cc:	e7ef      	b.n	10ae <_i2c_m_sync_transfer+0xfa>
			if (msg->len == 0) {
    10ce:	6868      	ldr	r0, [r5, #4]
    10d0:	2800      	cmp	r0, #0
    10d2:	d111      	bne.n	10f8 <_i2c_m_sync_transfer+0x144>
				if (msg->flags & I2C_M_STOP) {
    10d4:	886b      	ldrh	r3, [r5, #2]
    10d6:	b21b      	sxth	r3, r3
    10d8:	2b00      	cmp	r3, #0
    10da:	db04      	blt.n	10e6 <_i2c_m_sync_transfer+0x132>
				msg->flags &= ~I2C_M_BUSY;
    10dc:	886b      	ldrh	r3, [r5, #2]
    10de:	4a51      	ldr	r2, [pc, #324]	; (1224 <_i2c_m_sync_transfer+0x270>)
    10e0:	4013      	ands	r3, r2
    10e2:	806b      	strh	r3, [r5, #2]
    10e4:	e03d      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10e6:	6862      	ldr	r2, [r4, #4]
    10e8:	23c0      	movs	r3, #192	; 0xc0
    10ea:	029b      	lsls	r3, r3, #10
    10ec:	4313      	orrs	r3, r2
    10ee:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10f0:	69e3      	ldr	r3, [r4, #28]
    10f2:	075b      	lsls	r3, r3, #29
    10f4:	d4fc      	bmi.n	10f0 <_i2c_m_sync_transfer+0x13c>
    10f6:	e7f1      	b.n	10dc <_i2c_m_sync_transfer+0x128>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    10f8:	68ab      	ldr	r3, [r5, #8]
    10fa:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    10fc:	2328      	movs	r3, #40	; 0x28
    10fe:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1100:	69e3      	ldr	r3, [r4, #28]
    1102:	075b      	lsls	r3, r3, #29
    1104:	d4fc      	bmi.n	1100 <_i2c_m_sync_transfer+0x14c>
				msg->buffer++;
    1106:	68ab      	ldr	r3, [r5, #8]
    1108:	3301      	adds	r3, #1
    110a:	60ab      	str	r3, [r5, #8]
				msg->len--;
    110c:	686b      	ldr	r3, [r5, #4]
    110e:	3b01      	subs	r3, #1
    1110:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1112:	2000      	movs	r0, #0
    1114:	e025      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
	} else if (flags & SB_FLAG) {
    1116:	07bb      	lsls	r3, r7, #30
    1118:	d578      	bpl.n	120c <_i2c_m_sync_transfer+0x258>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    111a:	686b      	ldr	r3, [r5, #4]
    111c:	2b00      	cmp	r3, #0
    111e:	d06d      	beq.n	11fc <_i2c_m_sync_transfer+0x248>
    1120:	0752      	lsls	r2, r2, #29
    1122:	d46b      	bmi.n	11fc <_i2c_m_sync_transfer+0x248>
			msg->len--;
    1124:	3b01      	subs	r3, #1
    1126:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1128:	2b00      	cmp	r3, #0
    112a:	d101      	bne.n	1130 <_i2c_m_sync_transfer+0x17c>
    112c:	2900      	cmp	r1, #0
    112e:	d04c      	beq.n	11ca <_i2c_m_sync_transfer+0x216>
    1130:	2b01      	cmp	r3, #1
    1132:	d048      	beq.n	11c6 <_i2c_m_sync_transfer+0x212>
			if (msg->len == 0) {
    1134:	686b      	ldr	r3, [r5, #4]
    1136:	2b00      	cmp	r3, #0
    1138:	d107      	bne.n	114a <_i2c_m_sync_transfer+0x196>
				if (msg->flags & I2C_M_STOP) {
    113a:	886b      	ldrh	r3, [r5, #2]
    113c:	b21b      	sxth	r3, r3
    113e:	2b00      	cmp	r3, #0
    1140:	db4c      	blt.n	11dc <_i2c_m_sync_transfer+0x228>
				msg->flags &= ~I2C_M_BUSY;
    1142:	886b      	ldrh	r3, [r5, #2]
    1144:	4a37      	ldr	r2, [pc, #220]	; (1224 <_i2c_m_sync_transfer+0x270>)
    1146:	4013      	ands	r3, r2
    1148:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    114a:	68aa      	ldr	r2, [r5, #8]
    114c:	1c53      	adds	r3, r2, #1
    114e:	60ab      	str	r3, [r5, #8]
    1150:	69e3      	ldr	r3, [r4, #28]
    1152:	075b      	lsls	r3, r3, #29
    1154:	d4fc      	bmi.n	1150 <_i2c_m_sync_transfer+0x19c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1156:	2328      	movs	r3, #40	; 0x28
    1158:	5ce3      	ldrb	r3, [r4, r3]
    115a:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    115c:	2302      	movs	r3, #2
    115e:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1160:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1162:	886b      	ldrh	r3, [r5, #2]
    1164:	05db      	lsls	r3, r3, #23
    1166:	d400      	bmi.n	116a <_i2c_m_sync_transfer+0x1b6>
    1168:	e761      	b.n	102e <_i2c_m_sync_transfer+0x7a>
	void *   hw      = i2c_dev->hw;
    116a:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    116c:	4a2f      	ldr	r2, [pc, #188]	; (122c <_i2c_m_sync_transfer+0x278>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    116e:	7e03      	ldrb	r3, [r0, #24]
    1170:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1172:	001f      	movs	r7, r3
		if (timeout-- == 0) {
    1174:	1e51      	subs	r1, r2, #1
    1176:	2a00      	cmp	r2, #0
    1178:	d100      	bne.n	117c <_i2c_m_sync_transfer+0x1c8>
    117a:	e759      	b.n	1030 <_i2c_m_sync_transfer+0x7c>
    117c:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    117e:	079b      	lsls	r3, r3, #30
    1180:	d0f5      	beq.n	116e <_i2c_m_sync_transfer+0x1ba>
	return I2C_OK;
    1182:	2000      	movs	r0, #0
		if (ret) {
    1184:	2800      	cmp	r0, #0
    1186:	d000      	beq.n	118a <_i2c_m_sync_transfer+0x1d6>
    1188:	e755      	b.n	1036 <_i2c_m_sync_transfer+0x82>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    118a:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    118c:	0edb      	lsrs	r3, r3, #27
    118e:	2101      	movs	r1, #1
    1190:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1192:	69e3      	ldr	r3, [r4, #28]
    1194:	075b      	lsls	r3, r3, #29
    1196:	d4fc      	bmi.n	1192 <_i2c_m_sync_transfer+0x1de>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1198:	8b62      	ldrh	r2, [r4, #26]
    119a:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    119c:	07fb      	lsls	r3, r7, #31
    119e:	d5ba      	bpl.n	1116 <_i2c_m_sync_transfer+0x162>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    11a0:	0793      	lsls	r3, r2, #30
    11a2:	d400      	bmi.n	11a6 <_i2c_m_sync_transfer+0x1f2>
    11a4:	e759      	b.n	105a <_i2c_m_sync_transfer+0xa6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    11a6:	2301      	movs	r3, #1
    11a8:	7623      	strb	r3, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    11aa:	886b      	ldrh	r3, [r5, #2]
    11ac:	2180      	movs	r1, #128	; 0x80
    11ae:	0149      	lsls	r1, r1, #5
    11b0:	430b      	orrs	r3, r1
    11b2:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    11b4:	886b      	ldrh	r3, [r5, #2]
    11b6:	491b      	ldr	r1, [pc, #108]	; (1224 <_i2c_m_sync_transfer+0x270>)
    11b8:	400b      	ands	r3, r1
    11ba:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    11bc:	07d3      	lsls	r3, r2, #31
    11be:	d522      	bpl.n	1206 <_i2c_m_sync_transfer+0x252>
				return I2C_ERR_BUS;
    11c0:	2005      	movs	r0, #5
    11c2:	4240      	negs	r0, r0
    11c4:	e7cd      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    11c6:	2900      	cmp	r1, #0
    11c8:	d0b4      	beq.n	1134 <_i2c_m_sync_transfer+0x180>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    11ca:	6862      	ldr	r2, [r4, #4]
    11cc:	2380      	movs	r3, #128	; 0x80
    11ce:	02db      	lsls	r3, r3, #11
    11d0:	4313      	orrs	r3, r2
    11d2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11d4:	69e3      	ldr	r3, [r4, #28]
    11d6:	075b      	lsls	r3, r3, #29
    11d8:	d4fc      	bmi.n	11d4 <_i2c_m_sync_transfer+0x220>
    11da:	e7ab      	b.n	1134 <_i2c_m_sync_transfer+0x180>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    11dc:	6863      	ldr	r3, [r4, #4]
    11de:	4a11      	ldr	r2, [pc, #68]	; (1224 <_i2c_m_sync_transfer+0x270>)
    11e0:	4013      	ands	r3, r2
    11e2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11e4:	69e3      	ldr	r3, [r4, #28]
    11e6:	075b      	lsls	r3, r3, #29
    11e8:	d4fc      	bmi.n	11e4 <_i2c_m_sync_transfer+0x230>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    11ea:	6862      	ldr	r2, [r4, #4]
    11ec:	23c0      	movs	r3, #192	; 0xc0
    11ee:	029b      	lsls	r3, r3, #10
    11f0:	4313      	orrs	r3, r2
    11f2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11f4:	69e3      	ldr	r3, [r4, #28]
    11f6:	075b      	lsls	r3, r3, #29
    11f8:	d4fc      	bmi.n	11f4 <_i2c_m_sync_transfer+0x240>
    11fa:	e7a2      	b.n	1142 <_i2c_m_sync_transfer+0x18e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11fc:	2302      	movs	r3, #2
    11fe:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1200:	2002      	movs	r0, #2
    1202:	4240      	negs	r0, r0
    1204:	e7ad      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
			return I2C_ERR_BAD_ADDRESS;
    1206:	2004      	movs	r0, #4
    1208:	4240      	negs	r0, r0
    120a:	e7aa      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
	return I2C_OK;
    120c:	2000      	movs	r0, #0
    120e:	e7a8      	b.n	1162 <_i2c_m_sync_transfer+0x1ae>
		return I2C_ERR_BUSY;
    1210:	2006      	movs	r0, #6
    1212:	4240      	negs	r0, r0
    1214:	e70b      	b.n	102e <_i2c_m_sync_transfer+0x7a>
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	000027c6 	.word	0x000027c6
    121c:	000005bf 	.word	0x000005bf
    1220:	000005c1 	.word	0x000005c1
    1224:	fffffeff 	.word	0xfffffeff
    1228:	fffffbff 	.word	0xfffffbff
    122c:	0000ffff 	.word	0x0000ffff

00001230 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1230:	4b04      	ldr	r3, [pc, #16]	; (1244 <_sysctrl_init_sources+0x14>)
    1232:	699a      	ldr	r2, [r3, #24]
    1234:	2102      	movs	r1, #2
    1236:	430a      	orrs	r2, r1
    1238:	619a      	str	r2, [r3, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    123a:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    123c:	311d      	adds	r1, #29
    123e:	400a      	ands	r2, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1240:	771a      	strb	r2, [r3, #28]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1242:	4770      	bx	lr
    1244:	40000800 	.word	0x40000800

00001248 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    1248:	2282      	movs	r2, #130	; 0x82
    124a:	01d2      	lsls	r2, r2, #7
    124c:	4b1c      	ldr	r3, [pc, #112]	; (12c0 <_sysctrl_init_referenced_generators+0x78>)
    124e:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1250:	2202      	movs	r2, #2
    1252:	4b1c      	ldr	r3, [pc, #112]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    1254:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1256:	4b1b      	ldr	r3, [pc, #108]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    1258:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    125a:	06db      	lsls	r3, r3, #27
    125c:	d5fb      	bpl.n	1256 <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    125e:	4a1a      	ldr	r2, [pc, #104]	; (12c8 <_sysctrl_init_referenced_generators+0x80>)
    1260:	4b18      	ldr	r3, [pc, #96]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    1262:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1264:	4b19      	ldr	r3, [pc, #100]	; (12cc <_sysctrl_init_referenced_generators+0x84>)
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	0e9b      	lsrs	r3, r3, #26
    126a:	2b3f      	cmp	r3, #63	; 0x3f
    126c:	d020      	beq.n	12b0 <_sysctrl_init_referenced_generators+0x68>
    126e:	029b      	lsls	r3, r3, #10
    1270:	2280      	movs	r2, #128	; 0x80
    1272:	0092      	lsls	r2, r2, #2
    1274:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1276:	4a13      	ldr	r2, [pc, #76]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    1278:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    127a:	2306      	movs	r3, #6
    127c:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    127e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1280:	075b      	lsls	r3, r3, #29
    1282:	d518      	bpl.n	12b6 <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1284:	4b0f      	ldr	r3, [pc, #60]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    1286:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    1288:	23d0      	movs	r3, #208	; 0xd0
    128a:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    128c:	2bd0      	cmp	r3, #208	; 0xd0
    128e:	d1f9      	bne.n	1284 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    1290:	4a0c      	ldr	r2, [pc, #48]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    1292:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1294:	2180      	movs	r1, #128	; 0x80
    1296:	430b      	orrs	r3, r1
    1298:	b29b      	uxth	r3, r3
    129a:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    129c:	4b08      	ldr	r3, [pc, #32]	; (12c0 <_sysctrl_init_referenced_generators+0x78>)
    129e:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    12a0:	09db      	lsrs	r3, r3, #7
    12a2:	d1fb      	bne.n	129c <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    12a4:	4a07      	ldr	r2, [pc, #28]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    12a6:	6993      	ldr	r3, [r2, #24]
    12a8:	2102      	movs	r1, #2
    12aa:	438b      	bics	r3, r1
    12ac:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    12ae:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    12b0:	23fc      	movs	r3, #252	; 0xfc
    12b2:	01db      	lsls	r3, r3, #7
    12b4:	e7df      	b.n	1276 <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    12b6:	4b03      	ldr	r3, [pc, #12]	; (12c4 <_sysctrl_init_referenced_generators+0x7c>)
    12b8:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    12ba:	06db      	lsls	r3, r3, #27
    12bc:	d5fb      	bpl.n	12b6 <_sysctrl_init_referenced_generators+0x6e>
    12be:	e7e7      	b.n	1290 <_sysctrl_init_referenced_generators+0x48>
    12c0:	40000c00 	.word	0x40000c00
    12c4:	40000800 	.word	0x40000800
    12c8:	040105b9 	.word	0x040105b9
    12cc:	00806024 	.word	0x00806024

000012d0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    12d0:	4b02      	ldr	r3, [pc, #8]	; (12dc <_system_time_init+0xc>)
    12d2:	4a03      	ldr	r2, [pc, #12]	; (12e0 <_system_time_init+0x10>)
    12d4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    12d6:	2205      	movs	r2, #5
    12d8:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    12da:	4770      	bx	lr
    12dc:	e000e010 	.word	0xe000e010
    12e0:	00ffffff 	.word	0x00ffffff

000012e4 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    12e4:	b510      	push	{r4, lr}
	_system_time_init(hw);
    12e6:	f7ff fff3 	bl	12d0 <_system_time_init>
}
    12ea:	bd10      	pop	{r4, pc}

000012ec <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    12ec:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    12ee:	e00b      	b.n	1308 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    12f0:	4b0b      	ldr	r3, [pc, #44]	; (1320 <_delay_cycles+0x34>)
    12f2:	480c      	ldr	r0, [pc, #48]	; (1324 <_delay_cycles+0x38>)
    12f4:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    12f6:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    12f8:	4b09      	ldr	r3, [pc, #36]	; (1320 <_delay_cycles+0x34>)
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	03db      	lsls	r3, r3, #15
    12fe:	d5fb      	bpl.n	12f8 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    1300:	4b09      	ldr	r3, [pc, #36]	; (1328 <_delay_cycles+0x3c>)
    1302:	469c      	mov	ip, r3
    1304:	4461      	add	r1, ip
	while (n--) {
    1306:	0010      	movs	r0, r2
    1308:	1e42      	subs	r2, r0, #1
    130a:	b2d2      	uxtb	r2, r2
    130c:	2800      	cmp	r0, #0
    130e:	d1ef      	bne.n	12f0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1310:	4b03      	ldr	r3, [pc, #12]	; (1320 <_delay_cycles+0x34>)
    1312:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1314:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1316:	4b02      	ldr	r3, [pc, #8]	; (1320 <_delay_cycles+0x34>)
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	03db      	lsls	r3, r3, #15
    131c:	d5fb      	bpl.n	1316 <_delay_cycles+0x2a>
		;
}
    131e:	4770      	bx	lr
    1320:	e000e010 	.word	0xe000e010
    1324:	00ffffff 	.word	0x00ffffff
    1328:	ff000001 	.word	0xff000001

0000132c <main>:
int btn_press_status;

mcp23008_irq_callback_t mcp23008_irq_cb = mcp23008_basic_irq_handler;		/**< define a callback function for external interrupt */

int main(void)
{
    132c:	b570      	push	{r4, r5, r6, lr}
    132e:	b084      	sub	sp, #16
    1330:	4c72      	ldr	r4, [pc, #456]	; (14fc <main+0x1d0>)
    1332:	447c      	add	r4, pc
	/* Initializes MCU, drivers and middle-ware */
	atmel_start_init();
    1334:	f7fe feee 	bl	114 <atmel_start_init>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1338:	2208      	movs	r2, #8
    133a:	23c0      	movs	r3, #192	; 0xc0
    133c:	05db      	lsls	r3, r3, #23
    133e:	619a      	str	r2, [r3, #24]
	
	 gpio_set_pin_level(mcp23008_reset_pin, true);  /**< make the reset pin on the slave device is constantly high during communication */
	
	 mcp23008_basic_initialize(MCP23008_I2C_ADDRESS_PIN_A110);				/**< initialize chip and set i2c pin level (A2, A1, A0) */
    1340:	2006      	movs	r0, #6
    1342:	f000 fd87 	bl	1e54 <mcp23008_basic_initialize>
	 mcp23008_info(&mcp23008_handle);
    1346:	4d6e      	ldr	r5, [pc, #440]	; (1500 <main+0x1d4>)
    1348:	447d      	add	r5, pc
    134a:	0028      	movs	r0, r5
    134c:	f000 fd4c 	bl	1de8 <mcp23008_info>

	 mcp23008_interface_debug_print("Chip name :\t%s\n\r", mcp23008_handle.info.chip_name);
    1350:	0029      	movs	r1, r5
    1352:	311c      	adds	r1, #28
    1354:	486b      	ldr	r0, [pc, #428]	; (1504 <main+0x1d8>)
    1356:	4478      	add	r0, pc
    1358:	f000 ff78 	bl	224c <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Manufacturer: \t%s\n\r",  mcp23008_handle.info.manufacturer_name);
    135c:	0029      	movs	r1, r5
    135e:	3126      	adds	r1, #38	; 0x26
    1360:	4869      	ldr	r0, [pc, #420]	; (1508 <main+0x1dc>)
    1362:	4478      	add	r0, pc
    1364:	f000 ff72 	bl	224c <mcp23008_interface_debug_print>

	 mcp23008_interface_debug_print("Interface: \t%s\n\r",  mcp23008_handle.info.interface);
    1368:	0029      	movs	r1, r5
    136a:	313f      	adds	r1, #63	; 0x3f
    136c:	4867      	ldr	r0, [pc, #412]	; (150c <main+0x1e0>)
    136e:	4478      	add	r0, pc
    1370:	f000 ff6c 	bl	224c <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Supply voltage max : \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_max_v);
    1374:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1376:	f001 fbb9 	bl	2aec <__aeabi_f2d>
    137a:	0002      	movs	r2, r0
    137c:	000b      	movs	r3, r1
    137e:	4864      	ldr	r0, [pc, #400]	; (1510 <main+0x1e4>)
    1380:	4478      	add	r0, pc
    1382:	f000 ff63 	bl	224c <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Supply voltage min: \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_min_v);
    1386:	6c68      	ldr	r0, [r5, #68]	; 0x44
    1388:	f001 fbb0 	bl	2aec <__aeabi_f2d>
    138c:	0002      	movs	r2, r0
    138e:	000b      	movs	r3, r1
    1390:	4860      	ldr	r0, [pc, #384]	; (1514 <main+0x1e8>)
    1392:	4478      	add	r0, pc
    1394:	f000 ff5a 	bl	224c <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Maximum current: \t%0.1fmA\n\r",  mcp23008_handle.info.max_current_ma);
    1398:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    139a:	f001 fba7 	bl	2aec <__aeabi_f2d>
    139e:	0002      	movs	r2, r0
    13a0:	000b      	movs	r3, r1
    13a2:	485d      	ldr	r0, [pc, #372]	; (1518 <main+0x1ec>)
    13a4:	4478      	add	r0, pc
    13a6:	f000 ff51 	bl	224c <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Temperature Max: \t%.1fC\n\r",  mcp23008_handle.info.temperature_max);
    13aa:	6d68      	ldr	r0, [r5, #84]	; 0x54
    13ac:	f001 fb9e 	bl	2aec <__aeabi_f2d>
    13b0:	0002      	movs	r2, r0
    13b2:	000b      	movs	r3, r1
    13b4:	4859      	ldr	r0, [pc, #356]	; (151c <main+0x1f0>)
    13b6:	4478      	add	r0, pc
    13b8:	f000 ff48 	bl	224c <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Temperature Min: \t%.1fC\n\r",  mcp23008_handle.info.temperature_min);
    13bc:	6d28      	ldr	r0, [r5, #80]	; 0x50
    13be:	f001 fb95 	bl	2aec <__aeabi_f2d>
    13c2:	0002      	movs	r2, r0
    13c4:	000b      	movs	r3, r1
    13c6:	4856      	ldr	r0, [pc, #344]	; (1520 <main+0x1f4>)
    13c8:	4478      	add	r0, pc
    13ca:	f000 ff3f 	bl	224c <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Driver version: \tV%.1f.%.2d\n\r", ( mcp23008_handle.info.driver_version / 1000), (uint8_t)( mcp23008_handle.info.driver_version - (uint8_t)( mcp23008_handle.info.driver_version / 100)*100));
    13ce:	6dad      	ldr	r5, [r5, #88]	; 0x58
    13d0:	4954      	ldr	r1, [pc, #336]	; (1524 <main+0x1f8>)
    13d2:	1c28      	adds	r0, r5, #0
    13d4:	f001 f85e 	bl	2494 <__aeabi_fmul>
    13d8:	1c06      	adds	r6, r0, #0
    13da:	4953      	ldr	r1, [pc, #332]	; (1528 <main+0x1fc>)
    13dc:	1c28      	adds	r0, r5, #0
    13de:	f001 f859 	bl	2494 <__aeabi_fmul>
    13e2:	f001 f83f 	bl	2464 <__aeabi_f2uiz>
    13e6:	b2c3      	uxtb	r3, r0
    13e8:	2064      	movs	r0, #100	; 0x64
    13ea:	4358      	muls	r0, r3
    13ec:	f001 fb2e 	bl	2a4c <__aeabi_i2f>
    13f0:	1c01      	adds	r1, r0, #0
    13f2:	1c28      	adds	r0, r5, #0
    13f4:	f001 f96e 	bl	26d4 <__aeabi_fsub>
    13f8:	f001 f834 	bl	2464 <__aeabi_f2uiz>
    13fc:	b2c5      	uxtb	r5, r0
    13fe:	1c30      	adds	r0, r6, #0
    1400:	f001 fb74 	bl	2aec <__aeabi_f2d>
    1404:	0002      	movs	r2, r0
    1406:	000b      	movs	r3, r1
    1408:	9500      	str	r5, [sp, #0]
    140a:	4848      	ldr	r0, [pc, #288]	; (152c <main+0x200>)
    140c:	4478      	add	r0, pc
    140e:	f000 ff1d 	bl	224c <mcp23008_interface_debug_print>
    1412:	e013      	b.n	143c <main+0x110>
		{
			
			case SET_GPIO_DIR:
			{
				/**< set GPIO0 and 5, 6 and 7 as output */
				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_7, MCP23008_OUTPUT);
    1414:	2100      	movs	r1, #0
    1416:	2007      	movs	r0, #7
    1418:	f000 fe7e 	bl	2118 <mcp23008_basic_gpio_set_direction>
				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_6, MCP23008_OUTPUT);
    141c:	2100      	movs	r1, #0
    141e:	2006      	movs	r0, #6
    1420:	f000 fe7a 	bl	2118 <mcp23008_basic_gpio_set_direction>
				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_5, MCP23008_OUTPUT);
    1424:	2100      	movs	r1, #0
    1426:	2005      	movs	r0, #5
    1428:	f000 fe76 	bl	2118 <mcp23008_basic_gpio_set_direction>
				
				/**< set GPIO0 and 0 and 1 as input */
				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_0, MCP23008_INPUT);
    142c:	2101      	movs	r1, #1
    142e:	2000      	movs	r0, #0
    1430:	f000 fe72 	bl	2118 <mcp23008_basic_gpio_set_direction>
				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_1, MCP23008_INPUT_PULLUP);
    1434:	2110      	movs	r1, #16
    1436:	2001      	movs	r0, #1
    1438:	f000 fe6e 	bl	2118 <mcp23008_basic_gpio_set_direction>
		switch((int)test.state)
    143c:	4b3c      	ldr	r3, [pc, #240]	; (1530 <main+0x204>)
    143e:	58e3      	ldr	r3, [r4, r3]
    1440:	9303      	str	r3, [sp, #12]
    1442:	7818      	ldrb	r0, [r3, #0]
    1444:	2805      	cmp	r0, #5
    1446:	d8f9      	bhi.n	143c <main+0x110>
    1448:	f000 ff62 	bl	2310 <__gnu_thumb1_case_sqi>
    144c:	2c0c03e4 	.word	0x2c0c03e4
    1450:	4934      	.short	0x4934
			}

			case GPIO_WRITE:
			{
				/**< Write gpio logic level */
				mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_7, MCP23008_GPIO_HIGH);
    1452:	2101      	movs	r1, #1
    1454:	2007      	movs	r0, #7
    1456:	f000 fe55 	bl	2104 <mcp23008_basic_gpio_write>
				mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_6, MCP23008_GPIO_LOW);
    145a:	2100      	movs	r1, #0
    145c:	2006      	movs	r0, #6
    145e:	f000 fe51 	bl	2104 <mcp23008_basic_gpio_write>
				
				break;
    1462:	e7eb      	b.n	143c <main+0x110>
			}
			
			case GPIO_READ:
			{
				/**< read gpio pin !!CONCIDER DEBOUNCING */      
				if(mcp23008_basic_gpio_read(MCP23008_GPIO_PIN_1))
    1464:	2001      	movs	r0, #1
    1466:	f000 fe97 	bl	2198 <mcp23008_basic_gpio_read>
    146a:	2800      	cmp	r0, #0
    146c:	d010      	beq.n	1490 <main+0x164>
				{
					mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_5, MCP23008_GPIO_HIGH);	
    146e:	2101      	movs	r1, #1
    1470:	2005      	movs	r0, #5
    1472:	f000 fe47 	bl	2104 <mcp23008_basic_gpio_write>
				}else{
				  	mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_5, MCP23008_GPIO_LOW);	
				}	
				
				btn_press_status = mcp23008_basic_gpio_read(MCP23008_GPIO_PIN_0);
    1476:	2000      	movs	r0, #0
    1478:	f000 fe8e 	bl	2198 <mcp23008_basic_gpio_read>
    147c:	4b2d      	ldr	r3, [pc, #180]	; (1534 <main+0x208>)
    147e:	58e3      	ldr	r3, [r4, r3]
    1480:	6018      	str	r0, [r3, #0]
				if(btn_press_status == MCP23008_GPIO_LOW){
    1482:	2800      	cmp	r0, #0
    1484:	d109      	bne.n	149a <main+0x16e>
					mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_6, MCP23008_GPIO_HIGH);
    1486:	2101      	movs	r1, #1
    1488:	3006      	adds	r0, #6
    148a:	f000 fe3b 	bl	2104 <mcp23008_basic_gpio_write>
    148e:	e7d5      	b.n	143c <main+0x110>
				  	mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_5, MCP23008_GPIO_LOW);	
    1490:	2100      	movs	r1, #0
    1492:	2005      	movs	r0, #5
    1494:	f000 fe36 	bl	2104 <mcp23008_basic_gpio_write>
    1498:	e7ed      	b.n	1476 <main+0x14a>
				}else{
					mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_6, MCP23008_GPIO_LOW);
    149a:	2100      	movs	r1, #0
    149c:	2006      	movs	r0, #6
    149e:	f000 fe31 	bl	2104 <mcp23008_basic_gpio_write>
    14a2:	e7cb      	b.n	143c <main+0x110>
			}
						
			case GPIO_TOGGLE:
			{
				/**< gpio toggle pin */
				mcp23008_basic_gpio_toggle(MCP23008_GPIO_PIN_5);
    14a4:	2005      	movs	r0, #5
    14a6:	f000 fe89 	bl	21bc <mcp23008_basic_gpio_toggle>
				mcp23008_interface_delay_ms(500);						
    14aa:	20fa      	movs	r0, #250	; 0xfa
    14ac:	0040      	lsls	r0, r0, #1
    14ae:	f000 fec9 	bl	2244 <mcp23008_interface_delay_ms>
				break;
    14b2:	e7c3      	b.n	143c <main+0x110>
			}
									
			case GPIO_EXT_INT:
			{
				/**< enable interrupt on GPIO 0 as falling edge, disable interrupt on gpio 1*/
				mcp23008_basic_interrupt_enable(MCP23008_GPIO_PIN_0, MCP23008_interrupt_FALLING_EDGE);
    14b4:	2101      	movs	r1, #1
    14b6:	2000      	movs	r0, #0
    14b8:	f000 fe8c 	bl	21d4 <mcp23008_basic_interrupt_enable>
				mcp23008_basic_interrupt_disable(MCP23008_GPIO_PIN_1);	
    14bc:	2001      	movs	r0, #1
    14be:	f000 fea1 	bl	2204 <mcp23008_basic_interrupt_disable>
				
				/**< read interrupt flag status*/
				mcp23008_basic_get_interrupt_flag(MCP23008_GPIO_PIN_0, &int_flag);
    14c2:	4b1d      	ldr	r3, [pc, #116]	; (1538 <main+0x20c>)
    14c4:	58e3      	ldr	r3, [r4, r3]
    14c6:	9303      	str	r3, [sp, #12]
    14c8:	0019      	movs	r1, r3
    14ca:	2000      	movs	r0, #0
    14cc:	f000 feac 	bl	2228 <mcp23008_basic_get_interrupt_flag>
				if(int_flag){
    14d0:	9b03      	ldr	r3, [sp, #12]
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d0b1      	beq.n	143c <main+0x110>
					mcp23008_basic_clr_interrupt_flag();
    14d8:	f000 fe9e 	bl	2218 <mcp23008_basic_clr_interrupt_flag>
    14dc:	e7ae      	b.n	143c <main+0x110>
				break;
			}
												
			case PORT_WRITE:
			{
				mcp23008_basic_pin_write_all(MCP23008_GPIO_HIGH);
    14de:	2001      	movs	r0, #1
    14e0:	f000 fe50 	bl	2184 <mcp23008_basic_pin_write_all>
				mcp23008_interface_delay_ms(500);
    14e4:	25fa      	movs	r5, #250	; 0xfa
    14e6:	006d      	lsls	r5, r5, #1
    14e8:	0028      	movs	r0, r5
    14ea:	f000 feab 	bl	2244 <mcp23008_interface_delay_ms>
				mcp23008_basic_pin_write_all(MCP23008_GPIO_LOW);
    14ee:	2000      	movs	r0, #0
    14f0:	f000 fe48 	bl	2184 <mcp23008_basic_pin_write_all>
				mcp23008_interface_delay_ms(500);												
    14f4:	0028      	movs	r0, r5
    14f6:	f000 fea5 	bl	2244 <mcp23008_interface_delay_ms>
				break;
    14fa:	e79f      	b.n	143c <main+0x110>
    14fc:	00002af2 	.word	0x00002af2
    1500:	1fffed48 	.word	0x1fffed48
    1504:	0000244a 	.word	0x0000244a
    1508:	00002452 	.word	0x00002452
    150c:	0000245a 	.word	0x0000245a
    1510:	0000245c 	.word	0x0000245c
    1514:	0000246a 	.word	0x0000246a
    1518:	00002478 	.word	0x00002478
    151c:	00002482 	.word	0x00002482
    1520:	0000248c 	.word	0x0000248c
    1524:	3a83126f 	.word	0x3a83126f
    1528:	3c23d70a 	.word	0x3c23d70a
    152c:	00002464 	.word	0x00002464
    1530:	00000028 	.word	0x00000028
    1534:	00000018 	.word	0x00000018
    1538:	0000001c 	.word	0x0000001c

0000153c <print>:
		
	}
}

void print(char *const pBuffer, size_t u8Length)
{
    153c:	b530      	push	{r4, r5, lr}
    153e:	b085      	sub	sp, #20
    1540:	0005      	movs	r5, r0
    1542:	000c      	movs	r4, r1
    1544:	4b09      	ldr	r3, [pc, #36]	; (156c <print+0x30>)
    1546:	447b      	add	r3, pc
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&USART_0, &io);
    1548:	4a09      	ldr	r2, [pc, #36]	; (1570 <print+0x34>)
    154a:	589b      	ldr	r3, [r3, r2]
    154c:	9301      	str	r3, [sp, #4]
    154e:	a903      	add	r1, sp, #12
    1550:	0018      	movs	r0, r3
    1552:	f7ff f8f5 	bl	740 <usart_sync_get_io_descriptor>
	usart_sync_enable(&USART_0);
    1556:	9801      	ldr	r0, [sp, #4]
    1558:	f7ff f8e0 	bl	71c <usart_sync_enable>

	io_write(io, (char *)pBuffer, u8Length);
    155c:	b2a2      	uxth	r2, r4
    155e:	0029      	movs	r1, r5
    1560:	9803      	ldr	r0, [sp, #12]
    1562:	f7ff f81b 	bl	59c <io_write>
	
}
    1566:	b005      	add	sp, #20
    1568:	bd30      	pop	{r4, r5, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	000028de 	.word	0x000028de
    1570:	00000030 	.word	0x00000030

00001574 <i2c_read>:

uint8_t i2c_read(uint8_t addr, uint8_t *buf, uint16_t len)
{
    1574:	b570      	push	{r4, r5, r6, lr}
    1576:	b084      	sub	sp, #16
    1578:	0004      	movs	r4, r0
    157a:	000d      	movs	r5, r1
    157c:	0016      	movs	r6, r2
    157e:	4b0d      	ldr	r3, [pc, #52]	; (15b4 <i2c_read+0x40>)
    1580:	447b      	add	r3, pc
	struct io_descriptor *I2C_0_io;

	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    1582:	4a0d      	ldr	r2, [pc, #52]	; (15b8 <i2c_read+0x44>)
    1584:	589b      	ldr	r3, [r3, r2]
    1586:	9301      	str	r3, [sp, #4]
    1588:	a903      	add	r1, sp, #12
    158a:	0018      	movs	r0, r3
    158c:	f7ff f801 	bl	592 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&I2C_0);
    1590:	9801      	ldr	r0, [sp, #4]
    1592:	f7fe fff1 	bl	578 <i2c_m_sync_enable>
	i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    1596:	b221      	sxth	r1, r4
    1598:	2280      	movs	r2, #128	; 0x80
    159a:	0112      	lsls	r2, r2, #4
    159c:	9801      	ldr	r0, [sp, #4]
    159e:	f7fe ffef 	bl	580 <i2c_m_sync_set_slaveaddr>
	io_read(I2C_0_io, buf,  len);
    15a2:	0032      	movs	r2, r6
    15a4:	0029      	movs	r1, r5
    15a6:	9803      	ldr	r0, [sp, #12]
    15a8:	f7ff f812 	bl	5d0 <io_read>
	return 0;
}
    15ac:	2000      	movs	r0, #0
    15ae:	b004      	add	sp, #16
    15b0:	bd70      	pop	{r4, r5, r6, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	000028a4 	.word	0x000028a4
    15b8:	00000048 	.word	0x00000048

000015bc <i2c_write>:

uint8_t i2c_write(uint8_t addr, uint8_t *buf, uint16_t len)
{
    15bc:	b570      	push	{r4, r5, r6, lr}
    15be:	b084      	sub	sp, #16
    15c0:	0004      	movs	r4, r0
    15c2:	000d      	movs	r5, r1
    15c4:	0016      	movs	r6, r2
    15c6:	4b0d      	ldr	r3, [pc, #52]	; (15fc <i2c_write+0x40>)
    15c8:	447b      	add	r3, pc
	struct io_descriptor *I2C_0_io;
	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    15ca:	4a0d      	ldr	r2, [pc, #52]	; (1600 <i2c_write+0x44>)
    15cc:	589b      	ldr	r3, [r3, r2]
    15ce:	9301      	str	r3, [sp, #4]
    15d0:	a903      	add	r1, sp, #12
    15d2:	0018      	movs	r0, r3
    15d4:	f7fe ffdd 	bl	592 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&I2C_0);
    15d8:	9801      	ldr	r0, [sp, #4]
    15da:	f7fe ffcd 	bl	578 <i2c_m_sync_enable>
	i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    15de:	b221      	sxth	r1, r4
    15e0:	2280      	movs	r2, #128	; 0x80
    15e2:	0112      	lsls	r2, r2, #4
    15e4:	9801      	ldr	r0, [sp, #4]
    15e6:	f7fe ffcb 	bl	580 <i2c_m_sync_set_slaveaddr>
	io_write(I2C_0_io, (uint8_t *)buf, len);
    15ea:	0032      	movs	r2, r6
    15ec:	0029      	movs	r1, r5
    15ee:	9803      	ldr	r0, [sp, #12]
    15f0:	f7fe ffd4 	bl	59c <io_write>
	return 0;
}
    15f4:	2000      	movs	r0, #0
    15f6:	b004      	add	sp, #16
    15f8:	bd70      	pop	{r4, r5, r6, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	0000285c 	.word	0x0000285c
    1600:	00000048 	.word	0x00000048

00001604 <gpio_toggle_pin_green>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1604:	2280      	movs	r2, #128	; 0x80
    1606:	0352      	lsls	r2, r2, #13
    1608:	23c0      	movs	r3, #192	; 0xc0
    160a:	05db      	lsls	r3, r3, #23
    160c:	61da      	str	r2, [r3, #28]

void gpio_toggle_pin_green(void)
{
	gpio_toggle_pin_level(user_led_green);
}
    160e:	4770      	bx	lr

00001610 <gpio_toggle_pin_blue>:
    1610:	2280      	movs	r2, #128	; 0x80
    1612:	0492      	lsls	r2, r2, #18
    1614:	23c0      	movs	r3, #192	; 0xc0
    1616:	05db      	lsls	r3, r3, #23
    1618:	61da      	str	r2, [r3, #28]

void gpio_toggle_pin_blue(void)
{
	gpio_toggle_pin_level(user_led_blue);
    161a:	4770      	bx	lr

0000161c <a_mcp23008_i2c_write>:
 *          - 0 success
 *          - 1 failed to write
 * @note none
 */

uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
    161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    161e:	af00      	add	r7, sp, #0
    1620:	000d      	movs	r5, r1

    uint8_t temp_buffer[u8Length + 1];
    1622:	1c5e      	adds	r6, r3, #1
    1624:	001c      	movs	r4, r3
    1626:	3408      	adds	r4, #8
    1628:	08e4      	lsrs	r4, r4, #3
    162a:	00e4      	lsls	r4, r4, #3
    162c:	4669      	mov	r1, sp
    162e:	1b09      	subs	r1, r1, r4
    1630:	468d      	mov	sp, r1
	temp_buffer[0] = u8Reg;
    1632:	700d      	strb	r5, [r1, #0]
	for(int index = 1; index < u8Length + 1; index++){
    1634:	2401      	movs	r4, #1
    1636:	e004      	b.n	1642 <a_mcp23008_i2c_write+0x26>
		temp_buffer[index] = pBuf[index - 1];
    1638:	1915      	adds	r5, r2, r4
    163a:	3d01      	subs	r5, #1
    163c:	782d      	ldrb	r5, [r5, #0]
    163e:	550d      	strb	r5, [r1, r4]
	for(int index = 1; index < u8Length + 1; index++){
    1640:	3401      	adds	r4, #1
    1642:	42b4      	cmp	r4, r6
    1644:	dbf8      	blt.n	1638 <a_mcp23008_i2c_write+0x1c>
	}

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)temp_buffer, (u8Length + 1)) != 0) /**< write data */ {
    1646:	6884      	ldr	r4, [r0, #8]
    1648:	1c5a      	adds	r2, r3, #1
    164a:	235c      	movs	r3, #92	; 0x5c
    164c:	5cc0      	ldrb	r0, [r0, r3]
    164e:	47a0      	blx	r4
    1650:	2800      	cmp	r0, #0
    1652:	d101      	bne.n	1658 <a_mcp23008_i2c_write+0x3c>
            return 1; /**< write fail */
        }
    return 0; /**< success */
}
    1654:	46bd      	mov	sp, r7
    1656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 1; /**< write fail */
    1658:	2001      	movs	r0, #1
    165a:	e7fb      	b.n	1654 <a_mcp23008_i2c_write+0x38>

0000165c <a_mcp23008_i2c_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed to read
 * @note none
 */
uint8_t a_mcp23008_i2c_read(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
    165c:	b570      	push	{r4, r5, r6, lr}
    165e:	b082      	sub	sp, #8
    1660:	0004      	movs	r4, r0
    1662:	0016      	movs	r6, r2
    1664:	001d      	movs	r5, r3
    1666:	466b      	mov	r3, sp
    1668:	71d9      	strb	r1, [r3, #7]
    166a:	3307      	adds	r3, #7

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)&u8Reg, 1) != 0) /**< write reg */ {
    166c:	225c      	movs	r2, #92	; 0x5c
    166e:	5c80      	ldrb	r0, [r0, r2]
    1670:	3a5b      	subs	r2, #91	; 0x5b
    1672:	0019      	movs	r1, r3
    1674:	68a3      	ldr	r3, [r4, #8]
    1676:	4798      	blx	r3
    1678:	2800      	cmp	r0, #0
    167a:	d002      	beq.n	1682 <a_mcp23008_i2c_read+0x26>
            return 1; /**< write fail */
    167c:	2001      	movs	r0, #1

    if (pHandle->i2c_read(pHandle->i2c_address, pBuf, u8Length) != 0) /**< read data */ {
            return 1; /**< read fail */
        }
    return 0;
}
    167e:	b002      	add	sp, #8
    1680:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->i2c_read(pHandle->i2c_address, pBuf, u8Length) != 0) /**< read data */ {
    1682:	68e3      	ldr	r3, [r4, #12]
    1684:	b2aa      	uxth	r2, r5
    1686:	215c      	movs	r1, #92	; 0x5c
    1688:	5c60      	ldrb	r0, [r4, r1]
    168a:	0031      	movs	r1, r6
    168c:	4798      	blx	r3
    168e:	2800      	cmp	r0, #0
    1690:	d0f5      	beq.n	167e <a_mcp23008_i2c_read+0x22>
            return 1; /**< read fail */
    1692:	2001      	movs	r0, #1
    1694:	e7f3      	b.n	167e <a_mcp23008_i2c_read+0x22>
	...

00001698 <a_mcp23008_print_error_msg>:
* @param[in] *pBuffer point to the string to be printed
* @return none
* @note   none
*/
void a_mcp23008_print_error_msg(mcp23008_handle_t *const pHandle, char *const pBuffer)
{
    1698:	b510      	push	{r4, lr}
#ifdef MCP23008_DEBUG_MODE
    pHandle->debug_print("MCP23008: failed to %s.\r\n", pBuffer);
    169a:	6943      	ldr	r3, [r0, #20]
    169c:	4801      	ldr	r0, [pc, #4]	; (16a4 <a_mcp23008_print_error_msg+0xc>)
    169e:	4478      	add	r0, pc
    16a0:	4798      	blx	r3
#endif // mcp23008_DEBUG_MODE
}
    16a2:	bd10      	pop	{r4, pc}
    16a4:	000021fa 	.word	0x000021fa

000016a8 <mcp23008_init>:
 *            - 1 i2c or spi initialization failed
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t mcp23008_init(mcp23008_handle_t *const pHandle) {
    16a8:	b510      	push	{r4, lr}
    16aa:	1e04      	subs	r4, r0, #0

    if (pHandle == NULL)
    16ac:	d042      	beq.n	1734 <mcp23008_init+0x8c>
        return 2;
    if (pHandle->debug_print == NULL)
    16ae:	6943      	ldr	r3, [r0, #20]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d041      	beq.n	1738 <mcp23008_init+0x90>
        return 3;

    if (pHandle->receive_callback == NULL) {
    16b4:	6982      	ldr	r2, [r0, #24]
    16b6:	2a00      	cmp	r2, #0
    16b8:	d015      	beq.n	16e6 <mcp23008_init+0x3e>
        pHandle->debug_print("mcp23008: receive_callback\n");
        return 3;
    }
    if (pHandle->delay_ms == NULL) {
    16ba:	6902      	ldr	r2, [r0, #16]
    16bc:	2a00      	cmp	r2, #0
    16be:	d017      	beq.n	16f0 <mcp23008_init+0x48>
        pHandle->debug_print("mcp23008: delay_ms\n");
    }

    if (pHandle->i2c_init == NULL) {
    16c0:	6823      	ldr	r3, [r4, #0]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d018      	beq.n	16f8 <mcp23008_init+0x50>
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
        return 3;
    }

    if (pHandle->i2c_deinit == NULL) {
    16c6:	6862      	ldr	r2, [r4, #4]
    16c8:	2a00      	cmp	r2, #0
    16ca:	d01b      	beq.n	1704 <mcp23008_init+0x5c>
        pHandle->debug_print("mcp23008: i2c_deint is null\n");
        return 3;
    }

    if (pHandle->i2c_read == NULL) {
    16cc:	68e2      	ldr	r2, [r4, #12]
    16ce:	2a00      	cmp	r2, #0
    16d0:	d01e      	beq.n	1710 <mcp23008_init+0x68>
        pHandle->debug_print("mcp23008: i2c_read is null\n");
        return 3;
    }
    if (pHandle->i2c_write == NULL) {
    16d2:	68a2      	ldr	r2, [r4, #8]
    16d4:	2a00      	cmp	r2, #0
    16d6:	d021      	beq.n	171c <mcp23008_init+0x74>
        pHandle->debug_print("mcp23008: i2c_write is null\n");
        return 3;
    }
    if (pHandle->i2c_init()) {
    16d8:	4798      	blx	r3
    16da:	2800      	cmp	r0, #0
    16dc:	d124      	bne.n	1728 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: i2c initialize failed\n");
        return 1;
    }

    pHandle->inited = 1; /* flag complete initialization */
    16de:	2201      	movs	r2, #1
    16e0:	235d      	movs	r3, #93	; 0x5d
    16e2:	54e2      	strb	r2, [r4, r3]

    return 0;
    16e4:	e027      	b.n	1736 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: receive_callback\n");
    16e6:	4815      	ldr	r0, [pc, #84]	; (173c <mcp23008_init+0x94>)
    16e8:	4478      	add	r0, pc
    16ea:	4798      	blx	r3
        return 3;
    16ec:	2003      	movs	r0, #3
    16ee:	e022      	b.n	1736 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: delay_ms\n");
    16f0:	4813      	ldr	r0, [pc, #76]	; (1740 <mcp23008_init+0x98>)
    16f2:	4478      	add	r0, pc
    16f4:	4798      	blx	r3
    16f6:	e7e3      	b.n	16c0 <mcp23008_init+0x18>
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
    16f8:	6963      	ldr	r3, [r4, #20]
    16fa:	4812      	ldr	r0, [pc, #72]	; (1744 <mcp23008_init+0x9c>)
    16fc:	4478      	add	r0, pc
    16fe:	4798      	blx	r3
        return 3;
    1700:	2003      	movs	r0, #3
    1702:	e018      	b.n	1736 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c_deint is null\n");
    1704:	6963      	ldr	r3, [r4, #20]
    1706:	4810      	ldr	r0, [pc, #64]	; (1748 <mcp23008_init+0xa0>)
    1708:	4478      	add	r0, pc
    170a:	4798      	blx	r3
        return 3;
    170c:	2003      	movs	r0, #3
    170e:	e012      	b.n	1736 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c_read is null\n");
    1710:	6963      	ldr	r3, [r4, #20]
    1712:	480e      	ldr	r0, [pc, #56]	; (174c <mcp23008_init+0xa4>)
    1714:	4478      	add	r0, pc
    1716:	4798      	blx	r3
        return 3;
    1718:	2003      	movs	r0, #3
    171a:	e00c      	b.n	1736 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c_write is null\n");
    171c:	6963      	ldr	r3, [r4, #20]
    171e:	480c      	ldr	r0, [pc, #48]	; (1750 <mcp23008_init+0xa8>)
    1720:	4478      	add	r0, pc
    1722:	4798      	blx	r3
        return 3;
    1724:	2003      	movs	r0, #3
    1726:	e006      	b.n	1736 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c initialize failed\n");
    1728:	6963      	ldr	r3, [r4, #20]
    172a:	480a      	ldr	r0, [pc, #40]	; (1754 <mcp23008_init+0xac>)
    172c:	4478      	add	r0, pc
    172e:	4798      	blx	r3
        return 1;
    1730:	2001      	movs	r0, #1
    1732:	e000      	b.n	1736 <mcp23008_init+0x8e>
        return 2;
    1734:	2002      	movs	r0, #2
}
    1736:	bd10      	pop	{r4, pc}
        return 3;
    1738:	2003      	movs	r0, #3
    173a:	e7fc      	b.n	1736 <mcp23008_init+0x8e>
    173c:	000021cc 	.word	0x000021cc
    1740:	000021de 	.word	0x000021de
    1744:	000021e8 	.word	0x000021e8
    1748:	00002200 	.word	0x00002200
    174c:	00002214 	.word	0x00002214
    1750:	00002224 	.word	0x00002224
    1754:	00002238 	.word	0x00002238

00001758 <mcp23008_set_addr_pin>:
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp23008_set_addr_pin(mcp23008_handle_t *const pHandle, mcp23008_address_pin_t address_pin)
{
    if (pHandle == NULL) /**< check handle */
    1758:	2800      	cmp	r0, #0
    175a:	d00b      	beq.n	1774 <mcp23008_set_addr_pin+0x1c>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    175c:	235d      	movs	r3, #93	; 0x5d
    175e:	5cc3      	ldrb	r3, [r0, r3]
    1760:	2b01      	cmp	r3, #1
    1762:	d001      	beq.n	1768 <mcp23008_set_addr_pin+0x10>
        return 3; /**< return error */
    1764:	2003      	movs	r0, #3

    pHandle->i2c_address = (MCP23008_ADDRESS_DEFAULT | address_pin);

    return 0;
}
    1766:	4770      	bx	lr
    pHandle->i2c_address = (MCP23008_ADDRESS_DEFAULT | address_pin);
    1768:	2320      	movs	r3, #32
    176a:	4319      	orrs	r1, r3
    176c:	235c      	movs	r3, #92	; 0x5c
    176e:	54c1      	strb	r1, [r0, r3]
    return 0;
    1770:	2000      	movs	r0, #0
    1772:	e7f8      	b.n	1766 <mcp23008_set_addr_pin+0xe>
        return 2; /**< return error */
    1774:	2002      	movs	r0, #2
    1776:	e7f6      	b.n	1766 <mcp23008_set_addr_pin+0xe>

00001778 <mcp23008_set_pin_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set pin mode
 * @note   none
 */
uint8_t mcp23008_set_pin_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_mode_t mode) {
    1778:	b5f0      	push	{r4, r5, r6, r7, lr}
    177a:	b083      	sub	sp, #12
    177c:	0004      	movs	r4, r0
    177e:	000f      	movs	r7, r1
    1780:	0016      	movs	r6, r2

    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1782:	2800      	cmp	r0, #0
    1784:	d02d      	beq.n	17e2 <mcp23008_set_pin_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1786:	235d      	movs	r3, #93	; 0x5d
    1788:	5cc5      	ldrb	r5, [r0, r3]
    178a:	2d01      	cmp	r5, #1
    178c:	d002      	beq.n	1794 <mcp23008_set_pin_mode+0x1c>
        return 3; /**< return error */
    178e:	2003      	movs	r0, #3
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin mode");
        return 1;
    }
    return 0;
}
    1790:	b003      	add	sp, #12
    1792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
    1794:	3b5c      	subs	r3, #92	; 0x5c
    1796:	466a      	mov	r2, sp
    1798:	3207      	adds	r2, #7
    179a:	2100      	movs	r1, #0
    179c:	f7ff ff5e 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    17a0:	2800      	cmp	r0, #0
    17a2:	d117      	bne.n	17d4 <mcp23008_set_pin_mode+0x5c>
    status &= ~(1 << pin);
    17a4:	2101      	movs	r1, #1
    17a6:	40b9      	lsls	r1, r7
    17a8:	466b      	mov	r3, sp
    17aa:	1dda      	adds	r2, r3, #7
    17ac:	7813      	ldrb	r3, [r2, #0]
    17ae:	438b      	bics	r3, r1
    17b0:	b25b      	sxtb	r3, r3
    status |= (mode << pin);
    17b2:	40be      	lsls	r6, r7
    17b4:	431e      	orrs	r6, r3
    17b6:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
    17b8:	2301      	movs	r3, #1
    17ba:	2100      	movs	r1, #0
    17bc:	0020      	movs	r0, r4
    17be:	f7ff ff2d 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    17c2:	2800      	cmp	r0, #0
    17c4:	d0e4      	beq.n	1790 <mcp23008_set_pin_mode+0x18>
       a_mcp23008_print_error_msg(pHandle, "set pin mode");
    17c6:	4908      	ldr	r1, [pc, #32]	; (17e8 <mcp23008_set_pin_mode+0x70>)
    17c8:	4479      	add	r1, pc
    17ca:	0020      	movs	r0, r4
    17cc:	f7ff ff64 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    17d0:	0028      	movs	r0, r5
    17d2:	e7dd      	b.n	1790 <mcp23008_set_pin_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin mode");
    17d4:	4905      	ldr	r1, [pc, #20]	; (17ec <mcp23008_set_pin_mode+0x74>)
    17d6:	4479      	add	r1, pc
    17d8:	0020      	movs	r0, r4
    17da:	f7ff ff5d 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    17de:	0028      	movs	r0, r5
    17e0:	e7d6      	b.n	1790 <mcp23008_set_pin_mode+0x18>
        return 2; /**< return error */
    17e2:	2002      	movs	r0, #2
    17e4:	e7d4      	b.n	1790 <mcp23008_set_pin_mode+0x18>
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	000021f4 	.word	0x000021f4
    17ec:	000021e6 	.word	0x000021e6

000017f0 <mcp23008_pin_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_pin_write(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_logic_level_t logic_level) {
    17f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17f2:	b083      	sub	sp, #12
    17f4:	0004      	movs	r4, r0
    17f6:	000f      	movs	r7, r1
    17f8:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    17fa:	2800      	cmp	r0, #0
    17fc:	d02d      	beq.n	185a <mcp23008_pin_write+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    17fe:	235d      	movs	r3, #93	; 0x5d
    1800:	5cc5      	ldrb	r5, [r0, r3]
    1802:	2d01      	cmp	r5, #1
    1804:	d002      	beq.n	180c <mcp23008_pin_write+0x1c>
        return 3; /**< return error */
    1806:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "write pin");
        return 1;
    }
    return 0;
}
    1808:	b003      	add	sp, #12
    180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    180c:	3b5c      	subs	r3, #92	; 0x5c
    180e:	466a      	mov	r2, sp
    1810:	3207      	adds	r2, #7
    1812:	210a      	movs	r1, #10
    1814:	f7ff ff22 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1818:	2800      	cmp	r0, #0
    181a:	d117      	bne.n	184c <mcp23008_pin_write+0x5c>
    status &= ~(1 << pin);
    181c:	2101      	movs	r1, #1
    181e:	40b9      	lsls	r1, r7
    1820:	466b      	mov	r3, sp
    1822:	1dda      	adds	r2, r3, #7
    1824:	7813      	ldrb	r3, [r2, #0]
    1826:	438b      	bics	r3, r1
    1828:	b25b      	sxtb	r3, r3
    status |= (logic_level << pin);
    182a:	40be      	lsls	r6, r7
    182c:	431e      	orrs	r6, r3
    182e:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    1830:	2301      	movs	r3, #1
    1832:	210a      	movs	r1, #10
    1834:	0020      	movs	r0, r4
    1836:	f7ff fef1 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    183a:	2800      	cmp	r0, #0
    183c:	d0e4      	beq.n	1808 <mcp23008_pin_write+0x18>
        a_mcp23008_print_error_msg(pHandle, "write pin");
    183e:	4908      	ldr	r1, [pc, #32]	; (1860 <mcp23008_pin_write+0x70>)
    1840:	4479      	add	r1, pc
    1842:	0020      	movs	r0, r4
    1844:	f7ff ff28 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1848:	0028      	movs	r0, r5
    184a:	e7dd      	b.n	1808 <mcp23008_pin_write+0x18>
        a_mcp23008_print_error_msg(pHandle,"read latch register");
    184c:	4905      	ldr	r1, [pc, #20]	; (1864 <mcp23008_pin_write+0x74>)
    184e:	4479      	add	r1, pc
    1850:	0020      	movs	r0, r4
    1852:	f7ff ff21 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1856:	0028      	movs	r0, r5
    1858:	e7d6      	b.n	1808 <mcp23008_pin_write+0x18>
        return 2; /**< return error */
    185a:	2002      	movs	r0, #2
    185c:	e7d4      	b.n	1808 <mcp23008_pin_write+0x18>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	000021c8 	.word	0x000021c8
    1864:	000021a6 	.word	0x000021a6

00001868 <mcp23008_pin_write_all>:
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_pin_write_all(mcp23008_handle_t *const pHandle, mcp23008_port_logic_level_t logic_level)
{
    1868:	b530      	push	{r4, r5, lr}
    186a:	b083      	sub	sp, #12
    186c:	1e04      	subs	r4, r0, #0
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    186e:	d021      	beq.n	18b4 <mcp23008_pin_write_all+0x4c>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1870:	235d      	movs	r3, #93	; 0x5d
    1872:	5cc5      	ldrb	r5, [r0, r3]
    1874:	2d01      	cmp	r5, #1
    1876:	d002      	beq.n	187e <mcp23008_pin_write_all+0x16>
        return 3; /**< return error */
    1878:	2003      	movs	r0, #3
        a_mcp23008_print_error_msg(pHandle, "write all pins");
        return 1;
    }

   return 0;
}
    187a:	b003      	add	sp, #12
    187c:	bd30      	pop	{r4, r5, pc}
    if(logic_level == HIGH)
    187e:	2901      	cmp	r1, #1
    1880:	d014      	beq.n	18ac <mcp23008_pin_write_all+0x44>
    }else if(logic_level == LOW){
    1882:	2900      	cmp	r1, #0
    1884:	d102      	bne.n	188c <mcp23008_pin_write_all+0x24>
        status = 0x00;
    1886:	2200      	movs	r2, #0
    1888:	466b      	mov	r3, sp
    188a:	71da      	strb	r2, [r3, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    188c:	2301      	movs	r3, #1
    188e:	466a      	mov	r2, sp
    1890:	3207      	adds	r2, #7
    1892:	210a      	movs	r1, #10
    1894:	0020      	movs	r0, r4
    1896:	f7ff fec1 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    189a:	2800      	cmp	r0, #0
    189c:	d0ed      	beq.n	187a <mcp23008_pin_write_all+0x12>
        a_mcp23008_print_error_msg(pHandle, "write all pins");
    189e:	4906      	ldr	r1, [pc, #24]	; (18b8 <mcp23008_pin_write_all+0x50>)
    18a0:	4479      	add	r1, pc
    18a2:	0020      	movs	r0, r4
    18a4:	f7ff fef8 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    18a8:	0028      	movs	r0, r5
    18aa:	e7e6      	b.n	187a <mcp23008_pin_write_all+0x12>
        status = 0xff;
    18ac:	22ff      	movs	r2, #255	; 0xff
    18ae:	466b      	mov	r3, sp
    18b0:	71da      	strb	r2, [r3, #7]
    18b2:	e7eb      	b.n	188c <mcp23008_pin_write_all+0x24>
        return 2; /**< return error */
    18b4:	2002      	movs	r0, #2
    18b6:	e7e0      	b.n	187a <mcp23008_pin_write_all+0x12>
    18b8:	00002174 	.word	0x00002174

000018bc <mcp23008_pin_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed read pin
 * @note    none
 */
uint8_t mcp23008_pin_read(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_logic_level_t *logic_level) {
    18bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18be:	b083      	sub	sp, #12
    18c0:	0004      	movs	r4, r0
    18c2:	000d      	movs	r5, r1
    18c4:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    18c6:	2800      	cmp	r0, #0
    18c8:	d01f      	beq.n	190a <mcp23008_pin_read+0x4e>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    18ca:	235d      	movs	r3, #93	; 0x5d
    18cc:	5cc7      	ldrb	r7, [r0, r3]
    18ce:	2f01      	cmp	r7, #1
    18d0:	d002      	beq.n	18d8 <mcp23008_pin_read+0x1c>
        return 3; /**< return error */
    18d2:	2003      	movs	r0, #3
        a_mcp23008_print_error_msg(pHandle, "read latch register");
        return 1;
    }
    *logic_level = (mcp23008_port_logic_level_t) ((status & pinMask[pin]) >> pin);
    return 0;
}
    18d4:	b003      	add	sp, #12
    18d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_GENERAL_PURPOSE_REG, (uint8_t *) &status, 1);
    18d8:	3b5c      	subs	r3, #92	; 0x5c
    18da:	466a      	mov	r2, sp
    18dc:	3207      	adds	r2, #7
    18de:	2109      	movs	r1, #9
    18e0:	f7ff febc 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    18e4:	2800      	cmp	r0, #0
    18e6:	d109      	bne.n	18fc <mcp23008_pin_read+0x40>
    *logic_level = (mcp23008_port_logic_level_t) ((status & pinMask[pin]) >> pin);
    18e8:	4b09      	ldr	r3, [pc, #36]	; (1910 <mcp23008_pin_read+0x54>)
    18ea:	447b      	add	r3, pc
    18ec:	5d5a      	ldrb	r2, [r3, r5]
    18ee:	466b      	mov	r3, sp
    18f0:	3307      	adds	r3, #7
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	4013      	ands	r3, r2
    18f6:	412b      	asrs	r3, r5
    18f8:	7033      	strb	r3, [r6, #0]
    return 0;
    18fa:	e7eb      	b.n	18d4 <mcp23008_pin_read+0x18>
        a_mcp23008_print_error_msg(pHandle, "read latch register");
    18fc:	4905      	ldr	r1, [pc, #20]	; (1914 <mcp23008_pin_read+0x58>)
    18fe:	4479      	add	r1, pc
    1900:	0020      	movs	r0, r4
    1902:	f7ff fec9 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1906:	0038      	movs	r0, r7
    1908:	e7e4      	b.n	18d4 <mcp23008_pin_read+0x18>
        return 2; /**< return error */
    190a:	2002      	movs	r0, #2
    190c:	e7e2      	b.n	18d4 <mcp23008_pin_read+0x18>
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	00001fa6 	.word	0x00001fa6
    1914:	000020f6 	.word	0x000020f6

00001918 <mcp23008_set_pin_pullup_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set pull-up mode
 * @note    none
 */
uint8_t mcp23008_set_pin_pullup_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
    1918:	b5f0      	push	{r4, r5, r6, r7, lr}
    191a:	b083      	sub	sp, #12
    191c:	0004      	movs	r4, r0
    191e:	000f      	movs	r7, r1
    1920:	0016      	movs	r6, r2

    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1922:	2800      	cmp	r0, #0
    1924:	d02d      	beq.n	1982 <mcp23008_set_pin_pullup_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1926:	235d      	movs	r3, #93	; 0x5d
    1928:	5cc5      	ldrb	r5, [r0, r3]
    192a:	2d01      	cmp	r5, #1
    192c:	d002      	beq.n	1934 <mcp23008_set_pin_pullup_mode+0x1c>
        return 3; /**< return error */
    192e:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
        return 1;
    }
    return 0;
}
    1930:	b003      	add	sp, #12
    1932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *)&status, 1);
    1934:	3b5c      	subs	r3, #92	; 0x5c
    1936:	466a      	mov	r2, sp
    1938:	3207      	adds	r2, #7
    193a:	2106      	movs	r1, #6
    193c:	f7ff fe8e 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1940:	2800      	cmp	r0, #0
    1942:	d117      	bne.n	1974 <mcp23008_set_pin_pullup_mode+0x5c>
    status &= ~(1 << pin);
    1944:	2101      	movs	r1, #1
    1946:	40b9      	lsls	r1, r7
    1948:	466b      	mov	r3, sp
    194a:	1dda      	adds	r2, r3, #7
    194c:	7813      	ldrb	r3, [r2, #0]
    194e:	438b      	bics	r3, r1
    1950:	b25b      	sxtb	r3, r3
    status |= (enable << pin);
    1952:	40be      	lsls	r6, r7
    1954:	431e      	orrs	r6, r3
    1956:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *) &status, 1);
    1958:	2301      	movs	r3, #1
    195a:	2106      	movs	r1, #6
    195c:	0020      	movs	r0, r4
    195e:	f7ff fe5d 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1962:	2800      	cmp	r0, #0
    1964:	d0e4      	beq.n	1930 <mcp23008_set_pin_pullup_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
    1966:	4908      	ldr	r1, [pc, #32]	; (1988 <mcp23008_set_pin_pullup_mode+0x70>)
    1968:	4479      	add	r1, pc
    196a:	0020      	movs	r0, r4
    196c:	f7ff fe94 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1970:	0028      	movs	r0, r5
    1972:	e7dd      	b.n	1930 <mcp23008_set_pin_pullup_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "read pull-up register");
    1974:	4905      	ldr	r1, [pc, #20]	; (198c <mcp23008_set_pin_pullup_mode+0x74>)
    1976:	4479      	add	r1, pc
    1978:	0020      	movs	r0, r4
    197a:	f7ff fe8d 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    197e:	0028      	movs	r0, r5
    1980:	e7d6      	b.n	1930 <mcp23008_set_pin_pullup_mode+0x18>
        return 2; /**< return error */
    1982:	2002      	movs	r0, #2
    1984:	e7d4      	b.n	1930 <mcp23008_set_pin_pullup_mode+0x18>
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000020d4 	.word	0x000020d4
    198c:	000020ae 	.word	0x000020ae

00001990 <mcp23008_set_pin_input_polarity_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set polarity
 * @note    none
 */
uint8_t mcp23008_set_pin_input_polarity_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_polarity_t polarity) {
    1990:	b5f0      	push	{r4, r5, r6, r7, lr}
    1992:	b083      	sub	sp, #12
    1994:	0004      	movs	r4, r0
    1996:	000f      	movs	r7, r1
    1998:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    199a:	2800      	cmp	r0, #0
    199c:	d02d      	beq.n	19fa <mcp23008_set_pin_input_polarity_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    199e:	235d      	movs	r3, #93	; 0x5d
    19a0:	5cc5      	ldrb	r5, [r0, r3]
    19a2:	2d01      	cmp	r5, #1
    19a4:	d002      	beq.n	19ac <mcp23008_set_pin_input_polarity_mode+0x1c>
        return 3; /**< return error */
    19a6:	2003      	movs	r0, #3
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
        return 1;
    }
    return 0;
}
    19a8:	b003      	add	sp, #12
    19aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
    19ac:	3b5c      	subs	r3, #92	; 0x5c
    19ae:	466a      	mov	r2, sp
    19b0:	3207      	adds	r2, #7
    19b2:	2101      	movs	r1, #1
    19b4:	f7ff fe52 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    19b8:	2800      	cmp	r0, #0
    19ba:	d117      	bne.n	19ec <mcp23008_set_pin_input_polarity_mode+0x5c>
    status &= ~(1 << pin);
    19bc:	2101      	movs	r1, #1
    19be:	40b9      	lsls	r1, r7
    19c0:	466b      	mov	r3, sp
    19c2:	1dda      	adds	r2, r3, #7
    19c4:	7813      	ldrb	r3, [r2, #0]
    19c6:	438b      	bics	r3, r1
    19c8:	b25b      	sxtb	r3, r3
    status |= (polarity << pin);
    19ca:	40be      	lsls	r6, r7
    19cc:	431e      	orrs	r6, r3
    19ce:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
    19d0:	2301      	movs	r3, #1
    19d2:	2101      	movs	r1, #1
    19d4:	0020      	movs	r0, r4
    19d6:	f7ff fe21 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    19da:	2800      	cmp	r0, #0
    19dc:	d0e4      	beq.n	19a8 <mcp23008_set_pin_input_polarity_mode+0x18>
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
    19de:	4908      	ldr	r1, [pc, #32]	; (1a00 <mcp23008_set_pin_input_polarity_mode+0x70>)
    19e0:	4479      	add	r1, pc
    19e2:	0020      	movs	r0, r4
    19e4:	f7ff fe58 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    19e8:	0028      	movs	r0, r5
    19ea:	e7dd      	b.n	19a8 <mcp23008_set_pin_input_polarity_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "read input polarity");
    19ec:	4905      	ldr	r1, [pc, #20]	; (1a04 <mcp23008_set_pin_input_polarity_mode+0x74>)
    19ee:	4479      	add	r1, pc
    19f0:	0020      	movs	r0, r4
    19f2:	f7ff fe51 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    19f6:	0028      	movs	r0, r5
    19f8:	e7d6      	b.n	19a8 <mcp23008_set_pin_input_polarity_mode+0x18>
        return 2; /**< return error */
    19fa:	2002      	movs	r0, #2
    19fc:	e7d4      	b.n	19a8 <mcp23008_set_pin_input_polarity_mode+0x18>
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	00002094 	.word	0x00002094
    1a04:	00002072 	.word	0x00002072

00001a08 <mcp23008_set_pin_interrupt>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set interrupt
 * @note    none
 */
uint8_t mcp23008_set_pin_interrupt(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
    1a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0a:	b083      	sub	sp, #12
    1a0c:	0004      	movs	r4, r0
    1a0e:	000f      	movs	r7, r1
    1a10:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1a12:	2800      	cmp	r0, #0
    1a14:	d02d      	beq.n	1a72 <mcp23008_set_pin_interrupt+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1a16:	235d      	movs	r3, #93	; 0x5d
    1a18:	5cc5      	ldrb	r5, [r0, r3]
    1a1a:	2d01      	cmp	r5, #1
    1a1c:	d002      	beq.n	1a24 <mcp23008_set_pin_interrupt+0x1c>
        return 3; /**< return error */
    1a1e:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
        return 1;
    }
    return 0;
}
    1a20:	b003      	add	sp, #12
    1a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
    1a24:	3b5c      	subs	r3, #92	; 0x5c
    1a26:	466a      	mov	r2, sp
    1a28:	3207      	adds	r2, #7
    1a2a:	2102      	movs	r1, #2
    1a2c:	f7ff fe16 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1a30:	2800      	cmp	r0, #0
    1a32:	d117      	bne.n	1a64 <mcp23008_set_pin_interrupt+0x5c>
    status &= ~(1 << pin);
    1a34:	2101      	movs	r1, #1
    1a36:	40b9      	lsls	r1, r7
    1a38:	466b      	mov	r3, sp
    1a3a:	1dda      	adds	r2, r3, #7
    1a3c:	7813      	ldrb	r3, [r2, #0]
    1a3e:	438b      	bics	r3, r1
    1a40:	b25b      	sxtb	r3, r3
    status |= (enable << pin);
    1a42:	40be      	lsls	r6, r7
    1a44:	431e      	orrs	r6, r3
    1a46:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
    1a48:	2301      	movs	r3, #1
    1a4a:	2102      	movs	r1, #2
    1a4c:	0020      	movs	r0, r4
    1a4e:	f7ff fde5 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1a52:	2800      	cmp	r0, #0
    1a54:	d0e4      	beq.n	1a20 <mcp23008_set_pin_interrupt+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
    1a56:	4908      	ldr	r1, [pc, #32]	; (1a78 <mcp23008_set_pin_interrupt+0x70>)
    1a58:	4479      	add	r1, pc
    1a5a:	0020      	movs	r0, r4
    1a5c:	f7ff fe1c 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1a60:	0028      	movs	r0, r5
    1a62:	e7dd      	b.n	1a20 <mcp23008_set_pin_interrupt+0x18>
        a_mcp23008_print_error_msg(pHandle, "read interrupt");
    1a64:	4905      	ldr	r1, [pc, #20]	; (1a7c <mcp23008_set_pin_interrupt+0x74>)
    1a66:	4479      	add	r1, pc
    1a68:	0020      	movs	r0, r4
    1a6a:	f7ff fe15 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1a6e:	0028      	movs	r0, r5
    1a70:	e7d6      	b.n	1a20 <mcp23008_set_pin_interrupt+0x18>
        return 2; /**< return error */
    1a72:	2002      	movs	r0, #2
    1a74:	e7d4      	b.n	1a20 <mcp23008_set_pin_interrupt+0x18>
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	00002058 	.word	0x00002058
    1a7c:	0000203a 	.word	0x0000203a

00001a80 <mcp23008_get_interrupt_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed to get interrupt flag status
 * @note    none
 */
uint8_t mcp23008_get_interrupt_flag(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_interrupt_flag_t *flag) {
    1a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a82:	b083      	sub	sp, #12
    1a84:	0004      	movs	r4, r0
    1a86:	000d      	movs	r5, r1
    1a88:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1a8a:	2800      	cmp	r0, #0
    1a8c:	d01f      	beq.n	1ace <mcp23008_get_interrupt_flag+0x4e>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1a8e:	235d      	movs	r3, #93	; 0x5d
    1a90:	5cc7      	ldrb	r7, [r0, r3]
    1a92:	2f01      	cmp	r7, #1
    1a94:	d002      	beq.n	1a9c <mcp23008_get_interrupt_flag+0x1c>
        return 3; /**< return error */
    1a96:	2003      	movs	r0, #3
        return 1;
    }

    *flag = (mcp23008_interrupt_flag_t) ((status & pinMask[pin]) >> pin);
    return 0;
}
    1a98:	b003      	add	sp, #12
    1a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_FLAG_REG, (uint8_t *) &status, 1);
    1a9c:	3b5c      	subs	r3, #92	; 0x5c
    1a9e:	466a      	mov	r2, sp
    1aa0:	3207      	adds	r2, #7
    1aa2:	2107      	movs	r1, #7
    1aa4:	f7ff fdda 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d109      	bne.n	1ac0 <mcp23008_get_interrupt_flag+0x40>
    *flag = (mcp23008_interrupt_flag_t) ((status & pinMask[pin]) >> pin);
    1aac:	4b09      	ldr	r3, [pc, #36]	; (1ad4 <mcp23008_get_interrupt_flag+0x54>)
    1aae:	447b      	add	r3, pc
    1ab0:	5d5a      	ldrb	r2, [r3, r5]
    1ab2:	466b      	mov	r3, sp
    1ab4:	3307      	adds	r3, #7
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	4013      	ands	r3, r2
    1aba:	412b      	asrs	r3, r5
    1abc:	7033      	strb	r3, [r6, #0]
    return 0;
    1abe:	e7eb      	b.n	1a98 <mcp23008_get_interrupt_flag+0x18>
        a_mcp23008_print_error_msg(pHandle, "read pin interrupt status");
    1ac0:	4905      	ldr	r1, [pc, #20]	; (1ad8 <mcp23008_get_interrupt_flag+0x58>)
    1ac2:	4479      	add	r1, pc
    1ac4:	0020      	movs	r0, r4
    1ac6:	f7ff fde7 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1aca:	0038      	movs	r0, r7
    1acc:	e7e4      	b.n	1a98 <mcp23008_get_interrupt_flag+0x18>
        return 2; /**< return error */
    1ace:	2002      	movs	r0, #2
    1ad0:	e7e2      	b.n	1a98 <mcp23008_get_interrupt_flag+0x18>
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	00001de2 	.word	0x00001de2
    1ad8:	00002002 	.word	0x00002002

00001adc <mcp23008_clear_interrupt_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed to get interrupt flag status
 * @note    none
 */
uint8_t mcp23008_clear_interrupt_flag(mcp23008_handle_t *const pHandle/*, mcp23008_gpio_port_t pin, mcp23008_interrupt_flag_t flag*/) {
    1adc:	b570      	push	{r4, r5, r6, lr}
    1ade:	b082      	sub	sp, #8
    1ae0:	1e04      	subs	r4, r0, #0
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1ae2:	d01c      	beq.n	1b1e <mcp23008_clear_interrupt_flag+0x42>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1ae4:	235d      	movs	r3, #93	; 0x5d
    1ae6:	5cc5      	ldrb	r5, [r0, r3]
    1ae8:	2d01      	cmp	r5, #1
    1aea:	d002      	beq.n	1af2 <mcp23008_clear_interrupt_flag+0x16>
        return 3; /**< return error */
    1aec:	2003      	movs	r0, #3
    {
        pHandle->debug_print("mcp23008: failed to clear pin interrupt flag\n\r");
        return 1;
    }*/
    return 0;
}
    1aee:	b002      	add	sp, #8
    1af0:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_FLAG_REG, (uint8_t *) &status, 1);
    1af2:	3b5c      	subs	r3, #92	; 0x5c
    1af4:	466a      	mov	r2, sp
    1af6:	1dd6      	adds	r6, r2, #7
    1af8:	0032      	movs	r2, r6
    1afa:	2107      	movs	r1, #7
    1afc:	f7ff fdae 	bl	165c <a_mcp23008_i2c_read>
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_CAPTURED_REG, (uint8_t *) &status, 1);
    1b00:	2301      	movs	r3, #1
    1b02:	0032      	movs	r2, r6
    1b04:	2108      	movs	r1, #8
    1b06:	0020      	movs	r0, r4
    1b08:	f7ff fda8 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1b0c:	2800      	cmp	r0, #0
    1b0e:	d0ee      	beq.n	1aee <mcp23008_clear_interrupt_flag+0x12>
        a_mcp23008_print_error_msg(pHandle, "read interrupt flag");
    1b10:	4904      	ldr	r1, [pc, #16]	; (1b24 <mcp23008_clear_interrupt_flag+0x48>)
    1b12:	4479      	add	r1, pc
    1b14:	0020      	movs	r0, r4
    1b16:	f7ff fdbf 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1b1a:	0028      	movs	r0, r5
    1b1c:	e7e7      	b.n	1aee <mcp23008_clear_interrupt_flag+0x12>
        return 2; /**< return error */
    1b1e:	2002      	movs	r0, #2
    1b20:	e7e5      	b.n	1aee <mcp23008_clear_interrupt_flag+0x12>
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	00001fce 	.word	0x00001fce

00001b28 <mcp23008_set_intrrupt_pin_output_level>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set interrupt logic output logic level
 * @note    none
 */
uint8_t mcp23008_set_intrrupt_pin_output_level(mcp23008_handle_t *const pHandle, mcp23008_interrupt_polarity_t logic_level) {
    1b28:	b570      	push	{r4, r5, r6, lr}
    1b2a:	b082      	sub	sp, #8
    1b2c:	0004      	movs	r4, r0
    1b2e:	000e      	movs	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1b30:	2800      	cmp	r0, #0
    1b32:	d02b      	beq.n	1b8c <mcp23008_set_intrrupt_pin_output_level+0x64>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1b34:	235d      	movs	r3, #93	; 0x5d
    1b36:	5cc5      	ldrb	r5, [r0, r3]
    1b38:	2d01      	cmp	r5, #1
    1b3a:	d002      	beq.n	1b42 <mcp23008_set_intrrupt_pin_output_level+0x1a>
        return 3; /**< return error */
    1b3c:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
        return 1;
    }
    return 0;
}
    1b3e:	b002      	add	sp, #8
    1b40:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1b42:	3b5c      	subs	r3, #92	; 0x5c
    1b44:	466a      	mov	r2, sp
    1b46:	3207      	adds	r2, #7
    1b48:	2105      	movs	r1, #5
    1b4a:	f7ff fd87 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1b4e:	2800      	cmp	r0, #0
    1b50:	d115      	bne.n	1b7e <mcp23008_set_intrrupt_pin_output_level+0x56>
    status &= ~(1 << 1);
    1b52:	466b      	mov	r3, sp
    1b54:	1dda      	adds	r2, r3, #7
    1b56:	7813      	ldrb	r3, [r2, #0]
    1b58:	2102      	movs	r1, #2
    1b5a:	438b      	bics	r3, r1
    status |= (logic_level << 1);
    1b5c:	0076      	lsls	r6, r6, #1
    1b5e:	431e      	orrs	r6, r3
    1b60:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1b62:	2301      	movs	r3, #1
    1b64:	3103      	adds	r1, #3
    1b66:	0020      	movs	r0, r4
    1b68:	f7ff fd58 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d0e6      	beq.n	1b3e <mcp23008_set_intrrupt_pin_output_level+0x16>
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
    1b70:	4907      	ldr	r1, [pc, #28]	; (1b90 <mcp23008_set_intrrupt_pin_output_level+0x68>)
    1b72:	4479      	add	r1, pc
    1b74:	0020      	movs	r0, r4
    1b76:	f7ff fd8f 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1b7a:	0028      	movs	r0, r5
    1b7c:	e7df      	b.n	1b3e <mcp23008_set_intrrupt_pin_output_level+0x16>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    1b7e:	4905      	ldr	r1, [pc, #20]	; (1b94 <mcp23008_set_intrrupt_pin_output_level+0x6c>)
    1b80:	4479      	add	r1, pc
    1b82:	0020      	movs	r0, r4
    1b84:	f7ff fd88 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1b88:	0028      	movs	r0, r5
    1b8a:	e7d8      	b.n	1b3e <mcp23008_set_intrrupt_pin_output_level+0x16>
        return 2; /**< return error */
    1b8c:	2002      	movs	r0, #2
    1b8e:	e7d6      	b.n	1b3e <mcp23008_set_intrrupt_pin_output_level+0x16>
    1b90:	00001f96 	.word	0x00001f96
    1b94:	00001f74 	.word	0x00001f74

00001b98 <mcp23008_set_interrupt_pin_output_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt putput mode
 * @note    none
 */
uint8_t mcp23008_set_interrupt_pin_output_mode(mcp23008_handle_t *const pHandle, mcp23008_interrupt_open_drain_mode_t mode) {
    1b98:	b570      	push	{r4, r5, r6, lr}
    1b9a:	b082      	sub	sp, #8
    1b9c:	0004      	movs	r4, r0
    1b9e:	000e      	movs	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1ba0:	2800      	cmp	r0, #0
    1ba2:	d02b      	beq.n	1bfc <mcp23008_set_interrupt_pin_output_mode+0x64>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1ba4:	235d      	movs	r3, #93	; 0x5d
    1ba6:	5cc5      	ldrb	r5, [r0, r3]
    1ba8:	2d01      	cmp	r5, #1
    1baa:	d002      	beq.n	1bb2 <mcp23008_set_interrupt_pin_output_mode+0x1a>
        return 3; /**< return error */
    1bac:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
        return 1;
    }
    return 0;
}
    1bae:	b002      	add	sp, #8
    1bb0:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1bb2:	3b5c      	subs	r3, #92	; 0x5c
    1bb4:	466a      	mov	r2, sp
    1bb6:	3207      	adds	r2, #7
    1bb8:	2105      	movs	r1, #5
    1bba:	f7ff fd4f 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d115      	bne.n	1bee <mcp23008_set_interrupt_pin_output_mode+0x56>
    status &= ~(1 << 2);
    1bc2:	466b      	mov	r3, sp
    1bc4:	1dda      	adds	r2, r3, #7
    1bc6:	7813      	ldrb	r3, [r2, #0]
    1bc8:	2104      	movs	r1, #4
    1bca:	438b      	bics	r3, r1
    status |= (mode << 2);
    1bcc:	00b6      	lsls	r6, r6, #2
    1bce:	431e      	orrs	r6, r3
    1bd0:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1bd2:	2301      	movs	r3, #1
    1bd4:	3101      	adds	r1, #1
    1bd6:	0020      	movs	r0, r4
    1bd8:	f7ff fd20 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1bdc:	2800      	cmp	r0, #0
    1bde:	d0e6      	beq.n	1bae <mcp23008_set_interrupt_pin_output_mode+0x16>
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
    1be0:	4907      	ldr	r1, [pc, #28]	; (1c00 <mcp23008_set_interrupt_pin_output_mode+0x68>)
    1be2:	4479      	add	r1, pc
    1be4:	0020      	movs	r0, r4
    1be6:	f7ff fd57 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1bea:	0028      	movs	r0, r5
    1bec:	e7df      	b.n	1bae <mcp23008_set_interrupt_pin_output_mode+0x16>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    1bee:	4905      	ldr	r1, [pc, #20]	; (1c04 <mcp23008_set_interrupt_pin_output_mode+0x6c>)
    1bf0:	4479      	add	r1, pc
    1bf2:	0020      	movs	r0, r4
    1bf4:	f7ff fd50 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1bf8:	0028      	movs	r0, r5
    1bfa:	e7d8      	b.n	1bae <mcp23008_set_interrupt_pin_output_mode+0x16>
        return 2; /**< return error */
    1bfc:	2002      	movs	r0, #2
    1bfe:	e7d6      	b.n	1bae <mcp23008_set_interrupt_pin_output_mode+0x16>
    1c00:	00001f62 	.word	0x00001f62
    1c04:	00001f04 	.word	0x00001f04

00001c08 <mcp23008_set_ineterrupt_compare_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt compare mode
 * @note    none
 */
uint8_t mcp23008_set_ineterrupt_compare_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_interrupt_compare_value_t mode) {
    1c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0a:	b083      	sub	sp, #12
    1c0c:	0004      	movs	r4, r0
    1c0e:	000f      	movs	r7, r1
    1c10:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1c12:	2800      	cmp	r0, #0
    1c14:	d02d      	beq.n	1c72 <mcp23008_set_ineterrupt_compare_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1c16:	235d      	movs	r3, #93	; 0x5d
    1c18:	5cc5      	ldrb	r5, [r0, r3]
    1c1a:	2d01      	cmp	r5, #1
    1c1c:	d002      	beq.n	1c24 <mcp23008_set_ineterrupt_compare_mode+0x1c>
        return 3; /**< return error */
    1c1e:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
        return 1;
    }
    return 0;
}
    1c20:	b003      	add	sp, #12
    1c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
    1c24:	3b5c      	subs	r3, #92	; 0x5c
    1c26:	466a      	mov	r2, sp
    1c28:	3207      	adds	r2, #7
    1c2a:	2104      	movs	r1, #4
    1c2c:	f7ff fd16 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1c30:	2800      	cmp	r0, #0
    1c32:	d117      	bne.n	1c64 <mcp23008_set_ineterrupt_compare_mode+0x5c>
    status &= ~(1 << pin);
    1c34:	2101      	movs	r1, #1
    1c36:	40b9      	lsls	r1, r7
    1c38:	466b      	mov	r3, sp
    1c3a:	1dda      	adds	r2, r3, #7
    1c3c:	7813      	ldrb	r3, [r2, #0]
    1c3e:	438b      	bics	r3, r1
    1c40:	b25b      	sxtb	r3, r3
    status |= (mode << pin);
    1c42:	40be      	lsls	r6, r7
    1c44:	431e      	orrs	r6, r3
    1c46:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
    1c48:	2301      	movs	r3, #1
    1c4a:	2104      	movs	r1, #4
    1c4c:	0020      	movs	r0, r4
    1c4e:	f7ff fce5 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1c52:	2800      	cmp	r0, #0
    1c54:	d0e4      	beq.n	1c20 <mcp23008_set_ineterrupt_compare_mode+0x18>
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
    1c56:	4908      	ldr	r1, [pc, #32]	; (1c78 <mcp23008_set_ineterrupt_compare_mode+0x70>)
    1c58:	4479      	add	r1, pc
    1c5a:	0020      	movs	r0, r4
    1c5c:	f7ff fd1c 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1c60:	0028      	movs	r0, r5
    1c62:	e7dd      	b.n	1c20 <mcp23008_set_ineterrupt_compare_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "read interrupt on change control reg");
    1c64:	4905      	ldr	r1, [pc, #20]	; (1c7c <mcp23008_set_ineterrupt_compare_mode+0x74>)
    1c66:	4479      	add	r1, pc
    1c68:	0020      	movs	r0, r4
    1c6a:	f7ff fd15 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1c6e:	0028      	movs	r0, r5
    1c70:	e7d6      	b.n	1c20 <mcp23008_set_ineterrupt_compare_mode+0x18>
        return 2; /**< return error */
    1c72:	2002      	movs	r0, #2
    1c74:	e7d4      	b.n	1c20 <mcp23008_set_ineterrupt_compare_mode+0x18>
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	00001f34 	.word	0x00001f34
    1c7c:	00001efe 	.word	0x00001efe

00001c80 <mcp23008_set_default_compare_value>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set interrupt default value
 * @note    none
 */
uint8_t mcp23008_set_default_compare_value(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_interrupt_default_value_t value) {
    1c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c82:	b083      	sub	sp, #12
    1c84:	0004      	movs	r4, r0
    1c86:	000f      	movs	r7, r1
    1c88:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1c8a:	2800      	cmp	r0, #0
    1c8c:	d02d      	beq.n	1cea <mcp23008_set_default_compare_value+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1c8e:	235d      	movs	r3, #93	; 0x5d
    1c90:	5cc5      	ldrb	r5, [r0, r3]
    1c92:	2d01      	cmp	r5, #1
    1c94:	d002      	beq.n	1c9c <mcp23008_set_default_compare_value+0x1c>
        return 3; /**< return error */
    1c96:	2003      	movs	r0, #3
        a_mcp23008_print_error_msg(pHandle, "set pin default compare value");
        return 1;
    }
    return 0;

}
    1c98:	b003      	add	sp, #12
    1c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_DEFAULT_VALUE_REG, (uint8_t *) &status, 1);
    1c9c:	3b5c      	subs	r3, #92	; 0x5c
    1c9e:	466a      	mov	r2, sp
    1ca0:	3207      	adds	r2, #7
    1ca2:	2103      	movs	r1, #3
    1ca4:	f7ff fcda 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1ca8:	2800      	cmp	r0, #0
    1caa:	d117      	bne.n	1cdc <mcp23008_set_default_compare_value+0x5c>
    status &= ~(1 << pin);
    1cac:	2101      	movs	r1, #1
    1cae:	40b9      	lsls	r1, r7
    1cb0:	466b      	mov	r3, sp
    1cb2:	1dda      	adds	r2, r3, #7
    1cb4:	7813      	ldrb	r3, [r2, #0]
    1cb6:	438b      	bics	r3, r1
    1cb8:	b25b      	sxtb	r3, r3
    status |= (value << pin);
    1cba:	40be      	lsls	r6, r7
    1cbc:	431e      	orrs	r6, r3
    1cbe:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DEFAULT_VALUE_REG, (uint8_t *) &status, 1);
    1cc0:	2301      	movs	r3, #1
    1cc2:	2103      	movs	r1, #3
    1cc4:	0020      	movs	r0, r4
    1cc6:	f7ff fca9 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1cca:	2800      	cmp	r0, #0
    1ccc:	d0e4      	beq.n	1c98 <mcp23008_set_default_compare_value+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin default compare value");
    1cce:	4908      	ldr	r1, [pc, #32]	; (1cf0 <mcp23008_set_default_compare_value+0x70>)
    1cd0:	4479      	add	r1, pc
    1cd2:	0020      	movs	r0, r4
    1cd4:	f7ff fce0 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1cd8:	0028      	movs	r0, r5
    1cda:	e7dd      	b.n	1c98 <mcp23008_set_default_compare_value+0x18>
        a_mcp23008_print_error_msg(pHandle, "read default compare value reg");
    1cdc:	4905      	ldr	r1, [pc, #20]	; (1cf4 <mcp23008_set_default_compare_value+0x74>)
    1cde:	4479      	add	r1, pc
    1ce0:	0020      	movs	r0, r4
    1ce2:	f7ff fcd9 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1ce6:	0028      	movs	r0, r5
    1ce8:	e7d6      	b.n	1c98 <mcp23008_set_default_compare_value+0x18>
        return 2; /**< return error */
    1cea:	2002      	movs	r0, #2
    1cec:	e7d4      	b.n	1c98 <mcp23008_set_default_compare_value+0x18>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	00001ef8 	.word	0x00001ef8
    1cf4:	00001eca 	.word	0x00001eca

00001cf8 <mcp23008_set_slew_rate>:
 * @return status code
 *          - 0 success
 *          - 1 failed set slew rate
 * @note    none
 */
uint8_t mcp23008_set_slew_rate(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
    1cf8:	b570      	push	{r4, r5, r6, lr}
    1cfa:	b082      	sub	sp, #8
    1cfc:	0005      	movs	r5, r0
    uint8_t err;
    uint8_t status;

    enable = !enable;
    1cfe:	424b      	negs	r3, r1
    1d00:	4159      	adcs	r1, r3
    1d02:	b2cc      	uxtb	r4, r1

    if (pHandle == NULL) /**< check handle */
    1d04:	2800      	cmp	r0, #0
    1d06:	d02c      	beq.n	1d62 <mcp23008_set_slew_rate+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1d08:	235d      	movs	r3, #93	; 0x5d
    1d0a:	5cc6      	ldrb	r6, [r0, r3]
    1d0c:	2e01      	cmp	r6, #1
    1d0e:	d002      	beq.n	1d16 <mcp23008_set_slew_rate+0x1e>
        return 3; /**< return error */
    1d10:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
        return 1;
    }
    return 0;
}
    1d12:	b002      	add	sp, #8
    1d14:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1d16:	3b5c      	subs	r3, #92	; 0x5c
    1d18:	466a      	mov	r2, sp
    1d1a:	3207      	adds	r2, #7
    1d1c:	2105      	movs	r1, #5
    1d1e:	f7ff fc9d 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1d22:	2800      	cmp	r0, #0
    1d24:	d116      	bne.n	1d54 <mcp23008_set_slew_rate+0x5c>
    status &= ~(1 << 4);
    1d26:	466b      	mov	r3, sp
    1d28:	1dda      	adds	r2, r3, #7
    1d2a:	7811      	ldrb	r1, [r2, #0]
    1d2c:	2310      	movs	r3, #16
    1d2e:	4399      	bics	r1, r3
    1d30:	000b      	movs	r3, r1
    status |= (enable << 4);
    1d32:	0121      	lsls	r1, r4, #4
    1d34:	4319      	orrs	r1, r3
    1d36:	7011      	strb	r1, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1d38:	2301      	movs	r3, #1
    1d3a:	2105      	movs	r1, #5
    1d3c:	0028      	movs	r0, r5
    1d3e:	f7ff fc6d 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1d42:	2800      	cmp	r0, #0
    1d44:	d0e5      	beq.n	1d12 <mcp23008_set_slew_rate+0x1a>
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
    1d46:	4908      	ldr	r1, [pc, #32]	; (1d68 <mcp23008_set_slew_rate+0x70>)
    1d48:	4479      	add	r1, pc
    1d4a:	0028      	movs	r0, r5
    1d4c:	f7ff fca4 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1d50:	0030      	movs	r0, r6
    1d52:	e7de      	b.n	1d12 <mcp23008_set_slew_rate+0x1a>
        a_mcp23008_print_error_msg(pHandle,"read expander reg");
    1d54:	4905      	ldr	r1, [pc, #20]	; (1d6c <mcp23008_set_slew_rate+0x74>)
    1d56:	4479      	add	r1, pc
    1d58:	0028      	movs	r0, r5
    1d5a:	f7ff fc9d 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1d5e:	0030      	movs	r0, r6
    1d60:	e7d7      	b.n	1d12 <mcp23008_set_slew_rate+0x1a>
        return 2; /**< return error */
    1d62:	2002      	movs	r0, #2
    1d64:	e7d5      	b.n	1d12 <mcp23008_set_slew_rate+0x1a>
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	00001ec8 	.word	0x00001ec8
    1d6c:	00001d9e 	.word	0x00001d9e

00001d70 <mcp23008_set_sequencial_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set sequential operation mode
 * @note    none
 */
uint8_t mcp23008_set_sequencial_mode(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	b082      	sub	sp, #8
    1d74:	0005      	movs	r5, r0
    uint8_t err;
    uint8_t status;

    enable = !enable;
    1d76:	424b      	negs	r3, r1
    1d78:	4159      	adcs	r1, r3
    1d7a:	b2cc      	uxtb	r4, r1

    if (pHandle == NULL) /**< check handle */
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d02c      	beq.n	1dda <mcp23008_set_sequencial_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1d80:	235d      	movs	r3, #93	; 0x5d
    1d82:	5cc6      	ldrb	r6, [r0, r3]
    1d84:	2e01      	cmp	r6, #1
    1d86:	d002      	beq.n	1d8e <mcp23008_set_sequencial_mode+0x1e>
        return 3; /**< return error */
    1d88:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
        return 1;
    }
    return 0;
}
    1d8a:	b002      	add	sp, #8
    1d8c:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1d8e:	3b5c      	subs	r3, #92	; 0x5c
    1d90:	466a      	mov	r2, sp
    1d92:	3207      	adds	r2, #7
    1d94:	2105      	movs	r1, #5
    1d96:	f7ff fc61 	bl	165c <a_mcp23008_i2c_read>
    if (err != 0) {
    1d9a:	2800      	cmp	r0, #0
    1d9c:	d116      	bne.n	1dcc <mcp23008_set_sequencial_mode+0x5c>
    status &= ~(1 << 5);
    1d9e:	466b      	mov	r3, sp
    1da0:	1dda      	adds	r2, r3, #7
    1da2:	7811      	ldrb	r1, [r2, #0]
    1da4:	2320      	movs	r3, #32
    1da6:	4399      	bics	r1, r3
    1da8:	000b      	movs	r3, r1
    status |= (enable << 5);
    1daa:	0161      	lsls	r1, r4, #5
    1dac:	4319      	orrs	r1, r3
    1dae:	7011      	strb	r1, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1db0:	2301      	movs	r3, #1
    1db2:	2105      	movs	r1, #5
    1db4:	0028      	movs	r0, r5
    1db6:	f7ff fc31 	bl	161c <a_mcp23008_i2c_write>
    if (err != 0) {
    1dba:	2800      	cmp	r0, #0
    1dbc:	d0e5      	beq.n	1d8a <mcp23008_set_sequencial_mode+0x1a>
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
    1dbe:	4908      	ldr	r1, [pc, #32]	; (1de0 <mcp23008_set_sequencial_mode+0x70>)
    1dc0:	4479      	add	r1, pc
    1dc2:	0028      	movs	r0, r5
    1dc4:	f7ff fc68 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1dc8:	0030      	movs	r0, r6
    1dca:	e7de      	b.n	1d8a <mcp23008_set_sequencial_mode+0x1a>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    1dcc:	4905      	ldr	r1, [pc, #20]	; (1de4 <mcp23008_set_sequencial_mode+0x74>)
    1dce:	4479      	add	r1, pc
    1dd0:	0028      	movs	r0, r5
    1dd2:	f7ff fc61 	bl	1698 <a_mcp23008_print_error_msg>
        return 1;
    1dd6:	0030      	movs	r0, r6
    1dd8:	e7d7      	b.n	1d8a <mcp23008_set_sequencial_mode+0x1a>
        return 2; /**< return error */
    1dda:	2002      	movs	r0, #2
    1ddc:	e7d5      	b.n	1d8a <mcp23008_set_sequencial_mode+0x1a>
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	00001e78 	.word	0x00001e78
    1de4:	00001d26 	.word	0x00001d26

00001de8 <mcp23008_info>:
 * @return     status code
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */
uint8_t mcp23008_info(mcp23008_handle_t *const pHandle) {
    1de8:	b510      	push	{r4, lr}
    1dea:	0004      	movs	r4, r0

    strncpy(pHandle->info.chip_name, CHIP_NAME, 10); /**< copy chip name */
    1dec:	301c      	adds	r0, #28
    1dee:	220a      	movs	r2, #10
    1df0:	490f      	ldr	r1, [pc, #60]	; (1e30 <mcp23008_info+0x48>)
    1df2:	4479      	add	r1, pc
    1df4:	f001 f81f 	bl	2e36 <strncpy>
    strncpy(pHandle->info.interface, INTERFACE, 5); /**< copy interface name */
    1df8:	0020      	movs	r0, r4
    1dfa:	303f      	adds	r0, #63	; 0x3f
    1dfc:	2205      	movs	r2, #5
    1dfe:	490d      	ldr	r1, [pc, #52]	; (1e34 <mcp23008_info+0x4c>)
    1e00:	4479      	add	r1, pc
    1e02:	f001 f818 	bl	2e36 <strncpy>
    strncpy(pHandle->info.manufacturer_name, MANUFACTURER_NAME, 25); /**< copy manufacturer name */
    1e06:	0020      	movs	r0, r4
    1e08:	3026      	adds	r0, #38	; 0x26
    1e0a:	2219      	movs	r2, #25
    1e0c:	490a      	ldr	r1, [pc, #40]	; (1e38 <mcp23008_info+0x50>)
    1e0e:	4479      	add	r1, pc
    1e10:	f001 f811 	bl	2e36 <strncpy>
    pHandle->info.supply_voltage_max_v = SUPPLY_VOLTAGE_MAX; /**< set minimal supply voltage */
    1e14:	4b09      	ldr	r3, [pc, #36]	; (1e3c <mcp23008_info+0x54>)
    1e16:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->info.supply_voltage_min_v = SUPPLY_VOLTAGE_MIN; /**< set maximum supply voltage */
    1e18:	4b09      	ldr	r3, [pc, #36]	; (1e40 <mcp23008_info+0x58>)
    1e1a:	6463      	str	r3, [r4, #68]	; 0x44
    pHandle->info.max_current_ma = MAX_CURRENT; /**< set maximum current */
    1e1c:	4b09      	ldr	r3, [pc, #36]	; (1e44 <mcp23008_info+0x5c>)
    1e1e:	64e3      	str	r3, [r4, #76]	; 0x4c
    pHandle->info.temperature_max = TEMPERATURE_MAX; /**< set minimal temperature */
    1e20:	4b09      	ldr	r3, [pc, #36]	; (1e48 <mcp23008_info+0x60>)
    1e22:	6563      	str	r3, [r4, #84]	; 0x54
    pHandle->info.temperature_min = TEMPERATURE_MIN; /**< set maximum temperature */
    1e24:	4b09      	ldr	r3, [pc, #36]	; (1e4c <mcp23008_info+0x64>)
    1e26:	6523      	str	r3, [r4, #80]	; 0x50
    pHandle->info.driver_version = DRIVER_VERSION; /**< set driver version */
    1e28:	4b09      	ldr	r3, [pc, #36]	; (1e50 <mcp23008_info+0x68>)
    1e2a:	65a3      	str	r3, [r4, #88]	; 0x58

    return 0; /**< success */
}
    1e2c:	2000      	movs	r0, #0
    1e2e:	bd10      	pop	{r4, pc}
    1e30:	00001e8e 	.word	0x00001e8e
    1e34:	00001e8c 	.word	0x00001e8c
    1e38:	00001e82 	.word	0x00001e82
    1e3c:	40b00000 	.word	0x40b00000
    1e40:	3e99999a 	.word	0x3e99999a
    1e44:	43160000 	.word	0x43160000
    1e48:	42fa0000 	.word	0x42fa0000
    1e4c:	c2200000 	.word	0xc2200000
    1e50:	447a0000 	.word	0x447a0000

00001e54 <mcp23008_basic_initialize>:
 * @return status code
 *          - 0 success
 *          - 1 initialize failed
 * @note    none
 */
uint8_t mcp23008_basic_initialize(mcp23008_address_pin_t addr_pin) {
    1e54:	b570      	push	{r4, r5, r6, lr}
    1e56:	b084      	sub	sp, #16
    1e58:	0006      	movs	r6, r0
    1e5a:	4d97      	ldr	r5, [pc, #604]	; (20b8 <STACK_SIZE+0xb8>)
    1e5c:	447d      	add	r5, pc

    volatile uint8_t err;
    volatile uint8_t index;

    /*link function*/
    DRIVER_MCP23008_LINK_INIT(&mcp23008_handle, mcp23008_handle_t);
    1e5e:	4c97      	ldr	r4, [pc, #604]	; (20bc <STACK_SIZE+0xbc>)
    1e60:	447c      	add	r4, pc
    1e62:	2260      	movs	r2, #96	; 0x60
    1e64:	2100      	movs	r1, #0
    1e66:	0020      	movs	r0, r4
    1e68:	f000 ffd6 	bl	2e18 <memset>
    DRIVER_MCP23008_LINK_I2C_INIT(&mcp23008_handle, mcp23008_interface_i2c_init);
    1e6c:	4b94      	ldr	r3, [pc, #592]	; (20c0 <STACK_SIZE+0xc0>)
    1e6e:	58eb      	ldr	r3, [r5, r3]
    1e70:	9301      	str	r3, [sp, #4]
    1e72:	6023      	str	r3, [r4, #0]
    DRIVER_MCP23008_LINK_I2C_DEINIT(&mcp23008_handle, mcp23008_interface_i2c_deinit);
    1e74:	4b93      	ldr	r3, [pc, #588]	; (20c4 <STACK_SIZE+0xc4>)
    1e76:	58eb      	ldr	r3, [r5, r3]
    1e78:	9301      	str	r3, [sp, #4]
    1e7a:	6063      	str	r3, [r4, #4]
    DRIVER_MCP23008_LINK_I2C_READ(&mcp23008_handle, mcp23008_interface_i2c_read);
    1e7c:	4b92      	ldr	r3, [pc, #584]	; (20c8 <STACK_SIZE+0xc8>)
    1e7e:	58eb      	ldr	r3, [r5, r3]
    1e80:	9301      	str	r3, [sp, #4]
    1e82:	60e3      	str	r3, [r4, #12]
    DRIVER_MCP23008_LINK_I2C_WRITE(&mcp23008_handle, mcp23008_interface_i2c_write);
    1e84:	4b91      	ldr	r3, [pc, #580]	; (20cc <STACK_SIZE+0xcc>)
    1e86:	58eb      	ldr	r3, [r5, r3]
    1e88:	9301      	str	r3, [sp, #4]
    1e8a:	60a3      	str	r3, [r4, #8]
    DRIVER_MCP23008_LINK_DELAY_MS(&mcp23008_handle, mcp23008_interface_delay_ms);
    1e8c:	4b90      	ldr	r3, [pc, #576]	; (20d0 <STACK_SIZE+0xd0>)
    1e8e:	58eb      	ldr	r3, [r5, r3]
    1e90:	9301      	str	r3, [sp, #4]
    1e92:	6123      	str	r3, [r4, #16]
    DRIVER_MCP23008_LINK_DEBUG_PRINT(&mcp23008_handle, mcp23008_interface_debug_print);
    1e94:	4b8f      	ldr	r3, [pc, #572]	; (20d4 <STACK_SIZE+0xd4>)
    1e96:	58eb      	ldr	r3, [r5, r3]
    1e98:	9301      	str	r3, [sp, #4]
    1e9a:	6163      	str	r3, [r4, #20]
    DRIVER_MCP23008_LINK_RECEIVE_CALLBACK(&mcp23008_handle, mcp23008_interface_receive_callback);
    1e9c:	4b8e      	ldr	r3, [pc, #568]	; (20d8 <STACK_SIZE+0xd8>)
    1e9e:	58eb      	ldr	r3, [r5, r3]
    1ea0:	9301      	str	r3, [sp, #4]
    1ea2:	61a3      	str	r3, [r4, #24]

    /*mcp23008 initialize*/
    err = mcp23008_init(&mcp23008_handle);
    1ea4:	0020      	movs	r0, r4
    1ea6:	f7ff fbff 	bl	16a8 <mcp23008_init>
    1eaa:	ab02      	add	r3, sp, #8
    1eac:	71d8      	strb	r0, [r3, #7]
    1eae:	3307      	adds	r3, #7
    if (err) {
    1eb0:	781b      	ldrb	r3, [r3, #0]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d004      	beq.n	1ec0 <mcp23008_basic_initialize+0x6c>
        return err;
    1eb6:	ab02      	add	r3, sp, #8
    1eb8:	79d8      	ldrb	r0, [r3, #7]
    1eba:	b2c0      	uxtb	r0, r0

    /* wait 10 ms */
    mcp23008_interface_delay_ms(10);

    return 0; /**< Initialize success */
}
    1ebc:	b004      	add	sp, #16
    1ebe:	bd70      	pop	{r4, r5, r6, pc}
    err = mcp23008_set_addr_pin(&mcp23008_handle, addr_pin);
    1ec0:	0031      	movs	r1, r6
    1ec2:	4886      	ldr	r0, [pc, #536]	; (20dc <STACK_SIZE+0xdc>)
    1ec4:	4478      	add	r0, pc
    1ec6:	f7ff fc47 	bl	1758 <mcp23008_set_addr_pin>
    1eca:	ab02      	add	r3, sp, #8
    1ecc:	71d8      	strb	r0, [r3, #7]
    1ece:	3307      	adds	r3, #7
    if (err) {
    1ed0:	781b      	ldrb	r3, [r3, #0]
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d003      	beq.n	1ede <mcp23008_basic_initialize+0x8a>
        return err;
    1ed6:	ab02      	add	r3, sp, #8
    1ed8:	79d8      	ldrb	r0, [r3, #7]
    1eda:	b2c0      	uxtb	r0, r0
    1edc:	e7ee      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_intrrupt_pin_output_level(&mcp23008_handle, MCP23008_interrupt_ACTIVE_LOW);
    1ede:	2100      	movs	r1, #0
    1ee0:	487f      	ldr	r0, [pc, #508]	; (20e0 <STACK_SIZE+0xe0>)
    1ee2:	4478      	add	r0, pc
    1ee4:	f7ff fe20 	bl	1b28 <mcp23008_set_intrrupt_pin_output_level>
    1ee8:	ab02      	add	r3, sp, #8
    1eea:	71d8      	strb	r0, [r3, #7]
    1eec:	3307      	adds	r3, #7
    if (err) {
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d003      	beq.n	1efc <mcp23008_basic_initialize+0xa8>
        return err;
    1ef4:	ab02      	add	r3, sp, #8
    1ef6:	79d8      	ldrb	r0, [r3, #7]
    1ef8:	b2c0      	uxtb	r0, r0
    1efa:	e7df      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_interrupt_pin_output_mode(&mcp23008_handle, MCP23008_interrupt_OPEN_DRAIN_OUTPUT);
    1efc:	2101      	movs	r1, #1
    1efe:	4879      	ldr	r0, [pc, #484]	; (20e4 <STACK_SIZE+0xe4>)
    1f00:	4478      	add	r0, pc
    1f02:	f7ff fe49 	bl	1b98 <mcp23008_set_interrupt_pin_output_mode>
    1f06:	ab02      	add	r3, sp, #8
    1f08:	71d8      	strb	r0, [r3, #7]
    1f0a:	3307      	adds	r3, #7
    if (err) {
    1f0c:	781b      	ldrb	r3, [r3, #0]
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d003      	beq.n	1f1a <mcp23008_basic_initialize+0xc6>
        return err;
    1f12:	ab02      	add	r3, sp, #8
    1f14:	79d8      	ldrb	r0, [r3, #7]
    1f16:	b2c0      	uxtb	r0, r0
    1f18:	e7d0      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_slew_rate(&mcp23008_handle, MCP23008_BOOL_FALSE);
    1f1a:	2100      	movs	r1, #0
    1f1c:	4872      	ldr	r0, [pc, #456]	; (20e8 <STACK_SIZE+0xe8>)
    1f1e:	4478      	add	r0, pc
    1f20:	f7ff feea 	bl	1cf8 <mcp23008_set_slew_rate>
    1f24:	ab02      	add	r3, sp, #8
    1f26:	71d8      	strb	r0, [r3, #7]
    1f28:	3307      	adds	r3, #7
    if (err) {
    1f2a:	781b      	ldrb	r3, [r3, #0]
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d003      	beq.n	1f38 <mcp23008_basic_initialize+0xe4>
        return err;
    1f30:	ab02      	add	r3, sp, #8
    1f32:	79d8      	ldrb	r0, [r3, #7]
    1f34:	b2c0      	uxtb	r0, r0
    1f36:	e7c1      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_sequencial_mode(&mcp23008_handle, MCP23008_BOOL_TRUE);
    1f38:	2101      	movs	r1, #1
    1f3a:	486c      	ldr	r0, [pc, #432]	; (20ec <STACK_SIZE+0xec>)
    1f3c:	4478      	add	r0, pc
    1f3e:	f7ff ff17 	bl	1d70 <mcp23008_set_sequencial_mode>
    1f42:	ab02      	add	r3, sp, #8
    1f44:	71d8      	strb	r0, [r3, #7]
    1f46:	3307      	adds	r3, #7
    if (err) {
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d11d      	bne.n	1f8a <mcp23008_basic_initialize+0x136>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1f4e:	2200      	movs	r2, #0
    1f50:	ab02      	add	r3, sp, #8
    1f52:	719a      	strb	r2, [r3, #6]
    1f54:	ab02      	add	r3, sp, #8
    1f56:	3306      	adds	r3, #6
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	b2db      	uxtb	r3, r3
    1f5c:	2b07      	cmp	r3, #7
    1f5e:	d81c      	bhi.n	1f9a <mcp23008_basic_initialize+0x146>
        err = mcp23008_set_ineterrupt_compare_mode(&mcp23008_handle, index, MCP23008_interrupt_COMP_TO_DEFAULT_VALUE);
    1f60:	ab02      	add	r3, sp, #8
    1f62:	7999      	ldrb	r1, [r3, #6]
    1f64:	b2c9      	uxtb	r1, r1
    1f66:	2201      	movs	r2, #1
    1f68:	4861      	ldr	r0, [pc, #388]	; (20f0 <STACK_SIZE+0xf0>)
    1f6a:	4478      	add	r0, pc
    1f6c:	f7ff fe4c 	bl	1c08 <mcp23008_set_ineterrupt_compare_mode>
    1f70:	ab02      	add	r3, sp, #8
    1f72:	71d8      	strb	r0, [r3, #7]
    1f74:	3307      	adds	r3, #7
        if (err) {
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d10a      	bne.n	1f92 <mcp23008_basic_initialize+0x13e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1f7c:	ab02      	add	r3, sp, #8
    1f7e:	1d9a      	adds	r2, r3, #6
    1f80:	799b      	ldrb	r3, [r3, #6]
    1f82:	3301      	adds	r3, #1
    1f84:	b2db      	uxtb	r3, r3
    1f86:	7013      	strb	r3, [r2, #0]
    1f88:	e7e4      	b.n	1f54 <mcp23008_basic_initialize+0x100>
        return err;
    1f8a:	ab02      	add	r3, sp, #8
    1f8c:	79d8      	ldrb	r0, [r3, #7]
    1f8e:	b2c0      	uxtb	r0, r0
    1f90:	e794      	b.n	1ebc <mcp23008_basic_initialize+0x68>
            return err;
    1f92:	ab02      	add	r3, sp, #8
    1f94:	79d8      	ldrb	r0, [r3, #7]
    1f96:	b2c0      	uxtb	r0, r0
    1f98:	e790      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1f9a:	2200      	movs	r2, #0
    1f9c:	ab02      	add	r3, sp, #8
    1f9e:	719a      	strb	r2, [r3, #6]
    1fa0:	ab02      	add	r3, sp, #8
    1fa2:	3306      	adds	r3, #6
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	b2db      	uxtb	r3, r3
    1fa8:	2b07      	cmp	r3, #7
    1faa:	d818      	bhi.n	1fde <mcp23008_basic_initialize+0x18a>
        err = mcp23008_set_pin_input_polarity_mode(&mcp23008_handle, index, MCP23008_POLARITY_SAME_LOGIC_STATE);
    1fac:	ab02      	add	r3, sp, #8
    1fae:	7999      	ldrb	r1, [r3, #6]
    1fb0:	b2c9      	uxtb	r1, r1
    1fb2:	2200      	movs	r2, #0
    1fb4:	484f      	ldr	r0, [pc, #316]	; (20f4 <STACK_SIZE+0xf4>)
    1fb6:	4478      	add	r0, pc
    1fb8:	f7ff fcea 	bl	1990 <mcp23008_set_pin_input_polarity_mode>
    1fbc:	ab02      	add	r3, sp, #8
    1fbe:	71d8      	strb	r0, [r3, #7]
    1fc0:	3307      	adds	r3, #7
        if (err) {
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d106      	bne.n	1fd6 <mcp23008_basic_initialize+0x182>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1fc8:	ab02      	add	r3, sp, #8
    1fca:	1d9a      	adds	r2, r3, #6
    1fcc:	799b      	ldrb	r3, [r3, #6]
    1fce:	3301      	adds	r3, #1
    1fd0:	b2db      	uxtb	r3, r3
    1fd2:	7013      	strb	r3, [r2, #0]
    1fd4:	e7e4      	b.n	1fa0 <mcp23008_basic_initialize+0x14c>
            return err;
    1fd6:	ab02      	add	r3, sp, #8
    1fd8:	79d8      	ldrb	r0, [r3, #7]
    1fda:	b2c0      	uxtb	r0, r0
    1fdc:	e76e      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1fde:	2200      	movs	r2, #0
    1fe0:	ab02      	add	r3, sp, #8
    1fe2:	719a      	strb	r2, [r3, #6]
    1fe4:	ab02      	add	r3, sp, #8
    1fe6:	3306      	adds	r3, #6
    1fe8:	781b      	ldrb	r3, [r3, #0]
    1fea:	b2db      	uxtb	r3, r3
    1fec:	2b07      	cmp	r3, #7
    1fee:	d81a      	bhi.n	2026 <STACK_SIZE+0x26>
        err = (mcp23008_set_pin_pullup_mode(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
    1ff0:	ab02      	add	r3, sp, #8
    1ff2:	7999      	ldrb	r1, [r3, #6]
    1ff4:	b2c9      	uxtb	r1, r1
    1ff6:	2200      	movs	r2, #0
    1ff8:	483f      	ldr	r0, [pc, #252]	; (20f8 <STACK_SIZE+0xf8>)
    1ffa:	4478      	add	r0, pc
    1ffc:	f7ff fc8c 	bl	1918 <mcp23008_set_pin_pullup_mode>
    2000:	1e43      	subs	r3, r0, #1
    2002:	4198      	sbcs	r0, r3
    2004:	b2c0      	uxtb	r0, r0
    2006:	ab02      	add	r3, sp, #8
    2008:	1dda      	adds	r2, r3, #7
    200a:	71d8      	strb	r0, [r3, #7]
        if (err) {
    200c:	79db      	ldrb	r3, [r3, #7]
    200e:	2b00      	cmp	r3, #0
    2010:	d106      	bne.n	2020 <STACK_SIZE+0x20>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    2012:	ab02      	add	r3, sp, #8
    2014:	1d9a      	adds	r2, r3, #6
    2016:	799b      	ldrb	r3, [r3, #6]
    2018:	3301      	adds	r3, #1
    201a:	b2db      	uxtb	r3, r3
    201c:	7013      	strb	r3, [r2, #0]
    201e:	e7e1      	b.n	1fe4 <mcp23008_basic_initialize+0x190>
            return err;
    2020:	7810      	ldrb	r0, [r2, #0]
    2022:	b2c0      	uxtb	r0, r0
    2024:	e74a      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    2026:	2200      	movs	r2, #0
    2028:	ab02      	add	r3, sp, #8
    202a:	719a      	strb	r2, [r3, #6]
    202c:	ab02      	add	r3, sp, #8
    202e:	3306      	adds	r3, #6
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	b2db      	uxtb	r3, r3
    2034:	2b07      	cmp	r3, #7
    2036:	d81a      	bhi.n	206e <STACK_SIZE+0x6e>
        err = (mcp23008_set_pin_interrupt(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
    2038:	ab02      	add	r3, sp, #8
    203a:	7999      	ldrb	r1, [r3, #6]
    203c:	b2c9      	uxtb	r1, r1
    203e:	2200      	movs	r2, #0
    2040:	482e      	ldr	r0, [pc, #184]	; (20fc <STACK_SIZE+0xfc>)
    2042:	4478      	add	r0, pc
    2044:	f7ff fce0 	bl	1a08 <mcp23008_set_pin_interrupt>
    2048:	1e43      	subs	r3, r0, #1
    204a:	4198      	sbcs	r0, r3
    204c:	b2c0      	uxtb	r0, r0
    204e:	ab02      	add	r3, sp, #8
    2050:	1dda      	adds	r2, r3, #7
    2052:	71d8      	strb	r0, [r3, #7]
        if (err) {
    2054:	79db      	ldrb	r3, [r3, #7]
    2056:	2b00      	cmp	r3, #0
    2058:	d106      	bne.n	2068 <STACK_SIZE+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    205a:	ab02      	add	r3, sp, #8
    205c:	1d9a      	adds	r2, r3, #6
    205e:	799b      	ldrb	r3, [r3, #6]
    2060:	3301      	adds	r3, #1
    2062:	b2db      	uxtb	r3, r3
    2064:	7013      	strb	r3, [r2, #0]
    2066:	e7e1      	b.n	202c <STACK_SIZE+0x2c>
            return err;
    2068:	7810      	ldrb	r0, [r2, #0]
    206a:	b2c0      	uxtb	r0, r0
    206c:	e726      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    206e:	2200      	movs	r2, #0
    2070:	ab02      	add	r3, sp, #8
    2072:	719a      	strb	r2, [r3, #6]
    2074:	ab02      	add	r3, sp, #8
    2076:	3306      	adds	r3, #6
    2078:	781b      	ldrb	r3, [r3, #0]
    207a:	b2db      	uxtb	r3, r3
    207c:	2b07      	cmp	r3, #7
    207e:	d816      	bhi.n	20ae <STACK_SIZE+0xae>
        err = (mcp23008_clear_interrupt_flag(&mcp23008_handle/*, index, MCP23008_BOOL_FALSE*/) != 0);
    2080:	481f      	ldr	r0, [pc, #124]	; (2100 <STACK_SIZE+0x100>)
    2082:	4478      	add	r0, pc
    2084:	f7ff fd2a 	bl	1adc <mcp23008_clear_interrupt_flag>
    2088:	1e43      	subs	r3, r0, #1
    208a:	4198      	sbcs	r0, r3
    208c:	b2c0      	uxtb	r0, r0
    208e:	ab02      	add	r3, sp, #8
    2090:	1dda      	adds	r2, r3, #7
    2092:	71d8      	strb	r0, [r3, #7]
        if (err) {
    2094:	79db      	ldrb	r3, [r3, #7]
    2096:	2b00      	cmp	r3, #0
    2098:	d106      	bne.n	20a8 <STACK_SIZE+0xa8>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    209a:	ab02      	add	r3, sp, #8
    209c:	1d9a      	adds	r2, r3, #6
    209e:	799b      	ldrb	r3, [r3, #6]
    20a0:	3301      	adds	r3, #1
    20a2:	b2db      	uxtb	r3, r3
    20a4:	7013      	strb	r3, [r2, #0]
    20a6:	e7e5      	b.n	2074 <STACK_SIZE+0x74>
            return err;
    20a8:	7810      	ldrb	r0, [r2, #0]
    20aa:	b2c0      	uxtb	r0, r0
    20ac:	e706      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    mcp23008_interface_delay_ms(10);
    20ae:	200a      	movs	r0, #10
    20b0:	f000 f8c8 	bl	2244 <mcp23008_interface_delay_ms>
    return 0; /**< Initialize success */
    20b4:	2000      	movs	r0, #0
    20b6:	e701      	b.n	1ebc <mcp23008_basic_initialize+0x68>
    20b8:	00001fc8 	.word	0x00001fc8
    20bc:	1fffe290 	.word	0x1fffe290
    20c0:	0000003c 	.word	0x0000003c
    20c4:	00000000 	.word	0x00000000
    20c8:	00000014 	.word	0x00000014
    20cc:	00000038 	.word	0x00000038
    20d0:	00000024 	.word	0x00000024
    20d4:	00000020 	.word	0x00000020
    20d8:	0000002c 	.word	0x0000002c
    20dc:	1fffe22c 	.word	0x1fffe22c
    20e0:	1fffe20e 	.word	0x1fffe20e
    20e4:	1fffe1f0 	.word	0x1fffe1f0
    20e8:	1fffe1d2 	.word	0x1fffe1d2
    20ec:	1fffe1b4 	.word	0x1fffe1b4
    20f0:	1fffe186 	.word	0x1fffe186
    20f4:	1fffe13a 	.word	0x1fffe13a
    20f8:	1fffe0f6 	.word	0x1fffe0f6
    20fc:	1fffe0ae 	.word	0x1fffe0ae
    2100:	1fffe06e 	.word	0x1fffe06e

00002104 <mcp23008_basic_gpio_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_gpio_write(mcp23008_gpio_port_t GPIOx, mcp23008_port_logic_level_t level) {
    2104:	b510      	push	{r4, lr}
    2106:	000a      	movs	r2, r1

    err = mcp23008_pin_write(&mcp23008_handle, GPIOx, level);
    2108:	0001      	movs	r1, r0
    210a:	4802      	ldr	r0, [pc, #8]	; (2114 <mcp23008_basic_gpio_write+0x10>)
    210c:	4478      	add	r0, pc
    210e:	f7ff fb6f 	bl	17f0 <mcp23008_pin_write>
    return err; /**< return error code */
}
    2112:	bd10      	pop	{r4, pc}
    2114:	1fffdfe4 	.word	0x1fffdfe4

00002118 <mcp23008_basic_gpio_set_direction>:
uint8_t mcp23008_basic_gpio_set_direction(mcp23008_gpio_port_t GPIOx, mcp23008_port_mode_t direction) {
    2118:	b510      	push	{r4, lr}
    211a:	0004      	movs	r4, r0
    if (direction == MCP23008_INPUT_PULLUP) {
    211c:	2910      	cmp	r1, #16
    211e:	d009      	beq.n	2134 <mcp23008_basic_gpio_set_direction+0x1c>
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, direction) != 0) {
    2120:	000a      	movs	r2, r1
    2122:	0001      	movs	r1, r0
    2124:	4814      	ldr	r0, [pc, #80]	; (2178 <mcp23008_basic_gpio_set_direction+0x60>)
    2126:	4478      	add	r0, pc
    2128:	f7ff fb26 	bl	1778 <mcp23008_set_pin_mode>
    212c:	1e04      	subs	r4, r0, #0
    212e:	d01b      	beq.n	2168 <mcp23008_basic_gpio_set_direction+0x50>
            return 1; /**< failed to execute routine */
    2130:	2001      	movs	r0, #1
    2132:	e01f      	b.n	2174 <mcp23008_basic_gpio_set_direction+0x5c>
        if (mcp23008_set_pin_pullup_mode(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE) != 0) {
    2134:	2201      	movs	r2, #1
    2136:	0001      	movs	r1, r0
    2138:	4810      	ldr	r0, [pc, #64]	; (217c <mcp23008_basic_gpio_set_direction+0x64>)
    213a:	4478      	add	r0, pc
    213c:	f7ff fbec 	bl	1918 <mcp23008_set_pin_pullup_mode>
    2140:	2800      	cmp	r0, #0
    2142:	d001      	beq.n	2148 <mcp23008_basic_gpio_set_direction+0x30>
            return 1; /**< failed to execute routine */
    2144:	2001      	movs	r0, #1
    2146:	e015      	b.n	2174 <mcp23008_basic_gpio_set_direction+0x5c>
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, MCP23008_INPUT) != 0) {
    2148:	2201      	movs	r2, #1
    214a:	0021      	movs	r1, r4
    214c:	480c      	ldr	r0, [pc, #48]	; (2180 <mcp23008_basic_gpio_set_direction+0x68>)
    214e:	4478      	add	r0, pc
    2150:	f7ff fb12 	bl	1778 <mcp23008_set_pin_mode>
    2154:	2800      	cmp	r0, #0
    2156:	d009      	beq.n	216c <mcp23008_basic_gpio_set_direction+0x54>
            return 1; /**< failed to execute routine */
    2158:	2001      	movs	r0, #1
    215a:	e00b      	b.n	2174 <mcp23008_basic_gpio_set_direction+0x5c>
            mcp23008_basic_gpio_write(index, MCP23008_GPIO_LOW);
    215c:	2100      	movs	r1, #0
    215e:	0020      	movs	r0, r4
    2160:	f7ff ffd0 	bl	2104 <mcp23008_basic_gpio_write>
        for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) /**< clear port after setting the direction */
    2164:	3401      	adds	r4, #1
    2166:	b2e4      	uxtb	r4, r4
    2168:	2c07      	cmp	r4, #7
    216a:	d9f7      	bls.n	215c <mcp23008_basic_gpio_set_direction+0x44>
    mcp23008_interface_delay_ms(50);
    216c:	2032      	movs	r0, #50	; 0x32
    216e:	f000 f869 	bl	2244 <mcp23008_interface_delay_ms>
    return 0; /**< success */
    2172:	2000      	movs	r0, #0
}
    2174:	bd10      	pop	{r4, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	1fffdfca 	.word	0x1fffdfca
    217c:	1fffdfb6 	.word	0x1fffdfb6
    2180:	1fffdfa2 	.word	0x1fffdfa2

00002184 <mcp23008_basic_pin_write_all>:
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_basic_pin_write_all(mcp23008_port_logic_level_t logic_level)
{
    2184:	b510      	push	{r4, lr}
    2186:	0001      	movs	r1, r0
    err = mcp23008_pin_write_all(&mcp23008_handle, logic_level);
    2188:	4802      	ldr	r0, [pc, #8]	; (2194 <mcp23008_basic_pin_write_all+0x10>)
    218a:	4478      	add	r0, pc
    218c:	f7ff fb6c 	bl	1868 <mcp23008_pin_write_all>
    return err; /**< return error code */
}
    2190:	bd10      	pop	{r4, pc}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	1fffdf66 	.word	0x1fffdf66

00002198 <mcp23008_basic_gpio_read>:
 * @brief basic example to read gpio port
 * @param[in] GPIOx is the gpio port to read
 * @return GPIO read status (pin level)
 * @note    none
 */
uint8_t mcp23008_basic_gpio_read(mcp23008_gpio_port_t GPIOx) {
    2198:	b500      	push	{lr}
    219a:	b083      	sub	sp, #12
    219c:	0001      	movs	r1, r0

    volatile uint8_t status;
    err = mcp23008_pin_read(&mcp23008_handle, GPIOx, (int *) &status);
    219e:	466b      	mov	r3, sp
    21a0:	1dda      	adds	r2, r3, #7
    21a2:	4805      	ldr	r0, [pc, #20]	; (21b8 <mcp23008_basic_gpio_read+0x20>)
    21a4:	4478      	add	r0, pc
    21a6:	f7ff fb89 	bl	18bc <mcp23008_pin_read>
    if(err != 0)
    21aa:	2800      	cmp	r0, #0
    21ac:	d102      	bne.n	21b4 <mcp23008_basic_gpio_read+0x1c>
    {
       return err;
    }
    return status; /**< success */
    21ae:	466b      	mov	r3, sp
    21b0:	79d8      	ldrb	r0, [r3, #7]
    21b2:	b2c0      	uxtb	r0, r0
}
    21b4:	b003      	add	sp, #12
    21b6:	bd00      	pop	{pc}
    21b8:	1fffdf4c 	.word	0x1fffdf4c

000021bc <mcp23008_basic_gpio_toggle>:
 * @return status code
 *          - 0 success
 *          - 1 failed to toggle
 * @note    none
 */
uint8_t mcp23008_basic_gpio_toggle(mcp23008_gpio_port_t GPIOx) {
    21bc:	b510      	push	{r4, lr}
    21be:	0004      	movs	r4, r0

   err = mcp23008_basic_gpio_write(GPIOx, !mcp23008_basic_gpio_read(GPIOx));
    21c0:	f7ff ffea 	bl	2198 <mcp23008_basic_gpio_read>
    21c4:	4241      	negs	r1, r0
    21c6:	4141      	adcs	r1, r0
    21c8:	b2c9      	uxtb	r1, r1
    21ca:	0020      	movs	r0, r4
    21cc:	f7ff ff9a 	bl	2104 <mcp23008_basic_gpio_write>
   return err; /**< return error code */
}
    21d0:	bd10      	pop	{r4, pc}
	...

000021d4 <mcp23008_basic_interrupt_enable>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_interrupt_enable(mcp23008_gpio_port_t GPIOx, mcp23008_interrupt_default_value_t edge_select) {
    21d4:	b570      	push	{r4, r5, r6, lr}
    21d6:	0004      	movs	r4, r0
    21d8:	000d      	movs	r5, r1

    err = mcp23008_set_pin_interrupt(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE);
    21da:	2201      	movs	r2, #1
    21dc:	0001      	movs	r1, r0
    21de:	4807      	ldr	r0, [pc, #28]	; (21fc <mcp23008_basic_interrupt_enable+0x28>)
    21e0:	4478      	add	r0, pc
    21e2:	f7ff fc11 	bl	1a08 <mcp23008_set_pin_interrupt>
    if(err)
    21e6:	2800      	cmp	r0, #0
    21e8:	d000      	beq.n	21ec <mcp23008_basic_interrupt_enable+0x18>
    {
        return err; /**< failed to execute routine */
    }
    err = mcp23008_set_default_compare_value(&mcp23008_handle, GPIOx, edge_select);
    return err; /**< return error code */
}
    21ea:	bd70      	pop	{r4, r5, r6, pc}
    err = mcp23008_set_default_compare_value(&mcp23008_handle, GPIOx, edge_select);
    21ec:	002a      	movs	r2, r5
    21ee:	0021      	movs	r1, r4
    21f0:	4803      	ldr	r0, [pc, #12]	; (2200 <mcp23008_basic_interrupt_enable+0x2c>)
    21f2:	4478      	add	r0, pc
    21f4:	f7ff fd44 	bl	1c80 <mcp23008_set_default_compare_value>
    return err; /**< return error code */
    21f8:	e7f7      	b.n	21ea <mcp23008_basic_interrupt_enable+0x16>
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	1fffdf10 	.word	0x1fffdf10
    2200:	1fffdefe 	.word	0x1fffdefe

00002204 <mcp23008_basic_interrupt_disable>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_interrupt_disable(mcp23008_gpio_port_t GPIOx) {
    2204:	b510      	push	{r4, lr}
    2206:	0001      	movs	r1, r0

   err = mcp23008_set_pin_interrupt(&mcp23008_handle, GPIOx, MCP23008_BOOL_FALSE);
    2208:	2200      	movs	r2, #0
    220a:	4802      	ldr	r0, [pc, #8]	; (2214 <mcp23008_basic_interrupt_disable+0x10>)
    220c:	4478      	add	r0, pc
    220e:	f7ff fbfb 	bl	1a08 <mcp23008_set_pin_interrupt>
   return err; /**< return error code */

}
    2212:	bd10      	pop	{r4, pc}
    2214:	1fffdee4 	.word	0x1fffdee4

00002218 <mcp23008_basic_clr_interrupt_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_clr_interrupt_flag(void) {
    2218:	b510      	push	{r4, lr}
   err = mcp23008_clear_interrupt_flag(&mcp23008_handle/*, GPIOx, MCP23008_interrupt_CLEAR*/);
    221a:	4802      	ldr	r0, [pc, #8]	; (2224 <mcp23008_basic_clr_interrupt_flag+0xc>)
    221c:	4478      	add	r0, pc
    221e:	f7ff fc5d 	bl	1adc <mcp23008_clear_interrupt_flag>
   return err; /**< return error code */
}
    2222:	bd10      	pop	{r4, pc}
    2224:	1fffded4 	.word	0x1fffded4

00002228 <mcp23008_basic_get_interrupt_flag>:
 * @param[in] GPIOx is the gpio port to clear interrupt flag
 * @param[out] *flag_status point to the interrupt flag status
 * @return interrupt status flag
 * @note    none
 */
uint8_t mcp23008_basic_get_interrupt_flag(mcp23008_gpio_port_t GPIOx, uint8_t *flag_status) {
    2228:	b510      	push	{r4, lr}
    222a:	000a      	movs	r2, r1

    err = mcp23008_get_interrupt_flag(&mcp23008_handle, GPIOx, (uint8_t *) flag_status);
    222c:	0001      	movs	r1, r0
    222e:	4802      	ldr	r0, [pc, #8]	; (2238 <mcp23008_basic_get_interrupt_flag+0x10>)
    2230:	4478      	add	r0, pc
    2232:	f7ff fc25 	bl	1a80 <mcp23008_get_interrupt_flag>
    return err; /**< return error code */
}
    2236:	bd10      	pop	{r4, pc}
    2238:	1fffdec0 	.word	0x1fffdec0

0000223c <mcp23008_interface_i2c_init>:
    /*call your i2c initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
    223c:	2000      	movs	r0, #0
    223e:	4770      	bx	lr

00002240 <mcp23008_interface_i2c_deinit>:
    /*call your i2c de-initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
    2240:	2000      	movs	r0, #0
    2242:	4770      	bx	lr

00002244 <mcp23008_interface_delay_ms>:
/**
 * @brief     interface delay ms
 * @param[in] U32Ms
 * @note      none
 */
void mcp23008_interface_delay_ms(uint32_t U32Ms){
    2244:	b510      	push	{r4, lr}
    /*call your delay function here*/
    /*user code begin */
	delay_ms(U32Ms);
    2246:	f7fe f8fb 	bl	440 <delay_ms>
    /*user code end*/
}
    224a:	bd10      	pop	{r4, pc}

0000224c <mcp23008_interface_debug_print>:
/**
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp23008_interface_debug_print(const char *const fmt, ...) {
    224c:	b40f      	push	{r0, r1, r2, r3}
    224e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2250:	b0c3      	sub	sp, #268	; 0x10c
    2252:	ad48      	add	r5, sp, #288	; 0x120
    2254:	cd80      	ldmia	r5!, {r7}
#ifdef MCP23008_DEBUG_MODE
    volatile char str[256];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char)*256);
    2256:	2680      	movs	r6, #128	; 0x80
    2258:	0076      	lsls	r6, r6, #1
    225a:	0032      	movs	r2, r6
    225c:	2100      	movs	r1, #0
    225e:	ac02      	add	r4, sp, #8
    2260:	0020      	movs	r0, r4
    2262:	f000 fdd9 	bl	2e18 <memset>
    va_start(args, fmt);
    2266:	9500      	str	r5, [sp, #0]
    vsnprintf((char *) str, 256, (char const *) fmt, args);
    2268:	002b      	movs	r3, r5
    226a:	003a      	movs	r2, r7
    226c:	0031      	movs	r1, r6
    226e:	0020      	movs	r0, r4
    2270:	f000 fe22 	bl	2eb8 <vsniprintf>
    va_end(args);

    len = strlen((char *) str);
    2274:	0020      	movs	r0, r4
    2276:	f000 fdd7 	bl	2e28 <strlen>
    227a:	b2c0      	uxtb	r0, r0
    227c:	466b      	mov	r3, sp
    227e:	71d8      	strb	r0, [r3, #7]
//    EUSART1_Write_Text((const char *) str, len);
    (void)print((uint8_t *)str, len);
    2280:	79d9      	ldrb	r1, [r3, #7]
    2282:	b2c9      	uxtb	r1, r1
    2284:	0020      	movs	r0, r4
    2286:	f7ff f959 	bl	153c <print>

    /*user code end*/
#endif
}
    228a:	b043      	add	sp, #268	; 0x10c
    228c:	bcf0      	pop	{r4, r5, r6, r7}
    228e:	bc08      	pop	{r3}
    2290:	b004      	add	sp, #16
    2292:	4718      	bx	r3

00002294 <mcp23008_interface_i2c_read>:
uint8_t mcp23008_interface_i2c_read(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
    2294:	b510      	push	{r4, lr}
 if(i2c_read(u8Addr, pBuf, u8Length) !=  0)
    2296:	f7ff f96d 	bl	1574 <i2c_read>
    229a:	2800      	cmp	r0, #0
    229c:	d100      	bne.n	22a0 <mcp23008_interface_i2c_read+0xc>
}
    229e:	bd10      	pop	{r4, pc}
	 mcp23008_interface_debug_print("i2c write failed, check the i2c address or wiring\n");
    22a0:	4802      	ldr	r0, [pc, #8]	; (22ac <mcp23008_interface_i2c_read+0x18>)
    22a2:	4478      	add	r0, pc
    22a4:	f7ff ffd2 	bl	224c <mcp23008_interface_debug_print>
	 return 1;
    22a8:	2001      	movs	r0, #1
    22aa:	e7f8      	b.n	229e <mcp23008_interface_i2c_read+0xa>
    22ac:	00001a06 	.word	0x00001a06

000022b0 <mcp23008_interface_i2c_write>:
uint8_t mcp23008_interface_i2c_write(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
    22b0:	b510      	push	{r4, lr}
    if(i2c_write(u8Addr, pBuf, u8Length) !=  0)
    22b2:	f7ff f983 	bl	15bc <i2c_write>
    22b6:	2800      	cmp	r0, #0
    22b8:	d100      	bne.n	22bc <mcp23008_interface_i2c_write+0xc>
}
    22ba:	bd10      	pop	{r4, pc}
	    mcp23008_interface_debug_print("i2c write failed, check the i2c address or wiring\n");
    22bc:	4802      	ldr	r0, [pc, #8]	; (22c8 <mcp23008_interface_i2c_write+0x18>)
    22be:	4478      	add	r0, pc
    22c0:	f7ff ffc4 	bl	224c <mcp23008_interface_debug_print>
	    return 1;
    22c4:	2001      	movs	r0, #1
    22c6:	e7f8      	b.n	22ba <mcp23008_interface_i2c_write+0xa>
    22c8:	000019ea 	.word	0x000019ea

000022cc <mcp23008_interface_receive_callback>:
/**
 * @brief     interface receive callback
 * @param[in] type is the interrupt type
 * @note      none
 */
void mcp23008_interface_receive_callback(uint8_t type) {
    22cc:	b510      	push	{r4, lr}
    /*call your interrupt callback function here*/
    /*user code begin */
    switch (type) {
    22ce:	2807      	cmp	r0, #7
    22d0:	d813      	bhi.n	22fa <mcp23008_interface_receive_callback+0x2e>
    22d2:	f000 f827 	bl	2324 <__gnu_thumb1_case_uqi>
    22d6:	0b04      	.short	0x0b04
    22d8:	0a0a0a0a 	.word	0x0a0a0a0a
    22dc:	0a0a      	.short	0x0a0a
        case MCP23008_GPIO_PIN_0:
        {
            mcp23008_interface_debug_print("mcp23008: GP0 interrupt\n");
    22de:	4809      	ldr	r0, [pc, #36]	; (2304 <mcp23008_interface_receive_callback+0x38>)
    22e0:	4478      	add	r0, pc
    22e2:	f7ff ffb3 	bl	224c <mcp23008_interface_debug_print>
			gpio_toggle_pin_blue();
    22e6:	f7ff f993 	bl	1610 <gpio_toggle_pin_blue>
            break;
    }

    /*user code end*/

}
    22ea:	bd10      	pop	{r4, pc}
            mcp23008_interface_debug_print("mcp23008: GP1 interrupt\n");
    22ec:	4806      	ldr	r0, [pc, #24]	; (2308 <mcp23008_interface_receive_callback+0x3c>)
    22ee:	4478      	add	r0, pc
    22f0:	f7ff ffac 	bl	224c <mcp23008_interface_debug_print>
			gpio_toggle_pin_green();
    22f4:	f7ff f986 	bl	1604 <gpio_toggle_pin_green>
            break;
    22f8:	e7f7      	b.n	22ea <mcp23008_interface_receive_callback+0x1e>
            mcp23008_interface_debug_print("mcp23008:false interrupt t\n");
    22fa:	4804      	ldr	r0, [pc, #16]	; (230c <mcp23008_interface_receive_callback+0x40>)
    22fc:	4478      	add	r0, pc
    22fe:	f7ff ffa5 	bl	224c <mcp23008_interface_debug_print>
}
    2302:	e7f2      	b.n	22ea <mcp23008_interface_receive_callback+0x1e>
    2304:	000019fc 	.word	0x000019fc
    2308:	00001a0a 	.word	0x00001a0a
    230c:	00001a18 	.word	0x00001a18

00002310 <__gnu_thumb1_case_sqi>:
    2310:	b402      	push	{r1}
    2312:	4671      	mov	r1, lr
    2314:	0849      	lsrs	r1, r1, #1
    2316:	0049      	lsls	r1, r1, #1
    2318:	5609      	ldrsb	r1, [r1, r0]
    231a:	0049      	lsls	r1, r1, #1
    231c:	448e      	add	lr, r1
    231e:	bc02      	pop	{r1}
    2320:	4770      	bx	lr
    2322:	46c0      	nop			; (mov r8, r8)

00002324 <__gnu_thumb1_case_uqi>:
    2324:	b402      	push	{r1}
    2326:	4671      	mov	r1, lr
    2328:	0849      	lsrs	r1, r1, #1
    232a:	0049      	lsls	r1, r1, #1
    232c:	5c09      	ldrb	r1, [r1, r0]
    232e:	0049      	lsls	r1, r1, #1
    2330:	448e      	add	lr, r1
    2332:	bc02      	pop	{r1}
    2334:	4770      	bx	lr
    2336:	46c0      	nop			; (mov r8, r8)

00002338 <__udivsi3>:
    2338:	2200      	movs	r2, #0
    233a:	0843      	lsrs	r3, r0, #1
    233c:	428b      	cmp	r3, r1
    233e:	d374      	bcc.n	242a <__udivsi3+0xf2>
    2340:	0903      	lsrs	r3, r0, #4
    2342:	428b      	cmp	r3, r1
    2344:	d35f      	bcc.n	2406 <__udivsi3+0xce>
    2346:	0a03      	lsrs	r3, r0, #8
    2348:	428b      	cmp	r3, r1
    234a:	d344      	bcc.n	23d6 <__udivsi3+0x9e>
    234c:	0b03      	lsrs	r3, r0, #12
    234e:	428b      	cmp	r3, r1
    2350:	d328      	bcc.n	23a4 <__udivsi3+0x6c>
    2352:	0c03      	lsrs	r3, r0, #16
    2354:	428b      	cmp	r3, r1
    2356:	d30d      	bcc.n	2374 <__udivsi3+0x3c>
    2358:	22ff      	movs	r2, #255	; 0xff
    235a:	0209      	lsls	r1, r1, #8
    235c:	ba12      	rev	r2, r2
    235e:	0c03      	lsrs	r3, r0, #16
    2360:	428b      	cmp	r3, r1
    2362:	d302      	bcc.n	236a <__udivsi3+0x32>
    2364:	1212      	asrs	r2, r2, #8
    2366:	0209      	lsls	r1, r1, #8
    2368:	d065      	beq.n	2436 <__udivsi3+0xfe>
    236a:	0b03      	lsrs	r3, r0, #12
    236c:	428b      	cmp	r3, r1
    236e:	d319      	bcc.n	23a4 <__udivsi3+0x6c>
    2370:	e000      	b.n	2374 <__udivsi3+0x3c>
    2372:	0a09      	lsrs	r1, r1, #8
    2374:	0bc3      	lsrs	r3, r0, #15
    2376:	428b      	cmp	r3, r1
    2378:	d301      	bcc.n	237e <__udivsi3+0x46>
    237a:	03cb      	lsls	r3, r1, #15
    237c:	1ac0      	subs	r0, r0, r3
    237e:	4152      	adcs	r2, r2
    2380:	0b83      	lsrs	r3, r0, #14
    2382:	428b      	cmp	r3, r1
    2384:	d301      	bcc.n	238a <__udivsi3+0x52>
    2386:	038b      	lsls	r3, r1, #14
    2388:	1ac0      	subs	r0, r0, r3
    238a:	4152      	adcs	r2, r2
    238c:	0b43      	lsrs	r3, r0, #13
    238e:	428b      	cmp	r3, r1
    2390:	d301      	bcc.n	2396 <__udivsi3+0x5e>
    2392:	034b      	lsls	r3, r1, #13
    2394:	1ac0      	subs	r0, r0, r3
    2396:	4152      	adcs	r2, r2
    2398:	0b03      	lsrs	r3, r0, #12
    239a:	428b      	cmp	r3, r1
    239c:	d301      	bcc.n	23a2 <__udivsi3+0x6a>
    239e:	030b      	lsls	r3, r1, #12
    23a0:	1ac0      	subs	r0, r0, r3
    23a2:	4152      	adcs	r2, r2
    23a4:	0ac3      	lsrs	r3, r0, #11
    23a6:	428b      	cmp	r3, r1
    23a8:	d301      	bcc.n	23ae <__udivsi3+0x76>
    23aa:	02cb      	lsls	r3, r1, #11
    23ac:	1ac0      	subs	r0, r0, r3
    23ae:	4152      	adcs	r2, r2
    23b0:	0a83      	lsrs	r3, r0, #10
    23b2:	428b      	cmp	r3, r1
    23b4:	d301      	bcc.n	23ba <__udivsi3+0x82>
    23b6:	028b      	lsls	r3, r1, #10
    23b8:	1ac0      	subs	r0, r0, r3
    23ba:	4152      	adcs	r2, r2
    23bc:	0a43      	lsrs	r3, r0, #9
    23be:	428b      	cmp	r3, r1
    23c0:	d301      	bcc.n	23c6 <__udivsi3+0x8e>
    23c2:	024b      	lsls	r3, r1, #9
    23c4:	1ac0      	subs	r0, r0, r3
    23c6:	4152      	adcs	r2, r2
    23c8:	0a03      	lsrs	r3, r0, #8
    23ca:	428b      	cmp	r3, r1
    23cc:	d301      	bcc.n	23d2 <__udivsi3+0x9a>
    23ce:	020b      	lsls	r3, r1, #8
    23d0:	1ac0      	subs	r0, r0, r3
    23d2:	4152      	adcs	r2, r2
    23d4:	d2cd      	bcs.n	2372 <__udivsi3+0x3a>
    23d6:	09c3      	lsrs	r3, r0, #7
    23d8:	428b      	cmp	r3, r1
    23da:	d301      	bcc.n	23e0 <__udivsi3+0xa8>
    23dc:	01cb      	lsls	r3, r1, #7
    23de:	1ac0      	subs	r0, r0, r3
    23e0:	4152      	adcs	r2, r2
    23e2:	0983      	lsrs	r3, r0, #6
    23e4:	428b      	cmp	r3, r1
    23e6:	d301      	bcc.n	23ec <__udivsi3+0xb4>
    23e8:	018b      	lsls	r3, r1, #6
    23ea:	1ac0      	subs	r0, r0, r3
    23ec:	4152      	adcs	r2, r2
    23ee:	0943      	lsrs	r3, r0, #5
    23f0:	428b      	cmp	r3, r1
    23f2:	d301      	bcc.n	23f8 <__udivsi3+0xc0>
    23f4:	014b      	lsls	r3, r1, #5
    23f6:	1ac0      	subs	r0, r0, r3
    23f8:	4152      	adcs	r2, r2
    23fa:	0903      	lsrs	r3, r0, #4
    23fc:	428b      	cmp	r3, r1
    23fe:	d301      	bcc.n	2404 <__udivsi3+0xcc>
    2400:	010b      	lsls	r3, r1, #4
    2402:	1ac0      	subs	r0, r0, r3
    2404:	4152      	adcs	r2, r2
    2406:	08c3      	lsrs	r3, r0, #3
    2408:	428b      	cmp	r3, r1
    240a:	d301      	bcc.n	2410 <__udivsi3+0xd8>
    240c:	00cb      	lsls	r3, r1, #3
    240e:	1ac0      	subs	r0, r0, r3
    2410:	4152      	adcs	r2, r2
    2412:	0883      	lsrs	r3, r0, #2
    2414:	428b      	cmp	r3, r1
    2416:	d301      	bcc.n	241c <__udivsi3+0xe4>
    2418:	008b      	lsls	r3, r1, #2
    241a:	1ac0      	subs	r0, r0, r3
    241c:	4152      	adcs	r2, r2
    241e:	0843      	lsrs	r3, r0, #1
    2420:	428b      	cmp	r3, r1
    2422:	d301      	bcc.n	2428 <__udivsi3+0xf0>
    2424:	004b      	lsls	r3, r1, #1
    2426:	1ac0      	subs	r0, r0, r3
    2428:	4152      	adcs	r2, r2
    242a:	1a41      	subs	r1, r0, r1
    242c:	d200      	bcs.n	2430 <__udivsi3+0xf8>
    242e:	4601      	mov	r1, r0
    2430:	4152      	adcs	r2, r2
    2432:	4610      	mov	r0, r2
    2434:	4770      	bx	lr
    2436:	e7ff      	b.n	2438 <__udivsi3+0x100>
    2438:	b501      	push	{r0, lr}
    243a:	2000      	movs	r0, #0
    243c:	f000 f806 	bl	244c <__aeabi_idiv0>
    2440:	bd02      	pop	{r1, pc}
    2442:	46c0      	nop			; (mov r8, r8)

00002444 <__aeabi_uidivmod>:
    2444:	2900      	cmp	r1, #0
    2446:	d0f7      	beq.n	2438 <__udivsi3+0x100>
    2448:	e776      	b.n	2338 <__udivsi3>
    244a:	4770      	bx	lr

0000244c <__aeabi_idiv0>:
    244c:	4770      	bx	lr
    244e:	46c0      	nop			; (mov r8, r8)

00002450 <__ffssi2>:
    2450:	b510      	push	{r4, lr}
    2452:	2300      	movs	r3, #0
    2454:	2800      	cmp	r0, #0
    2456:	d002      	beq.n	245e <__ffssi2+0xe>
    2458:	f000 fbf2 	bl	2c40 <__ctzsi2>
    245c:	1c43      	adds	r3, r0, #1
    245e:	0018      	movs	r0, r3
    2460:	bd10      	pop	{r4, pc}
    2462:	46c0      	nop			; (mov r8, r8)

00002464 <__aeabi_f2uiz>:
    2464:	219e      	movs	r1, #158	; 0x9e
    2466:	b510      	push	{r4, lr}
    2468:	05c9      	lsls	r1, r1, #23
    246a:	1c04      	adds	r4, r0, #0
    246c:	f000 fbc0 	bl	2bf0 <__aeabi_fcmpge>
    2470:	2800      	cmp	r0, #0
    2472:	d103      	bne.n	247c <__aeabi_f2uiz+0x18>
    2474:	1c20      	adds	r0, r4, #0
    2476:	f000 fac9 	bl	2a0c <__aeabi_f2iz>
    247a:	bd10      	pop	{r4, pc}
    247c:	219e      	movs	r1, #158	; 0x9e
    247e:	1c20      	adds	r0, r4, #0
    2480:	05c9      	lsls	r1, r1, #23
    2482:	f000 f927 	bl	26d4 <__aeabi_fsub>
    2486:	f000 fac1 	bl	2a0c <__aeabi_f2iz>
    248a:	2380      	movs	r3, #128	; 0x80
    248c:	061b      	lsls	r3, r3, #24
    248e:	469c      	mov	ip, r3
    2490:	4460      	add	r0, ip
    2492:	e7f2      	b.n	247a <__aeabi_f2uiz+0x16>

00002494 <__aeabi_fmul>:
    2494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2496:	4657      	mov	r7, sl
    2498:	464e      	mov	r6, r9
    249a:	4645      	mov	r5, r8
    249c:	46de      	mov	lr, fp
    249e:	b5e0      	push	{r5, r6, r7, lr}
    24a0:	0247      	lsls	r7, r0, #9
    24a2:	0046      	lsls	r6, r0, #1
    24a4:	4688      	mov	r8, r1
    24a6:	0a7f      	lsrs	r7, r7, #9
    24a8:	0e36      	lsrs	r6, r6, #24
    24aa:	0fc4      	lsrs	r4, r0, #31
    24ac:	2e00      	cmp	r6, #0
    24ae:	d047      	beq.n	2540 <__aeabi_fmul+0xac>
    24b0:	2eff      	cmp	r6, #255	; 0xff
    24b2:	d024      	beq.n	24fe <__aeabi_fmul+0x6a>
    24b4:	00fb      	lsls	r3, r7, #3
    24b6:	2780      	movs	r7, #128	; 0x80
    24b8:	04ff      	lsls	r7, r7, #19
    24ba:	431f      	orrs	r7, r3
    24bc:	2300      	movs	r3, #0
    24be:	4699      	mov	r9, r3
    24c0:	469a      	mov	sl, r3
    24c2:	3e7f      	subs	r6, #127	; 0x7f
    24c4:	4643      	mov	r3, r8
    24c6:	025d      	lsls	r5, r3, #9
    24c8:	0058      	lsls	r0, r3, #1
    24ca:	0fdb      	lsrs	r3, r3, #31
    24cc:	0a6d      	lsrs	r5, r5, #9
    24ce:	0e00      	lsrs	r0, r0, #24
    24d0:	4698      	mov	r8, r3
    24d2:	d043      	beq.n	255c <__aeabi_fmul+0xc8>
    24d4:	28ff      	cmp	r0, #255	; 0xff
    24d6:	d03b      	beq.n	2550 <__aeabi_fmul+0xbc>
    24d8:	00eb      	lsls	r3, r5, #3
    24da:	2580      	movs	r5, #128	; 0x80
    24dc:	2200      	movs	r2, #0
    24de:	04ed      	lsls	r5, r5, #19
    24e0:	431d      	orrs	r5, r3
    24e2:	387f      	subs	r0, #127	; 0x7f
    24e4:	1836      	adds	r6, r6, r0
    24e6:	1c73      	adds	r3, r6, #1
    24e8:	4641      	mov	r1, r8
    24ea:	469b      	mov	fp, r3
    24ec:	464b      	mov	r3, r9
    24ee:	4061      	eors	r1, r4
    24f0:	4313      	orrs	r3, r2
    24f2:	2b0f      	cmp	r3, #15
    24f4:	d864      	bhi.n	25c0 <__aeabi_fmul+0x12c>
    24f6:	4875      	ldr	r0, [pc, #468]	; (26cc <__aeabi_fmul+0x238>)
    24f8:	009b      	lsls	r3, r3, #2
    24fa:	58c3      	ldr	r3, [r0, r3]
    24fc:	469f      	mov	pc, r3
    24fe:	2f00      	cmp	r7, #0
    2500:	d142      	bne.n	2588 <__aeabi_fmul+0xf4>
    2502:	2308      	movs	r3, #8
    2504:	4699      	mov	r9, r3
    2506:	3b06      	subs	r3, #6
    2508:	26ff      	movs	r6, #255	; 0xff
    250a:	469a      	mov	sl, r3
    250c:	e7da      	b.n	24c4 <__aeabi_fmul+0x30>
    250e:	4641      	mov	r1, r8
    2510:	2a02      	cmp	r2, #2
    2512:	d028      	beq.n	2566 <__aeabi_fmul+0xd2>
    2514:	2a03      	cmp	r2, #3
    2516:	d100      	bne.n	251a <__aeabi_fmul+0x86>
    2518:	e0ce      	b.n	26b8 <__aeabi_fmul+0x224>
    251a:	2a01      	cmp	r2, #1
    251c:	d000      	beq.n	2520 <__aeabi_fmul+0x8c>
    251e:	e0ac      	b.n	267a <__aeabi_fmul+0x1e6>
    2520:	4011      	ands	r1, r2
    2522:	2000      	movs	r0, #0
    2524:	2200      	movs	r2, #0
    2526:	b2cc      	uxtb	r4, r1
    2528:	0240      	lsls	r0, r0, #9
    252a:	05d2      	lsls	r2, r2, #23
    252c:	0a40      	lsrs	r0, r0, #9
    252e:	07e4      	lsls	r4, r4, #31
    2530:	4310      	orrs	r0, r2
    2532:	4320      	orrs	r0, r4
    2534:	bc3c      	pop	{r2, r3, r4, r5}
    2536:	4690      	mov	r8, r2
    2538:	4699      	mov	r9, r3
    253a:	46a2      	mov	sl, r4
    253c:	46ab      	mov	fp, r5
    253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2540:	2f00      	cmp	r7, #0
    2542:	d115      	bne.n	2570 <__aeabi_fmul+0xdc>
    2544:	2304      	movs	r3, #4
    2546:	4699      	mov	r9, r3
    2548:	3b03      	subs	r3, #3
    254a:	2600      	movs	r6, #0
    254c:	469a      	mov	sl, r3
    254e:	e7b9      	b.n	24c4 <__aeabi_fmul+0x30>
    2550:	20ff      	movs	r0, #255	; 0xff
    2552:	2202      	movs	r2, #2
    2554:	2d00      	cmp	r5, #0
    2556:	d0c5      	beq.n	24e4 <__aeabi_fmul+0x50>
    2558:	2203      	movs	r2, #3
    255a:	e7c3      	b.n	24e4 <__aeabi_fmul+0x50>
    255c:	2d00      	cmp	r5, #0
    255e:	d119      	bne.n	2594 <__aeabi_fmul+0x100>
    2560:	2000      	movs	r0, #0
    2562:	2201      	movs	r2, #1
    2564:	e7be      	b.n	24e4 <__aeabi_fmul+0x50>
    2566:	2401      	movs	r4, #1
    2568:	22ff      	movs	r2, #255	; 0xff
    256a:	400c      	ands	r4, r1
    256c:	2000      	movs	r0, #0
    256e:	e7db      	b.n	2528 <__aeabi_fmul+0x94>
    2570:	0038      	movs	r0, r7
    2572:	f000 fb47 	bl	2c04 <__clzsi2>
    2576:	2676      	movs	r6, #118	; 0x76
    2578:	1f43      	subs	r3, r0, #5
    257a:	409f      	lsls	r7, r3
    257c:	2300      	movs	r3, #0
    257e:	4276      	negs	r6, r6
    2580:	1a36      	subs	r6, r6, r0
    2582:	4699      	mov	r9, r3
    2584:	469a      	mov	sl, r3
    2586:	e79d      	b.n	24c4 <__aeabi_fmul+0x30>
    2588:	230c      	movs	r3, #12
    258a:	4699      	mov	r9, r3
    258c:	3b09      	subs	r3, #9
    258e:	26ff      	movs	r6, #255	; 0xff
    2590:	469a      	mov	sl, r3
    2592:	e797      	b.n	24c4 <__aeabi_fmul+0x30>
    2594:	0028      	movs	r0, r5
    2596:	f000 fb35 	bl	2c04 <__clzsi2>
    259a:	1f43      	subs	r3, r0, #5
    259c:	409d      	lsls	r5, r3
    259e:	2376      	movs	r3, #118	; 0x76
    25a0:	425b      	negs	r3, r3
    25a2:	1a18      	subs	r0, r3, r0
    25a4:	2200      	movs	r2, #0
    25a6:	e79d      	b.n	24e4 <__aeabi_fmul+0x50>
    25a8:	2080      	movs	r0, #128	; 0x80
    25aa:	2400      	movs	r4, #0
    25ac:	03c0      	lsls	r0, r0, #15
    25ae:	22ff      	movs	r2, #255	; 0xff
    25b0:	e7ba      	b.n	2528 <__aeabi_fmul+0x94>
    25b2:	003d      	movs	r5, r7
    25b4:	4652      	mov	r2, sl
    25b6:	e7ab      	b.n	2510 <__aeabi_fmul+0x7c>
    25b8:	003d      	movs	r5, r7
    25ba:	0021      	movs	r1, r4
    25bc:	4652      	mov	r2, sl
    25be:	e7a7      	b.n	2510 <__aeabi_fmul+0x7c>
    25c0:	0c3b      	lsrs	r3, r7, #16
    25c2:	469c      	mov	ip, r3
    25c4:	042a      	lsls	r2, r5, #16
    25c6:	0c12      	lsrs	r2, r2, #16
    25c8:	0c2b      	lsrs	r3, r5, #16
    25ca:	0014      	movs	r4, r2
    25cc:	4660      	mov	r0, ip
    25ce:	4665      	mov	r5, ip
    25d0:	043f      	lsls	r7, r7, #16
    25d2:	0c3f      	lsrs	r7, r7, #16
    25d4:	437c      	muls	r4, r7
    25d6:	4342      	muls	r2, r0
    25d8:	435d      	muls	r5, r3
    25da:	437b      	muls	r3, r7
    25dc:	0c27      	lsrs	r7, r4, #16
    25de:	189b      	adds	r3, r3, r2
    25e0:	18ff      	adds	r7, r7, r3
    25e2:	42ba      	cmp	r2, r7
    25e4:	d903      	bls.n	25ee <__aeabi_fmul+0x15a>
    25e6:	2380      	movs	r3, #128	; 0x80
    25e8:	025b      	lsls	r3, r3, #9
    25ea:	469c      	mov	ip, r3
    25ec:	4465      	add	r5, ip
    25ee:	0424      	lsls	r4, r4, #16
    25f0:	043a      	lsls	r2, r7, #16
    25f2:	0c24      	lsrs	r4, r4, #16
    25f4:	1912      	adds	r2, r2, r4
    25f6:	0193      	lsls	r3, r2, #6
    25f8:	1e5c      	subs	r4, r3, #1
    25fa:	41a3      	sbcs	r3, r4
    25fc:	0c3f      	lsrs	r7, r7, #16
    25fe:	0e92      	lsrs	r2, r2, #26
    2600:	197d      	adds	r5, r7, r5
    2602:	431a      	orrs	r2, r3
    2604:	01ad      	lsls	r5, r5, #6
    2606:	4315      	orrs	r5, r2
    2608:	012b      	lsls	r3, r5, #4
    260a:	d504      	bpl.n	2616 <__aeabi_fmul+0x182>
    260c:	2301      	movs	r3, #1
    260e:	465e      	mov	r6, fp
    2610:	086a      	lsrs	r2, r5, #1
    2612:	401d      	ands	r5, r3
    2614:	4315      	orrs	r5, r2
    2616:	0032      	movs	r2, r6
    2618:	327f      	adds	r2, #127	; 0x7f
    261a:	2a00      	cmp	r2, #0
    261c:	dd25      	ble.n	266a <__aeabi_fmul+0x1d6>
    261e:	076b      	lsls	r3, r5, #29
    2620:	d004      	beq.n	262c <__aeabi_fmul+0x198>
    2622:	230f      	movs	r3, #15
    2624:	402b      	ands	r3, r5
    2626:	2b04      	cmp	r3, #4
    2628:	d000      	beq.n	262c <__aeabi_fmul+0x198>
    262a:	3504      	adds	r5, #4
    262c:	012b      	lsls	r3, r5, #4
    262e:	d503      	bpl.n	2638 <__aeabi_fmul+0x1a4>
    2630:	0032      	movs	r2, r6
    2632:	4b27      	ldr	r3, [pc, #156]	; (26d0 <__aeabi_fmul+0x23c>)
    2634:	3280      	adds	r2, #128	; 0x80
    2636:	401d      	ands	r5, r3
    2638:	2afe      	cmp	r2, #254	; 0xfe
    263a:	dc94      	bgt.n	2566 <__aeabi_fmul+0xd2>
    263c:	2401      	movs	r4, #1
    263e:	01a8      	lsls	r0, r5, #6
    2640:	0a40      	lsrs	r0, r0, #9
    2642:	b2d2      	uxtb	r2, r2
    2644:	400c      	ands	r4, r1
    2646:	e76f      	b.n	2528 <__aeabi_fmul+0x94>
    2648:	2080      	movs	r0, #128	; 0x80
    264a:	03c0      	lsls	r0, r0, #15
    264c:	4207      	tst	r7, r0
    264e:	d007      	beq.n	2660 <__aeabi_fmul+0x1cc>
    2650:	4205      	tst	r5, r0
    2652:	d105      	bne.n	2660 <__aeabi_fmul+0x1cc>
    2654:	4328      	orrs	r0, r5
    2656:	0240      	lsls	r0, r0, #9
    2658:	0a40      	lsrs	r0, r0, #9
    265a:	4644      	mov	r4, r8
    265c:	22ff      	movs	r2, #255	; 0xff
    265e:	e763      	b.n	2528 <__aeabi_fmul+0x94>
    2660:	4338      	orrs	r0, r7
    2662:	0240      	lsls	r0, r0, #9
    2664:	0a40      	lsrs	r0, r0, #9
    2666:	22ff      	movs	r2, #255	; 0xff
    2668:	e75e      	b.n	2528 <__aeabi_fmul+0x94>
    266a:	2401      	movs	r4, #1
    266c:	1aa3      	subs	r3, r4, r2
    266e:	2b1b      	cmp	r3, #27
    2670:	dd05      	ble.n	267e <__aeabi_fmul+0x1ea>
    2672:	400c      	ands	r4, r1
    2674:	2200      	movs	r2, #0
    2676:	2000      	movs	r0, #0
    2678:	e756      	b.n	2528 <__aeabi_fmul+0x94>
    267a:	465e      	mov	r6, fp
    267c:	e7cb      	b.n	2616 <__aeabi_fmul+0x182>
    267e:	002a      	movs	r2, r5
    2680:	2020      	movs	r0, #32
    2682:	40da      	lsrs	r2, r3
    2684:	1ac3      	subs	r3, r0, r3
    2686:	409d      	lsls	r5, r3
    2688:	002b      	movs	r3, r5
    268a:	1e5d      	subs	r5, r3, #1
    268c:	41ab      	sbcs	r3, r5
    268e:	4313      	orrs	r3, r2
    2690:	075a      	lsls	r2, r3, #29
    2692:	d004      	beq.n	269e <__aeabi_fmul+0x20a>
    2694:	220f      	movs	r2, #15
    2696:	401a      	ands	r2, r3
    2698:	2a04      	cmp	r2, #4
    269a:	d000      	beq.n	269e <__aeabi_fmul+0x20a>
    269c:	3304      	adds	r3, #4
    269e:	015a      	lsls	r2, r3, #5
    26a0:	d504      	bpl.n	26ac <__aeabi_fmul+0x218>
    26a2:	2401      	movs	r4, #1
    26a4:	2201      	movs	r2, #1
    26a6:	400c      	ands	r4, r1
    26a8:	2000      	movs	r0, #0
    26aa:	e73d      	b.n	2528 <__aeabi_fmul+0x94>
    26ac:	2401      	movs	r4, #1
    26ae:	019b      	lsls	r3, r3, #6
    26b0:	0a58      	lsrs	r0, r3, #9
    26b2:	400c      	ands	r4, r1
    26b4:	2200      	movs	r2, #0
    26b6:	e737      	b.n	2528 <__aeabi_fmul+0x94>
    26b8:	2080      	movs	r0, #128	; 0x80
    26ba:	2401      	movs	r4, #1
    26bc:	03c0      	lsls	r0, r0, #15
    26be:	4328      	orrs	r0, r5
    26c0:	0240      	lsls	r0, r0, #9
    26c2:	0a40      	lsrs	r0, r0, #9
    26c4:	400c      	ands	r4, r1
    26c6:	22ff      	movs	r2, #255	; 0xff
    26c8:	e72e      	b.n	2528 <__aeabi_fmul+0x94>
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	00003d34 	.word	0x00003d34
    26d0:	f7ffffff 	.word	0xf7ffffff

000026d4 <__aeabi_fsub>:
    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d6:	464f      	mov	r7, r9
    26d8:	46d6      	mov	lr, sl
    26da:	4646      	mov	r6, r8
    26dc:	0044      	lsls	r4, r0, #1
    26de:	b5c0      	push	{r6, r7, lr}
    26e0:	0fc2      	lsrs	r2, r0, #31
    26e2:	0247      	lsls	r7, r0, #9
    26e4:	0248      	lsls	r0, r1, #9
    26e6:	0a40      	lsrs	r0, r0, #9
    26e8:	4684      	mov	ip, r0
    26ea:	4666      	mov	r6, ip
    26ec:	0a7b      	lsrs	r3, r7, #9
    26ee:	0048      	lsls	r0, r1, #1
    26f0:	0fc9      	lsrs	r1, r1, #31
    26f2:	469a      	mov	sl, r3
    26f4:	0e24      	lsrs	r4, r4, #24
    26f6:	0015      	movs	r5, r2
    26f8:	00db      	lsls	r3, r3, #3
    26fa:	0e00      	lsrs	r0, r0, #24
    26fc:	4689      	mov	r9, r1
    26fe:	00f6      	lsls	r6, r6, #3
    2700:	28ff      	cmp	r0, #255	; 0xff
    2702:	d100      	bne.n	2706 <__aeabi_fsub+0x32>
    2704:	e08f      	b.n	2826 <__aeabi_fsub+0x152>
    2706:	2101      	movs	r1, #1
    2708:	464f      	mov	r7, r9
    270a:	404f      	eors	r7, r1
    270c:	0039      	movs	r1, r7
    270e:	4291      	cmp	r1, r2
    2710:	d066      	beq.n	27e0 <__aeabi_fsub+0x10c>
    2712:	1a22      	subs	r2, r4, r0
    2714:	2a00      	cmp	r2, #0
    2716:	dc00      	bgt.n	271a <__aeabi_fsub+0x46>
    2718:	e09d      	b.n	2856 <__aeabi_fsub+0x182>
    271a:	2800      	cmp	r0, #0
    271c:	d13d      	bne.n	279a <__aeabi_fsub+0xc6>
    271e:	2e00      	cmp	r6, #0
    2720:	d100      	bne.n	2724 <__aeabi_fsub+0x50>
    2722:	e08b      	b.n	283c <__aeabi_fsub+0x168>
    2724:	1e51      	subs	r1, r2, #1
    2726:	2900      	cmp	r1, #0
    2728:	d000      	beq.n	272c <__aeabi_fsub+0x58>
    272a:	e0b5      	b.n	2898 <__aeabi_fsub+0x1c4>
    272c:	2401      	movs	r4, #1
    272e:	1b9b      	subs	r3, r3, r6
    2730:	015a      	lsls	r2, r3, #5
    2732:	d544      	bpl.n	27be <__aeabi_fsub+0xea>
    2734:	019b      	lsls	r3, r3, #6
    2736:	099f      	lsrs	r7, r3, #6
    2738:	0038      	movs	r0, r7
    273a:	f000 fa63 	bl	2c04 <__clzsi2>
    273e:	3805      	subs	r0, #5
    2740:	4087      	lsls	r7, r0
    2742:	4284      	cmp	r4, r0
    2744:	dd00      	ble.n	2748 <__aeabi_fsub+0x74>
    2746:	e096      	b.n	2876 <__aeabi_fsub+0x1a2>
    2748:	1b04      	subs	r4, r0, r4
    274a:	003a      	movs	r2, r7
    274c:	2020      	movs	r0, #32
    274e:	3401      	adds	r4, #1
    2750:	40e2      	lsrs	r2, r4
    2752:	1b04      	subs	r4, r0, r4
    2754:	40a7      	lsls	r7, r4
    2756:	003b      	movs	r3, r7
    2758:	1e5f      	subs	r7, r3, #1
    275a:	41bb      	sbcs	r3, r7
    275c:	2400      	movs	r4, #0
    275e:	4313      	orrs	r3, r2
    2760:	075a      	lsls	r2, r3, #29
    2762:	d004      	beq.n	276e <__aeabi_fsub+0x9a>
    2764:	220f      	movs	r2, #15
    2766:	401a      	ands	r2, r3
    2768:	2a04      	cmp	r2, #4
    276a:	d000      	beq.n	276e <__aeabi_fsub+0x9a>
    276c:	3304      	adds	r3, #4
    276e:	015a      	lsls	r2, r3, #5
    2770:	d527      	bpl.n	27c2 <__aeabi_fsub+0xee>
    2772:	3401      	adds	r4, #1
    2774:	2cff      	cmp	r4, #255	; 0xff
    2776:	d100      	bne.n	277a <__aeabi_fsub+0xa6>
    2778:	e079      	b.n	286e <__aeabi_fsub+0x19a>
    277a:	2201      	movs	r2, #1
    277c:	019b      	lsls	r3, r3, #6
    277e:	0a5b      	lsrs	r3, r3, #9
    2780:	b2e4      	uxtb	r4, r4
    2782:	402a      	ands	r2, r5
    2784:	025b      	lsls	r3, r3, #9
    2786:	05e4      	lsls	r4, r4, #23
    2788:	0a58      	lsrs	r0, r3, #9
    278a:	07d2      	lsls	r2, r2, #31
    278c:	4320      	orrs	r0, r4
    278e:	4310      	orrs	r0, r2
    2790:	bc1c      	pop	{r2, r3, r4}
    2792:	4690      	mov	r8, r2
    2794:	4699      	mov	r9, r3
    2796:	46a2      	mov	sl, r4
    2798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    279a:	2cff      	cmp	r4, #255	; 0xff
    279c:	d0e0      	beq.n	2760 <__aeabi_fsub+0x8c>
    279e:	2180      	movs	r1, #128	; 0x80
    27a0:	04c9      	lsls	r1, r1, #19
    27a2:	430e      	orrs	r6, r1
    27a4:	2a1b      	cmp	r2, #27
    27a6:	dc7b      	bgt.n	28a0 <__aeabi_fsub+0x1cc>
    27a8:	0031      	movs	r1, r6
    27aa:	2020      	movs	r0, #32
    27ac:	40d1      	lsrs	r1, r2
    27ae:	1a82      	subs	r2, r0, r2
    27b0:	4096      	lsls	r6, r2
    27b2:	1e72      	subs	r2, r6, #1
    27b4:	4196      	sbcs	r6, r2
    27b6:	430e      	orrs	r6, r1
    27b8:	1b9b      	subs	r3, r3, r6
    27ba:	015a      	lsls	r2, r3, #5
    27bc:	d4ba      	bmi.n	2734 <__aeabi_fsub+0x60>
    27be:	075a      	lsls	r2, r3, #29
    27c0:	d1d0      	bne.n	2764 <__aeabi_fsub+0x90>
    27c2:	2201      	movs	r2, #1
    27c4:	08df      	lsrs	r7, r3, #3
    27c6:	402a      	ands	r2, r5
    27c8:	2cff      	cmp	r4, #255	; 0xff
    27ca:	d133      	bne.n	2834 <__aeabi_fsub+0x160>
    27cc:	2f00      	cmp	r7, #0
    27ce:	d100      	bne.n	27d2 <__aeabi_fsub+0xfe>
    27d0:	e0a8      	b.n	2924 <__aeabi_fsub+0x250>
    27d2:	2380      	movs	r3, #128	; 0x80
    27d4:	03db      	lsls	r3, r3, #15
    27d6:	433b      	orrs	r3, r7
    27d8:	025b      	lsls	r3, r3, #9
    27da:	0a5b      	lsrs	r3, r3, #9
    27dc:	24ff      	movs	r4, #255	; 0xff
    27de:	e7d1      	b.n	2784 <__aeabi_fsub+0xb0>
    27e0:	1a21      	subs	r1, r4, r0
    27e2:	2900      	cmp	r1, #0
    27e4:	dd4c      	ble.n	2880 <__aeabi_fsub+0x1ac>
    27e6:	2800      	cmp	r0, #0
    27e8:	d02a      	beq.n	2840 <__aeabi_fsub+0x16c>
    27ea:	2cff      	cmp	r4, #255	; 0xff
    27ec:	d0b8      	beq.n	2760 <__aeabi_fsub+0x8c>
    27ee:	2080      	movs	r0, #128	; 0x80
    27f0:	04c0      	lsls	r0, r0, #19
    27f2:	4306      	orrs	r6, r0
    27f4:	291b      	cmp	r1, #27
    27f6:	dd00      	ble.n	27fa <__aeabi_fsub+0x126>
    27f8:	e0af      	b.n	295a <__aeabi_fsub+0x286>
    27fa:	0030      	movs	r0, r6
    27fc:	2720      	movs	r7, #32
    27fe:	40c8      	lsrs	r0, r1
    2800:	1a79      	subs	r1, r7, r1
    2802:	408e      	lsls	r6, r1
    2804:	1e71      	subs	r1, r6, #1
    2806:	418e      	sbcs	r6, r1
    2808:	4306      	orrs	r6, r0
    280a:	199b      	adds	r3, r3, r6
    280c:	0159      	lsls	r1, r3, #5
    280e:	d5d6      	bpl.n	27be <__aeabi_fsub+0xea>
    2810:	3401      	adds	r4, #1
    2812:	2cff      	cmp	r4, #255	; 0xff
    2814:	d100      	bne.n	2818 <__aeabi_fsub+0x144>
    2816:	e085      	b.n	2924 <__aeabi_fsub+0x250>
    2818:	2201      	movs	r2, #1
    281a:	497a      	ldr	r1, [pc, #488]	; (2a04 <__aeabi_fsub+0x330>)
    281c:	401a      	ands	r2, r3
    281e:	085b      	lsrs	r3, r3, #1
    2820:	400b      	ands	r3, r1
    2822:	4313      	orrs	r3, r2
    2824:	e79c      	b.n	2760 <__aeabi_fsub+0x8c>
    2826:	2e00      	cmp	r6, #0
    2828:	d000      	beq.n	282c <__aeabi_fsub+0x158>
    282a:	e770      	b.n	270e <__aeabi_fsub+0x3a>
    282c:	e76b      	b.n	2706 <__aeabi_fsub+0x32>
    282e:	1e3b      	subs	r3, r7, #0
    2830:	d1c5      	bne.n	27be <__aeabi_fsub+0xea>
    2832:	2200      	movs	r2, #0
    2834:	027b      	lsls	r3, r7, #9
    2836:	0a5b      	lsrs	r3, r3, #9
    2838:	b2e4      	uxtb	r4, r4
    283a:	e7a3      	b.n	2784 <__aeabi_fsub+0xb0>
    283c:	0014      	movs	r4, r2
    283e:	e78f      	b.n	2760 <__aeabi_fsub+0x8c>
    2840:	2e00      	cmp	r6, #0
    2842:	d04d      	beq.n	28e0 <__aeabi_fsub+0x20c>
    2844:	1e48      	subs	r0, r1, #1
    2846:	2800      	cmp	r0, #0
    2848:	d157      	bne.n	28fa <__aeabi_fsub+0x226>
    284a:	199b      	adds	r3, r3, r6
    284c:	2401      	movs	r4, #1
    284e:	015a      	lsls	r2, r3, #5
    2850:	d5b5      	bpl.n	27be <__aeabi_fsub+0xea>
    2852:	2402      	movs	r4, #2
    2854:	e7e0      	b.n	2818 <__aeabi_fsub+0x144>
    2856:	2a00      	cmp	r2, #0
    2858:	d125      	bne.n	28a6 <__aeabi_fsub+0x1d2>
    285a:	1c62      	adds	r2, r4, #1
    285c:	b2d2      	uxtb	r2, r2
    285e:	2a01      	cmp	r2, #1
    2860:	dd72      	ble.n	2948 <__aeabi_fsub+0x274>
    2862:	1b9f      	subs	r7, r3, r6
    2864:	017a      	lsls	r2, r7, #5
    2866:	d535      	bpl.n	28d4 <__aeabi_fsub+0x200>
    2868:	1af7      	subs	r7, r6, r3
    286a:	000d      	movs	r5, r1
    286c:	e764      	b.n	2738 <__aeabi_fsub+0x64>
    286e:	2201      	movs	r2, #1
    2870:	2300      	movs	r3, #0
    2872:	402a      	ands	r2, r5
    2874:	e786      	b.n	2784 <__aeabi_fsub+0xb0>
    2876:	003b      	movs	r3, r7
    2878:	4a63      	ldr	r2, [pc, #396]	; (2a08 <__aeabi_fsub+0x334>)
    287a:	1a24      	subs	r4, r4, r0
    287c:	4013      	ands	r3, r2
    287e:	e76f      	b.n	2760 <__aeabi_fsub+0x8c>
    2880:	2900      	cmp	r1, #0
    2882:	d16c      	bne.n	295e <__aeabi_fsub+0x28a>
    2884:	1c61      	adds	r1, r4, #1
    2886:	b2c8      	uxtb	r0, r1
    2888:	2801      	cmp	r0, #1
    288a:	dd4e      	ble.n	292a <__aeabi_fsub+0x256>
    288c:	29ff      	cmp	r1, #255	; 0xff
    288e:	d049      	beq.n	2924 <__aeabi_fsub+0x250>
    2890:	199b      	adds	r3, r3, r6
    2892:	085b      	lsrs	r3, r3, #1
    2894:	000c      	movs	r4, r1
    2896:	e763      	b.n	2760 <__aeabi_fsub+0x8c>
    2898:	2aff      	cmp	r2, #255	; 0xff
    289a:	d041      	beq.n	2920 <__aeabi_fsub+0x24c>
    289c:	000a      	movs	r2, r1
    289e:	e781      	b.n	27a4 <__aeabi_fsub+0xd0>
    28a0:	2601      	movs	r6, #1
    28a2:	1b9b      	subs	r3, r3, r6
    28a4:	e789      	b.n	27ba <__aeabi_fsub+0xe6>
    28a6:	2c00      	cmp	r4, #0
    28a8:	d01c      	beq.n	28e4 <__aeabi_fsub+0x210>
    28aa:	28ff      	cmp	r0, #255	; 0xff
    28ac:	d021      	beq.n	28f2 <__aeabi_fsub+0x21e>
    28ae:	2480      	movs	r4, #128	; 0x80
    28b0:	04e4      	lsls	r4, r4, #19
    28b2:	4252      	negs	r2, r2
    28b4:	4323      	orrs	r3, r4
    28b6:	2a1b      	cmp	r2, #27
    28b8:	dd00      	ble.n	28bc <__aeabi_fsub+0x1e8>
    28ba:	e096      	b.n	29ea <__aeabi_fsub+0x316>
    28bc:	001c      	movs	r4, r3
    28be:	2520      	movs	r5, #32
    28c0:	40d4      	lsrs	r4, r2
    28c2:	1aaa      	subs	r2, r5, r2
    28c4:	4093      	lsls	r3, r2
    28c6:	1e5a      	subs	r2, r3, #1
    28c8:	4193      	sbcs	r3, r2
    28ca:	4323      	orrs	r3, r4
    28cc:	1af3      	subs	r3, r6, r3
    28ce:	0004      	movs	r4, r0
    28d0:	000d      	movs	r5, r1
    28d2:	e72d      	b.n	2730 <__aeabi_fsub+0x5c>
    28d4:	2f00      	cmp	r7, #0
    28d6:	d000      	beq.n	28da <__aeabi_fsub+0x206>
    28d8:	e72e      	b.n	2738 <__aeabi_fsub+0x64>
    28da:	2200      	movs	r2, #0
    28dc:	2400      	movs	r4, #0
    28de:	e7a9      	b.n	2834 <__aeabi_fsub+0x160>
    28e0:	000c      	movs	r4, r1
    28e2:	e73d      	b.n	2760 <__aeabi_fsub+0x8c>
    28e4:	2b00      	cmp	r3, #0
    28e6:	d058      	beq.n	299a <__aeabi_fsub+0x2c6>
    28e8:	43d2      	mvns	r2, r2
    28ea:	2a00      	cmp	r2, #0
    28ec:	d0ee      	beq.n	28cc <__aeabi_fsub+0x1f8>
    28ee:	28ff      	cmp	r0, #255	; 0xff
    28f0:	d1e1      	bne.n	28b6 <__aeabi_fsub+0x1e2>
    28f2:	0033      	movs	r3, r6
    28f4:	24ff      	movs	r4, #255	; 0xff
    28f6:	000d      	movs	r5, r1
    28f8:	e732      	b.n	2760 <__aeabi_fsub+0x8c>
    28fa:	29ff      	cmp	r1, #255	; 0xff
    28fc:	d010      	beq.n	2920 <__aeabi_fsub+0x24c>
    28fe:	0001      	movs	r1, r0
    2900:	e778      	b.n	27f4 <__aeabi_fsub+0x120>
    2902:	2b00      	cmp	r3, #0
    2904:	d06e      	beq.n	29e4 <__aeabi_fsub+0x310>
    2906:	24ff      	movs	r4, #255	; 0xff
    2908:	2e00      	cmp	r6, #0
    290a:	d100      	bne.n	290e <__aeabi_fsub+0x23a>
    290c:	e728      	b.n	2760 <__aeabi_fsub+0x8c>
    290e:	2280      	movs	r2, #128	; 0x80
    2910:	4651      	mov	r1, sl
    2912:	03d2      	lsls	r2, r2, #15
    2914:	4211      	tst	r1, r2
    2916:	d003      	beq.n	2920 <__aeabi_fsub+0x24c>
    2918:	4661      	mov	r1, ip
    291a:	4211      	tst	r1, r2
    291c:	d100      	bne.n	2920 <__aeabi_fsub+0x24c>
    291e:	0033      	movs	r3, r6
    2920:	24ff      	movs	r4, #255	; 0xff
    2922:	e71d      	b.n	2760 <__aeabi_fsub+0x8c>
    2924:	24ff      	movs	r4, #255	; 0xff
    2926:	2300      	movs	r3, #0
    2928:	e72c      	b.n	2784 <__aeabi_fsub+0xb0>
    292a:	2c00      	cmp	r4, #0
    292c:	d1e9      	bne.n	2902 <__aeabi_fsub+0x22e>
    292e:	2b00      	cmp	r3, #0
    2930:	d063      	beq.n	29fa <__aeabi_fsub+0x326>
    2932:	2e00      	cmp	r6, #0
    2934:	d100      	bne.n	2938 <__aeabi_fsub+0x264>
    2936:	e713      	b.n	2760 <__aeabi_fsub+0x8c>
    2938:	199b      	adds	r3, r3, r6
    293a:	015a      	lsls	r2, r3, #5
    293c:	d400      	bmi.n	2940 <__aeabi_fsub+0x26c>
    293e:	e73e      	b.n	27be <__aeabi_fsub+0xea>
    2940:	4a31      	ldr	r2, [pc, #196]	; (2a08 <__aeabi_fsub+0x334>)
    2942:	000c      	movs	r4, r1
    2944:	4013      	ands	r3, r2
    2946:	e70b      	b.n	2760 <__aeabi_fsub+0x8c>
    2948:	2c00      	cmp	r4, #0
    294a:	d11e      	bne.n	298a <__aeabi_fsub+0x2b6>
    294c:	2b00      	cmp	r3, #0
    294e:	d12f      	bne.n	29b0 <__aeabi_fsub+0x2dc>
    2950:	2e00      	cmp	r6, #0
    2952:	d04f      	beq.n	29f4 <__aeabi_fsub+0x320>
    2954:	0033      	movs	r3, r6
    2956:	000d      	movs	r5, r1
    2958:	e702      	b.n	2760 <__aeabi_fsub+0x8c>
    295a:	2601      	movs	r6, #1
    295c:	e755      	b.n	280a <__aeabi_fsub+0x136>
    295e:	2c00      	cmp	r4, #0
    2960:	d11f      	bne.n	29a2 <__aeabi_fsub+0x2ce>
    2962:	2b00      	cmp	r3, #0
    2964:	d043      	beq.n	29ee <__aeabi_fsub+0x31a>
    2966:	43c9      	mvns	r1, r1
    2968:	2900      	cmp	r1, #0
    296a:	d00b      	beq.n	2984 <__aeabi_fsub+0x2b0>
    296c:	28ff      	cmp	r0, #255	; 0xff
    296e:	d039      	beq.n	29e4 <__aeabi_fsub+0x310>
    2970:	291b      	cmp	r1, #27
    2972:	dc44      	bgt.n	29fe <__aeabi_fsub+0x32a>
    2974:	001c      	movs	r4, r3
    2976:	2720      	movs	r7, #32
    2978:	40cc      	lsrs	r4, r1
    297a:	1a79      	subs	r1, r7, r1
    297c:	408b      	lsls	r3, r1
    297e:	1e59      	subs	r1, r3, #1
    2980:	418b      	sbcs	r3, r1
    2982:	4323      	orrs	r3, r4
    2984:	199b      	adds	r3, r3, r6
    2986:	0004      	movs	r4, r0
    2988:	e740      	b.n	280c <__aeabi_fsub+0x138>
    298a:	2b00      	cmp	r3, #0
    298c:	d11a      	bne.n	29c4 <__aeabi_fsub+0x2f0>
    298e:	2e00      	cmp	r6, #0
    2990:	d124      	bne.n	29dc <__aeabi_fsub+0x308>
    2992:	2780      	movs	r7, #128	; 0x80
    2994:	2200      	movs	r2, #0
    2996:	03ff      	lsls	r7, r7, #15
    2998:	e71b      	b.n	27d2 <__aeabi_fsub+0xfe>
    299a:	0033      	movs	r3, r6
    299c:	0004      	movs	r4, r0
    299e:	000d      	movs	r5, r1
    29a0:	e6de      	b.n	2760 <__aeabi_fsub+0x8c>
    29a2:	28ff      	cmp	r0, #255	; 0xff
    29a4:	d01e      	beq.n	29e4 <__aeabi_fsub+0x310>
    29a6:	2480      	movs	r4, #128	; 0x80
    29a8:	04e4      	lsls	r4, r4, #19
    29aa:	4249      	negs	r1, r1
    29ac:	4323      	orrs	r3, r4
    29ae:	e7df      	b.n	2970 <__aeabi_fsub+0x29c>
    29b0:	2e00      	cmp	r6, #0
    29b2:	d100      	bne.n	29b6 <__aeabi_fsub+0x2e2>
    29b4:	e6d4      	b.n	2760 <__aeabi_fsub+0x8c>
    29b6:	1b9f      	subs	r7, r3, r6
    29b8:	017a      	lsls	r2, r7, #5
    29ba:	d400      	bmi.n	29be <__aeabi_fsub+0x2ea>
    29bc:	e737      	b.n	282e <__aeabi_fsub+0x15a>
    29be:	1af3      	subs	r3, r6, r3
    29c0:	000d      	movs	r5, r1
    29c2:	e6cd      	b.n	2760 <__aeabi_fsub+0x8c>
    29c4:	24ff      	movs	r4, #255	; 0xff
    29c6:	2e00      	cmp	r6, #0
    29c8:	d100      	bne.n	29cc <__aeabi_fsub+0x2f8>
    29ca:	e6c9      	b.n	2760 <__aeabi_fsub+0x8c>
    29cc:	2280      	movs	r2, #128	; 0x80
    29ce:	4650      	mov	r0, sl
    29d0:	03d2      	lsls	r2, r2, #15
    29d2:	4210      	tst	r0, r2
    29d4:	d0a4      	beq.n	2920 <__aeabi_fsub+0x24c>
    29d6:	4660      	mov	r0, ip
    29d8:	4210      	tst	r0, r2
    29da:	d1a1      	bne.n	2920 <__aeabi_fsub+0x24c>
    29dc:	0033      	movs	r3, r6
    29de:	000d      	movs	r5, r1
    29e0:	24ff      	movs	r4, #255	; 0xff
    29e2:	e6bd      	b.n	2760 <__aeabi_fsub+0x8c>
    29e4:	0033      	movs	r3, r6
    29e6:	24ff      	movs	r4, #255	; 0xff
    29e8:	e6ba      	b.n	2760 <__aeabi_fsub+0x8c>
    29ea:	2301      	movs	r3, #1
    29ec:	e76e      	b.n	28cc <__aeabi_fsub+0x1f8>
    29ee:	0033      	movs	r3, r6
    29f0:	0004      	movs	r4, r0
    29f2:	e6b5      	b.n	2760 <__aeabi_fsub+0x8c>
    29f4:	2700      	movs	r7, #0
    29f6:	2200      	movs	r2, #0
    29f8:	e71c      	b.n	2834 <__aeabi_fsub+0x160>
    29fa:	0033      	movs	r3, r6
    29fc:	e6b0      	b.n	2760 <__aeabi_fsub+0x8c>
    29fe:	2301      	movs	r3, #1
    2a00:	e7c0      	b.n	2984 <__aeabi_fsub+0x2b0>
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	7dffffff 	.word	0x7dffffff
    2a08:	fbffffff 	.word	0xfbffffff

00002a0c <__aeabi_f2iz>:
    2a0c:	0241      	lsls	r1, r0, #9
    2a0e:	0043      	lsls	r3, r0, #1
    2a10:	0fc2      	lsrs	r2, r0, #31
    2a12:	0a49      	lsrs	r1, r1, #9
    2a14:	0e1b      	lsrs	r3, r3, #24
    2a16:	2000      	movs	r0, #0
    2a18:	2b7e      	cmp	r3, #126	; 0x7e
    2a1a:	dd0d      	ble.n	2a38 <__aeabi_f2iz+0x2c>
    2a1c:	2b9d      	cmp	r3, #157	; 0x9d
    2a1e:	dc0c      	bgt.n	2a3a <__aeabi_f2iz+0x2e>
    2a20:	2080      	movs	r0, #128	; 0x80
    2a22:	0400      	lsls	r0, r0, #16
    2a24:	4301      	orrs	r1, r0
    2a26:	2b95      	cmp	r3, #149	; 0x95
    2a28:	dc0a      	bgt.n	2a40 <__aeabi_f2iz+0x34>
    2a2a:	2096      	movs	r0, #150	; 0x96
    2a2c:	1ac3      	subs	r3, r0, r3
    2a2e:	40d9      	lsrs	r1, r3
    2a30:	4248      	negs	r0, r1
    2a32:	2a00      	cmp	r2, #0
    2a34:	d100      	bne.n	2a38 <__aeabi_f2iz+0x2c>
    2a36:	0008      	movs	r0, r1
    2a38:	4770      	bx	lr
    2a3a:	4b03      	ldr	r3, [pc, #12]	; (2a48 <__aeabi_f2iz+0x3c>)
    2a3c:	18d0      	adds	r0, r2, r3
    2a3e:	e7fb      	b.n	2a38 <__aeabi_f2iz+0x2c>
    2a40:	3b96      	subs	r3, #150	; 0x96
    2a42:	4099      	lsls	r1, r3
    2a44:	e7f4      	b.n	2a30 <__aeabi_f2iz+0x24>
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	7fffffff 	.word	0x7fffffff

00002a4c <__aeabi_i2f>:
    2a4c:	b570      	push	{r4, r5, r6, lr}
    2a4e:	2800      	cmp	r0, #0
    2a50:	d030      	beq.n	2ab4 <__aeabi_i2f+0x68>
    2a52:	17c3      	asrs	r3, r0, #31
    2a54:	18c4      	adds	r4, r0, r3
    2a56:	405c      	eors	r4, r3
    2a58:	0fc5      	lsrs	r5, r0, #31
    2a5a:	0020      	movs	r0, r4
    2a5c:	f000 f8d2 	bl	2c04 <__clzsi2>
    2a60:	239e      	movs	r3, #158	; 0x9e
    2a62:	1a1b      	subs	r3, r3, r0
    2a64:	2b96      	cmp	r3, #150	; 0x96
    2a66:	dc0d      	bgt.n	2a84 <__aeabi_i2f+0x38>
    2a68:	2296      	movs	r2, #150	; 0x96
    2a6a:	1ad2      	subs	r2, r2, r3
    2a6c:	4094      	lsls	r4, r2
    2a6e:	002a      	movs	r2, r5
    2a70:	0264      	lsls	r4, r4, #9
    2a72:	0a64      	lsrs	r4, r4, #9
    2a74:	b2db      	uxtb	r3, r3
    2a76:	0264      	lsls	r4, r4, #9
    2a78:	05db      	lsls	r3, r3, #23
    2a7a:	0a60      	lsrs	r0, r4, #9
    2a7c:	07d2      	lsls	r2, r2, #31
    2a7e:	4318      	orrs	r0, r3
    2a80:	4310      	orrs	r0, r2
    2a82:	bd70      	pop	{r4, r5, r6, pc}
    2a84:	2b99      	cmp	r3, #153	; 0x99
    2a86:	dc19      	bgt.n	2abc <__aeabi_i2f+0x70>
    2a88:	2299      	movs	r2, #153	; 0x99
    2a8a:	1ad2      	subs	r2, r2, r3
    2a8c:	2a00      	cmp	r2, #0
    2a8e:	dd29      	ble.n	2ae4 <__aeabi_i2f+0x98>
    2a90:	4094      	lsls	r4, r2
    2a92:	0022      	movs	r2, r4
    2a94:	4c14      	ldr	r4, [pc, #80]	; (2ae8 <__aeabi_i2f+0x9c>)
    2a96:	4014      	ands	r4, r2
    2a98:	0751      	lsls	r1, r2, #29
    2a9a:	d004      	beq.n	2aa6 <__aeabi_i2f+0x5a>
    2a9c:	210f      	movs	r1, #15
    2a9e:	400a      	ands	r2, r1
    2aa0:	2a04      	cmp	r2, #4
    2aa2:	d000      	beq.n	2aa6 <__aeabi_i2f+0x5a>
    2aa4:	3404      	adds	r4, #4
    2aa6:	0162      	lsls	r2, r4, #5
    2aa8:	d413      	bmi.n	2ad2 <__aeabi_i2f+0x86>
    2aaa:	01a4      	lsls	r4, r4, #6
    2aac:	0a64      	lsrs	r4, r4, #9
    2aae:	b2db      	uxtb	r3, r3
    2ab0:	002a      	movs	r2, r5
    2ab2:	e7e0      	b.n	2a76 <__aeabi_i2f+0x2a>
    2ab4:	2200      	movs	r2, #0
    2ab6:	2300      	movs	r3, #0
    2ab8:	2400      	movs	r4, #0
    2aba:	e7dc      	b.n	2a76 <__aeabi_i2f+0x2a>
    2abc:	2205      	movs	r2, #5
    2abe:	0021      	movs	r1, r4
    2ac0:	1a12      	subs	r2, r2, r0
    2ac2:	40d1      	lsrs	r1, r2
    2ac4:	22b9      	movs	r2, #185	; 0xb9
    2ac6:	1ad2      	subs	r2, r2, r3
    2ac8:	4094      	lsls	r4, r2
    2aca:	1e62      	subs	r2, r4, #1
    2acc:	4194      	sbcs	r4, r2
    2ace:	430c      	orrs	r4, r1
    2ad0:	e7da      	b.n	2a88 <__aeabi_i2f+0x3c>
    2ad2:	4b05      	ldr	r3, [pc, #20]	; (2ae8 <__aeabi_i2f+0x9c>)
    2ad4:	002a      	movs	r2, r5
    2ad6:	401c      	ands	r4, r3
    2ad8:	239f      	movs	r3, #159	; 0x9f
    2ada:	01a4      	lsls	r4, r4, #6
    2adc:	1a1b      	subs	r3, r3, r0
    2ade:	0a64      	lsrs	r4, r4, #9
    2ae0:	b2db      	uxtb	r3, r3
    2ae2:	e7c8      	b.n	2a76 <__aeabi_i2f+0x2a>
    2ae4:	0022      	movs	r2, r4
    2ae6:	e7d5      	b.n	2a94 <__aeabi_i2f+0x48>
    2ae8:	fbffffff 	.word	0xfbffffff

00002aec <__aeabi_f2d>:
    2aec:	0041      	lsls	r1, r0, #1
    2aee:	0e09      	lsrs	r1, r1, #24
    2af0:	1c4b      	adds	r3, r1, #1
    2af2:	b570      	push	{r4, r5, r6, lr}
    2af4:	b2db      	uxtb	r3, r3
    2af6:	0246      	lsls	r6, r0, #9
    2af8:	0a75      	lsrs	r5, r6, #9
    2afa:	0fc4      	lsrs	r4, r0, #31
    2afc:	2b01      	cmp	r3, #1
    2afe:	dd14      	ble.n	2b2a <__aeabi_f2d+0x3e>
    2b00:	23e0      	movs	r3, #224	; 0xe0
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	076d      	lsls	r5, r5, #29
    2b06:	0b36      	lsrs	r6, r6, #12
    2b08:	18cb      	adds	r3, r1, r3
    2b0a:	2100      	movs	r1, #0
    2b0c:	0d0a      	lsrs	r2, r1, #20
    2b0e:	0028      	movs	r0, r5
    2b10:	0512      	lsls	r2, r2, #20
    2b12:	4d1c      	ldr	r5, [pc, #112]	; (2b84 <__aeabi_f2d+0x98>)
    2b14:	4332      	orrs	r2, r6
    2b16:	055b      	lsls	r3, r3, #21
    2b18:	402a      	ands	r2, r5
    2b1a:	085b      	lsrs	r3, r3, #1
    2b1c:	4313      	orrs	r3, r2
    2b1e:	005b      	lsls	r3, r3, #1
    2b20:	07e4      	lsls	r4, r4, #31
    2b22:	085b      	lsrs	r3, r3, #1
    2b24:	4323      	orrs	r3, r4
    2b26:	0019      	movs	r1, r3
    2b28:	bd70      	pop	{r4, r5, r6, pc}
    2b2a:	2900      	cmp	r1, #0
    2b2c:	d114      	bne.n	2b58 <__aeabi_f2d+0x6c>
    2b2e:	2d00      	cmp	r5, #0
    2b30:	d01e      	beq.n	2b70 <__aeabi_f2d+0x84>
    2b32:	0028      	movs	r0, r5
    2b34:	f000 f866 	bl	2c04 <__clzsi2>
    2b38:	280a      	cmp	r0, #10
    2b3a:	dc1c      	bgt.n	2b76 <__aeabi_f2d+0x8a>
    2b3c:	230b      	movs	r3, #11
    2b3e:	002a      	movs	r2, r5
    2b40:	1a1b      	subs	r3, r3, r0
    2b42:	40da      	lsrs	r2, r3
    2b44:	0003      	movs	r3, r0
    2b46:	3315      	adds	r3, #21
    2b48:	409d      	lsls	r5, r3
    2b4a:	4b0f      	ldr	r3, [pc, #60]	; (2b88 <__aeabi_f2d+0x9c>)
    2b4c:	0312      	lsls	r2, r2, #12
    2b4e:	1a1b      	subs	r3, r3, r0
    2b50:	055b      	lsls	r3, r3, #21
    2b52:	0b16      	lsrs	r6, r2, #12
    2b54:	0d5b      	lsrs	r3, r3, #21
    2b56:	e7d8      	b.n	2b0a <__aeabi_f2d+0x1e>
    2b58:	2d00      	cmp	r5, #0
    2b5a:	d006      	beq.n	2b6a <__aeabi_f2d+0x7e>
    2b5c:	0b32      	lsrs	r2, r6, #12
    2b5e:	2680      	movs	r6, #128	; 0x80
    2b60:	0336      	lsls	r6, r6, #12
    2b62:	076d      	lsls	r5, r5, #29
    2b64:	4316      	orrs	r6, r2
    2b66:	4b09      	ldr	r3, [pc, #36]	; (2b8c <__aeabi_f2d+0xa0>)
    2b68:	e7cf      	b.n	2b0a <__aeabi_f2d+0x1e>
    2b6a:	4b08      	ldr	r3, [pc, #32]	; (2b8c <__aeabi_f2d+0xa0>)
    2b6c:	2600      	movs	r6, #0
    2b6e:	e7cc      	b.n	2b0a <__aeabi_f2d+0x1e>
    2b70:	2300      	movs	r3, #0
    2b72:	2600      	movs	r6, #0
    2b74:	e7c9      	b.n	2b0a <__aeabi_f2d+0x1e>
    2b76:	0003      	movs	r3, r0
    2b78:	002a      	movs	r2, r5
    2b7a:	3b0b      	subs	r3, #11
    2b7c:	409a      	lsls	r2, r3
    2b7e:	2500      	movs	r5, #0
    2b80:	e7e3      	b.n	2b4a <__aeabi_f2d+0x5e>
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	800fffff 	.word	0x800fffff
    2b88:	00000389 	.word	0x00000389
    2b8c:	000007ff 	.word	0x000007ff

00002b90 <__aeabi_cfrcmple>:
    2b90:	4684      	mov	ip, r0
    2b92:	1c08      	adds	r0, r1, #0
    2b94:	4661      	mov	r1, ip
    2b96:	e7ff      	b.n	2b98 <__aeabi_cfcmpeq>

00002b98 <__aeabi_cfcmpeq>:
    2b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2b9a:	f000 f8d7 	bl	2d4c <__lesf2>
    2b9e:	2800      	cmp	r0, #0
    2ba0:	d401      	bmi.n	2ba6 <__aeabi_cfcmpeq+0xe>
    2ba2:	2100      	movs	r1, #0
    2ba4:	42c8      	cmn	r0, r1
    2ba6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002ba8 <__aeabi_fcmpeq>:
    2ba8:	b510      	push	{r4, lr}
    2baa:	f000 f869 	bl	2c80 <__eqsf2>
    2bae:	4240      	negs	r0, r0
    2bb0:	3001      	adds	r0, #1
    2bb2:	bd10      	pop	{r4, pc}

00002bb4 <__aeabi_fcmplt>:
    2bb4:	b510      	push	{r4, lr}
    2bb6:	f000 f8c9 	bl	2d4c <__lesf2>
    2bba:	2800      	cmp	r0, #0
    2bbc:	db01      	blt.n	2bc2 <__aeabi_fcmplt+0xe>
    2bbe:	2000      	movs	r0, #0
    2bc0:	bd10      	pop	{r4, pc}
    2bc2:	2001      	movs	r0, #1
    2bc4:	bd10      	pop	{r4, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)

00002bc8 <__aeabi_fcmple>:
    2bc8:	b510      	push	{r4, lr}
    2bca:	f000 f8bf 	bl	2d4c <__lesf2>
    2bce:	2800      	cmp	r0, #0
    2bd0:	dd01      	ble.n	2bd6 <__aeabi_fcmple+0xe>
    2bd2:	2000      	movs	r0, #0
    2bd4:	bd10      	pop	{r4, pc}
    2bd6:	2001      	movs	r0, #1
    2bd8:	bd10      	pop	{r4, pc}
    2bda:	46c0      	nop			; (mov r8, r8)

00002bdc <__aeabi_fcmpgt>:
    2bdc:	b510      	push	{r4, lr}
    2bde:	f000 f875 	bl	2ccc <__gesf2>
    2be2:	2800      	cmp	r0, #0
    2be4:	dc01      	bgt.n	2bea <__aeabi_fcmpgt+0xe>
    2be6:	2000      	movs	r0, #0
    2be8:	bd10      	pop	{r4, pc}
    2bea:	2001      	movs	r0, #1
    2bec:	bd10      	pop	{r4, pc}
    2bee:	46c0      	nop			; (mov r8, r8)

00002bf0 <__aeabi_fcmpge>:
    2bf0:	b510      	push	{r4, lr}
    2bf2:	f000 f86b 	bl	2ccc <__gesf2>
    2bf6:	2800      	cmp	r0, #0
    2bf8:	da01      	bge.n	2bfe <__aeabi_fcmpge+0xe>
    2bfa:	2000      	movs	r0, #0
    2bfc:	bd10      	pop	{r4, pc}
    2bfe:	2001      	movs	r0, #1
    2c00:	bd10      	pop	{r4, pc}
    2c02:	46c0      	nop			; (mov r8, r8)

00002c04 <__clzsi2>:
    2c04:	211c      	movs	r1, #28
    2c06:	2301      	movs	r3, #1
    2c08:	041b      	lsls	r3, r3, #16
    2c0a:	4298      	cmp	r0, r3
    2c0c:	d301      	bcc.n	2c12 <__clzsi2+0xe>
    2c0e:	0c00      	lsrs	r0, r0, #16
    2c10:	3910      	subs	r1, #16
    2c12:	0a1b      	lsrs	r3, r3, #8
    2c14:	4298      	cmp	r0, r3
    2c16:	d301      	bcc.n	2c1c <__clzsi2+0x18>
    2c18:	0a00      	lsrs	r0, r0, #8
    2c1a:	3908      	subs	r1, #8
    2c1c:	091b      	lsrs	r3, r3, #4
    2c1e:	4298      	cmp	r0, r3
    2c20:	d301      	bcc.n	2c26 <__clzsi2+0x22>
    2c22:	0900      	lsrs	r0, r0, #4
    2c24:	3904      	subs	r1, #4
    2c26:	a202      	add	r2, pc, #8	; (adr r2, 2c30 <__clzsi2+0x2c>)
    2c28:	5c10      	ldrb	r0, [r2, r0]
    2c2a:	1840      	adds	r0, r0, r1
    2c2c:	4770      	bx	lr
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	02020304 	.word	0x02020304
    2c34:	01010101 	.word	0x01010101
	...

00002c40 <__ctzsi2>:
    2c40:	4241      	negs	r1, r0
    2c42:	4008      	ands	r0, r1
    2c44:	211c      	movs	r1, #28
    2c46:	2301      	movs	r3, #1
    2c48:	041b      	lsls	r3, r3, #16
    2c4a:	4298      	cmp	r0, r3
    2c4c:	d301      	bcc.n	2c52 <__ctzsi2+0x12>
    2c4e:	0c00      	lsrs	r0, r0, #16
    2c50:	3910      	subs	r1, #16
    2c52:	0a1b      	lsrs	r3, r3, #8
    2c54:	4298      	cmp	r0, r3
    2c56:	d301      	bcc.n	2c5c <__ctzsi2+0x1c>
    2c58:	0a00      	lsrs	r0, r0, #8
    2c5a:	3908      	subs	r1, #8
    2c5c:	091b      	lsrs	r3, r3, #4
    2c5e:	4298      	cmp	r0, r3
    2c60:	d301      	bcc.n	2c66 <__ctzsi2+0x26>
    2c62:	0900      	lsrs	r0, r0, #4
    2c64:	3904      	subs	r1, #4
    2c66:	a202      	add	r2, pc, #8	; (adr r2, 2c70 <__ctzsi2+0x30>)
    2c68:	5c10      	ldrb	r0, [r2, r0]
    2c6a:	1a40      	subs	r0, r0, r1
    2c6c:	4770      	bx	lr
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	1d1d1c1b 	.word	0x1d1d1c1b
    2c74:	1e1e1e1e 	.word	0x1e1e1e1e
    2c78:	1f1f1f1f 	.word	0x1f1f1f1f
    2c7c:	1f1f1f1f 	.word	0x1f1f1f1f

00002c80 <__eqsf2>:
    2c80:	b570      	push	{r4, r5, r6, lr}
    2c82:	0042      	lsls	r2, r0, #1
    2c84:	0245      	lsls	r5, r0, #9
    2c86:	024e      	lsls	r6, r1, #9
    2c88:	004c      	lsls	r4, r1, #1
    2c8a:	0fc3      	lsrs	r3, r0, #31
    2c8c:	0a6d      	lsrs	r5, r5, #9
    2c8e:	0e12      	lsrs	r2, r2, #24
    2c90:	0a76      	lsrs	r6, r6, #9
    2c92:	0e24      	lsrs	r4, r4, #24
    2c94:	0fc9      	lsrs	r1, r1, #31
    2c96:	2001      	movs	r0, #1
    2c98:	2aff      	cmp	r2, #255	; 0xff
    2c9a:	d006      	beq.n	2caa <__eqsf2+0x2a>
    2c9c:	2cff      	cmp	r4, #255	; 0xff
    2c9e:	d003      	beq.n	2ca8 <__eqsf2+0x28>
    2ca0:	42a2      	cmp	r2, r4
    2ca2:	d101      	bne.n	2ca8 <__eqsf2+0x28>
    2ca4:	42b5      	cmp	r5, r6
    2ca6:	d006      	beq.n	2cb6 <__eqsf2+0x36>
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
    2caa:	2d00      	cmp	r5, #0
    2cac:	d1fc      	bne.n	2ca8 <__eqsf2+0x28>
    2cae:	2cff      	cmp	r4, #255	; 0xff
    2cb0:	d1fa      	bne.n	2ca8 <__eqsf2+0x28>
    2cb2:	2e00      	cmp	r6, #0
    2cb4:	d1f8      	bne.n	2ca8 <__eqsf2+0x28>
    2cb6:	428b      	cmp	r3, r1
    2cb8:	d006      	beq.n	2cc8 <__eqsf2+0x48>
    2cba:	2001      	movs	r0, #1
    2cbc:	2a00      	cmp	r2, #0
    2cbe:	d1f3      	bne.n	2ca8 <__eqsf2+0x28>
    2cc0:	0028      	movs	r0, r5
    2cc2:	1e45      	subs	r5, r0, #1
    2cc4:	41a8      	sbcs	r0, r5
    2cc6:	e7ef      	b.n	2ca8 <__eqsf2+0x28>
    2cc8:	2000      	movs	r0, #0
    2cca:	e7ed      	b.n	2ca8 <__eqsf2+0x28>

00002ccc <__gesf2>:
    2ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cce:	0042      	lsls	r2, r0, #1
    2cd0:	0245      	lsls	r5, r0, #9
    2cd2:	024c      	lsls	r4, r1, #9
    2cd4:	0fc3      	lsrs	r3, r0, #31
    2cd6:	0048      	lsls	r0, r1, #1
    2cd8:	0a6d      	lsrs	r5, r5, #9
    2cda:	0e12      	lsrs	r2, r2, #24
    2cdc:	0a64      	lsrs	r4, r4, #9
    2cde:	0e00      	lsrs	r0, r0, #24
    2ce0:	0fc9      	lsrs	r1, r1, #31
    2ce2:	2aff      	cmp	r2, #255	; 0xff
    2ce4:	d01e      	beq.n	2d24 <__gesf2+0x58>
    2ce6:	28ff      	cmp	r0, #255	; 0xff
    2ce8:	d021      	beq.n	2d2e <__gesf2+0x62>
    2cea:	2a00      	cmp	r2, #0
    2cec:	d10a      	bne.n	2d04 <__gesf2+0x38>
    2cee:	426e      	negs	r6, r5
    2cf0:	416e      	adcs	r6, r5
    2cf2:	b2f6      	uxtb	r6, r6
    2cf4:	2800      	cmp	r0, #0
    2cf6:	d10f      	bne.n	2d18 <__gesf2+0x4c>
    2cf8:	2c00      	cmp	r4, #0
    2cfa:	d10d      	bne.n	2d18 <__gesf2+0x4c>
    2cfc:	2000      	movs	r0, #0
    2cfe:	2d00      	cmp	r5, #0
    2d00:	d009      	beq.n	2d16 <__gesf2+0x4a>
    2d02:	e005      	b.n	2d10 <__gesf2+0x44>
    2d04:	2800      	cmp	r0, #0
    2d06:	d101      	bne.n	2d0c <__gesf2+0x40>
    2d08:	2c00      	cmp	r4, #0
    2d0a:	d001      	beq.n	2d10 <__gesf2+0x44>
    2d0c:	428b      	cmp	r3, r1
    2d0e:	d011      	beq.n	2d34 <__gesf2+0x68>
    2d10:	2101      	movs	r1, #1
    2d12:	4258      	negs	r0, r3
    2d14:	4308      	orrs	r0, r1
    2d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d18:	2e00      	cmp	r6, #0
    2d1a:	d0f7      	beq.n	2d0c <__gesf2+0x40>
    2d1c:	2001      	movs	r0, #1
    2d1e:	3901      	subs	r1, #1
    2d20:	4308      	orrs	r0, r1
    2d22:	e7f8      	b.n	2d16 <__gesf2+0x4a>
    2d24:	2d00      	cmp	r5, #0
    2d26:	d0de      	beq.n	2ce6 <__gesf2+0x1a>
    2d28:	2002      	movs	r0, #2
    2d2a:	4240      	negs	r0, r0
    2d2c:	e7f3      	b.n	2d16 <__gesf2+0x4a>
    2d2e:	2c00      	cmp	r4, #0
    2d30:	d0db      	beq.n	2cea <__gesf2+0x1e>
    2d32:	e7f9      	b.n	2d28 <__gesf2+0x5c>
    2d34:	4282      	cmp	r2, r0
    2d36:	dceb      	bgt.n	2d10 <__gesf2+0x44>
    2d38:	db04      	blt.n	2d44 <__gesf2+0x78>
    2d3a:	42a5      	cmp	r5, r4
    2d3c:	d8e8      	bhi.n	2d10 <__gesf2+0x44>
    2d3e:	2000      	movs	r0, #0
    2d40:	42a5      	cmp	r5, r4
    2d42:	d2e8      	bcs.n	2d16 <__gesf2+0x4a>
    2d44:	2101      	movs	r1, #1
    2d46:	1e58      	subs	r0, r3, #1
    2d48:	4308      	orrs	r0, r1
    2d4a:	e7e4      	b.n	2d16 <__gesf2+0x4a>

00002d4c <__lesf2>:
    2d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4e:	0042      	lsls	r2, r0, #1
    2d50:	024d      	lsls	r5, r1, #9
    2d52:	004c      	lsls	r4, r1, #1
    2d54:	0246      	lsls	r6, r0, #9
    2d56:	0a76      	lsrs	r6, r6, #9
    2d58:	0e12      	lsrs	r2, r2, #24
    2d5a:	0fc3      	lsrs	r3, r0, #31
    2d5c:	0a6d      	lsrs	r5, r5, #9
    2d5e:	0e24      	lsrs	r4, r4, #24
    2d60:	0fc9      	lsrs	r1, r1, #31
    2d62:	2aff      	cmp	r2, #255	; 0xff
    2d64:	d016      	beq.n	2d94 <__lesf2+0x48>
    2d66:	2cff      	cmp	r4, #255	; 0xff
    2d68:	d018      	beq.n	2d9c <__lesf2+0x50>
    2d6a:	2a00      	cmp	r2, #0
    2d6c:	d10a      	bne.n	2d84 <__lesf2+0x38>
    2d6e:	4270      	negs	r0, r6
    2d70:	4170      	adcs	r0, r6
    2d72:	b2c0      	uxtb	r0, r0
    2d74:	2c00      	cmp	r4, #0
    2d76:	d015      	beq.n	2da4 <__lesf2+0x58>
    2d78:	2800      	cmp	r0, #0
    2d7a:	d005      	beq.n	2d88 <__lesf2+0x3c>
    2d7c:	2001      	movs	r0, #1
    2d7e:	3901      	subs	r1, #1
    2d80:	4308      	orrs	r0, r1
    2d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d84:	2c00      	cmp	r4, #0
    2d86:	d013      	beq.n	2db0 <__lesf2+0x64>
    2d88:	4299      	cmp	r1, r3
    2d8a:	d014      	beq.n	2db6 <__lesf2+0x6a>
    2d8c:	2001      	movs	r0, #1
    2d8e:	425b      	negs	r3, r3
    2d90:	4318      	orrs	r0, r3
    2d92:	e7f6      	b.n	2d82 <__lesf2+0x36>
    2d94:	2002      	movs	r0, #2
    2d96:	2e00      	cmp	r6, #0
    2d98:	d1f3      	bne.n	2d82 <__lesf2+0x36>
    2d9a:	e7e4      	b.n	2d66 <__lesf2+0x1a>
    2d9c:	2002      	movs	r0, #2
    2d9e:	2d00      	cmp	r5, #0
    2da0:	d1ef      	bne.n	2d82 <__lesf2+0x36>
    2da2:	e7e2      	b.n	2d6a <__lesf2+0x1e>
    2da4:	2d00      	cmp	r5, #0
    2da6:	d1e7      	bne.n	2d78 <__lesf2+0x2c>
    2da8:	2000      	movs	r0, #0
    2daa:	2e00      	cmp	r6, #0
    2dac:	d0e9      	beq.n	2d82 <__lesf2+0x36>
    2dae:	e7ed      	b.n	2d8c <__lesf2+0x40>
    2db0:	2d00      	cmp	r5, #0
    2db2:	d1e9      	bne.n	2d88 <__lesf2+0x3c>
    2db4:	e7ea      	b.n	2d8c <__lesf2+0x40>
    2db6:	42a2      	cmp	r2, r4
    2db8:	dc06      	bgt.n	2dc8 <__lesf2+0x7c>
    2dba:	dbdf      	blt.n	2d7c <__lesf2+0x30>
    2dbc:	42ae      	cmp	r6, r5
    2dbe:	d803      	bhi.n	2dc8 <__lesf2+0x7c>
    2dc0:	2000      	movs	r0, #0
    2dc2:	42ae      	cmp	r6, r5
    2dc4:	d3da      	bcc.n	2d7c <__lesf2+0x30>
    2dc6:	e7dc      	b.n	2d82 <__lesf2+0x36>
    2dc8:	2001      	movs	r0, #1
    2dca:	4249      	negs	r1, r1
    2dcc:	4308      	orrs	r0, r1
    2dce:	e7d8      	b.n	2d82 <__lesf2+0x36>

00002dd0 <__libc_init_array>:
    2dd0:	b570      	push	{r4, r5, r6, lr}
    2dd2:	2600      	movs	r6, #0
    2dd4:	4d0c      	ldr	r5, [pc, #48]	; (2e08 <__libc_init_array+0x38>)
    2dd6:	4c0d      	ldr	r4, [pc, #52]	; (2e0c <__libc_init_array+0x3c>)
    2dd8:	1b64      	subs	r4, r4, r5
    2dda:	10a4      	asrs	r4, r4, #2
    2ddc:	42a6      	cmp	r6, r4
    2dde:	d109      	bne.n	2df4 <__libc_init_array+0x24>
    2de0:	2600      	movs	r6, #0
    2de2:	f001 f811 	bl	3e08 <_init>
    2de6:	4d0a      	ldr	r5, [pc, #40]	; (2e10 <__libc_init_array+0x40>)
    2de8:	4c0a      	ldr	r4, [pc, #40]	; (2e14 <__libc_init_array+0x44>)
    2dea:	1b64      	subs	r4, r4, r5
    2dec:	10a4      	asrs	r4, r4, #2
    2dee:	42a6      	cmp	r6, r4
    2df0:	d105      	bne.n	2dfe <__libc_init_array+0x2e>
    2df2:	bd70      	pop	{r4, r5, r6, pc}
    2df4:	00b3      	lsls	r3, r6, #2
    2df6:	58eb      	ldr	r3, [r5, r3]
    2df8:	4798      	blx	r3
    2dfa:	3601      	adds	r6, #1
    2dfc:	e7ee      	b.n	2ddc <__libc_init_array+0xc>
    2dfe:	00b3      	lsls	r3, r6, #2
    2e00:	58eb      	ldr	r3, [r5, r3]
    2e02:	4798      	blx	r3
    2e04:	3601      	adds	r6, #1
    2e06:	e7f2      	b.n	2dee <__libc_init_array+0x1e>
    2e08:	00003e14 	.word	0x00003e14
    2e0c:	00003e14 	.word	0x00003e14
    2e10:	00003e14 	.word	0x00003e14
    2e14:	00003e18 	.word	0x00003e18

00002e18 <memset>:
    2e18:	0003      	movs	r3, r0
    2e1a:	1882      	adds	r2, r0, r2
    2e1c:	4293      	cmp	r3, r2
    2e1e:	d100      	bne.n	2e22 <memset+0xa>
    2e20:	4770      	bx	lr
    2e22:	7019      	strb	r1, [r3, #0]
    2e24:	3301      	adds	r3, #1
    2e26:	e7f9      	b.n	2e1c <memset+0x4>

00002e28 <strlen>:
    2e28:	2300      	movs	r3, #0
    2e2a:	5cc2      	ldrb	r2, [r0, r3]
    2e2c:	3301      	adds	r3, #1
    2e2e:	2a00      	cmp	r2, #0
    2e30:	d1fb      	bne.n	2e2a <strlen+0x2>
    2e32:	1e58      	subs	r0, r3, #1
    2e34:	4770      	bx	lr

00002e36 <strncpy>:
    2e36:	b570      	push	{r4, r5, r6, lr}
    2e38:	0004      	movs	r4, r0
    2e3a:	2a00      	cmp	r2, #0
    2e3c:	d100      	bne.n	2e40 <strncpy+0xa>
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
    2e40:	780d      	ldrb	r5, [r1, #0]
    2e42:	1e56      	subs	r6, r2, #1
    2e44:	1c63      	adds	r3, r4, #1
    2e46:	7025      	strb	r5, [r4, #0]
    2e48:	3101      	adds	r1, #1
    2e4a:	2d00      	cmp	r5, #0
    2e4c:	d105      	bne.n	2e5a <strncpy+0x24>
    2e4e:	18a4      	adds	r4, r4, r2
    2e50:	429c      	cmp	r4, r3
    2e52:	d0f4      	beq.n	2e3e <strncpy+0x8>
    2e54:	701d      	strb	r5, [r3, #0]
    2e56:	3301      	adds	r3, #1
    2e58:	e7fa      	b.n	2e50 <strncpy+0x1a>
    2e5a:	001c      	movs	r4, r3
    2e5c:	0032      	movs	r2, r6
    2e5e:	e7ec      	b.n	2e3a <strncpy+0x4>

00002e60 <_vsniprintf_r>:
    2e60:	b530      	push	{r4, r5, lr}
    2e62:	0014      	movs	r4, r2
    2e64:	b09b      	sub	sp, #108	; 0x6c
    2e66:	0005      	movs	r5, r0
    2e68:	001a      	movs	r2, r3
    2e6a:	2c00      	cmp	r4, #0
    2e6c:	da05      	bge.n	2e7a <_vsniprintf_r+0x1a>
    2e6e:	238b      	movs	r3, #139	; 0x8b
    2e70:	6003      	str	r3, [r0, #0]
    2e72:	2001      	movs	r0, #1
    2e74:	4240      	negs	r0, r0
    2e76:	b01b      	add	sp, #108	; 0x6c
    2e78:	bd30      	pop	{r4, r5, pc}
    2e7a:	2382      	movs	r3, #130	; 0x82
    2e7c:	4668      	mov	r0, sp
    2e7e:	009b      	lsls	r3, r3, #2
    2e80:	8183      	strh	r3, [r0, #12]
    2e82:	2300      	movs	r3, #0
    2e84:	9100      	str	r1, [sp, #0]
    2e86:	9104      	str	r1, [sp, #16]
    2e88:	429c      	cmp	r4, r3
    2e8a:	d000      	beq.n	2e8e <_vsniprintf_r+0x2e>
    2e8c:	1e63      	subs	r3, r4, #1
    2e8e:	9302      	str	r3, [sp, #8]
    2e90:	9305      	str	r3, [sp, #20]
    2e92:	2301      	movs	r3, #1
    2e94:	4669      	mov	r1, sp
    2e96:	425b      	negs	r3, r3
    2e98:	81cb      	strh	r3, [r1, #14]
    2e9a:	0028      	movs	r0, r5
    2e9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2e9e:	f000 f8d7 	bl	3050 <_svfiprintf_r>
    2ea2:	1c43      	adds	r3, r0, #1
    2ea4:	da01      	bge.n	2eaa <_vsniprintf_r+0x4a>
    2ea6:	238b      	movs	r3, #139	; 0x8b
    2ea8:	602b      	str	r3, [r5, #0]
    2eaa:	2c00      	cmp	r4, #0
    2eac:	d0e3      	beq.n	2e76 <_vsniprintf_r+0x16>
    2eae:	2300      	movs	r3, #0
    2eb0:	9a00      	ldr	r2, [sp, #0]
    2eb2:	7013      	strb	r3, [r2, #0]
    2eb4:	e7df      	b.n	2e76 <_vsniprintf_r+0x16>
	...

00002eb8 <vsniprintf>:
    2eb8:	b507      	push	{r0, r1, r2, lr}
    2eba:	9300      	str	r3, [sp, #0]
    2ebc:	0013      	movs	r3, r2
    2ebe:	000a      	movs	r2, r1
    2ec0:	0001      	movs	r1, r0
    2ec2:	4802      	ldr	r0, [pc, #8]	; (2ecc <vsniprintf+0x14>)
    2ec4:	6800      	ldr	r0, [r0, #0]
    2ec6:	f7ff ffcb 	bl	2e60 <_vsniprintf_r>
    2eca:	bd0e      	pop	{r1, r2, r3, pc}
    2ecc:	20000000 	.word	0x20000000

00002ed0 <_malloc_r>:
    2ed0:	2303      	movs	r3, #3
    2ed2:	b570      	push	{r4, r5, r6, lr}
    2ed4:	1ccd      	adds	r5, r1, #3
    2ed6:	439d      	bics	r5, r3
    2ed8:	3508      	adds	r5, #8
    2eda:	0006      	movs	r6, r0
    2edc:	2d0c      	cmp	r5, #12
    2ede:	d21e      	bcs.n	2f1e <_malloc_r+0x4e>
    2ee0:	250c      	movs	r5, #12
    2ee2:	42a9      	cmp	r1, r5
    2ee4:	d81d      	bhi.n	2f22 <_malloc_r+0x52>
    2ee6:	0030      	movs	r0, r6
    2ee8:	f000 fb76 	bl	35d8 <__malloc_lock>
    2eec:	4a25      	ldr	r2, [pc, #148]	; (2f84 <_malloc_r+0xb4>)
    2eee:	6814      	ldr	r4, [r2, #0]
    2ef0:	0021      	movs	r1, r4
    2ef2:	2900      	cmp	r1, #0
    2ef4:	d119      	bne.n	2f2a <_malloc_r+0x5a>
    2ef6:	4c24      	ldr	r4, [pc, #144]	; (2f88 <_malloc_r+0xb8>)
    2ef8:	6823      	ldr	r3, [r4, #0]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d103      	bne.n	2f06 <_malloc_r+0x36>
    2efe:	0030      	movs	r0, r6
    2f00:	f000 fb32 	bl	3568 <_sbrk_r>
    2f04:	6020      	str	r0, [r4, #0]
    2f06:	0029      	movs	r1, r5
    2f08:	0030      	movs	r0, r6
    2f0a:	f000 fb2d 	bl	3568 <_sbrk_r>
    2f0e:	1c43      	adds	r3, r0, #1
    2f10:	d12c      	bne.n	2f6c <_malloc_r+0x9c>
    2f12:	230c      	movs	r3, #12
    2f14:	0030      	movs	r0, r6
    2f16:	6033      	str	r3, [r6, #0]
    2f18:	f000 fb5f 	bl	35da <__malloc_unlock>
    2f1c:	e003      	b.n	2f26 <_malloc_r+0x56>
    2f1e:	2d00      	cmp	r5, #0
    2f20:	dadf      	bge.n	2ee2 <_malloc_r+0x12>
    2f22:	230c      	movs	r3, #12
    2f24:	6033      	str	r3, [r6, #0]
    2f26:	2000      	movs	r0, #0
    2f28:	bd70      	pop	{r4, r5, r6, pc}
    2f2a:	680b      	ldr	r3, [r1, #0]
    2f2c:	1b5b      	subs	r3, r3, r5
    2f2e:	d41a      	bmi.n	2f66 <_malloc_r+0x96>
    2f30:	2b0b      	cmp	r3, #11
    2f32:	d903      	bls.n	2f3c <_malloc_r+0x6c>
    2f34:	600b      	str	r3, [r1, #0]
    2f36:	18cc      	adds	r4, r1, r3
    2f38:	6025      	str	r5, [r4, #0]
    2f3a:	e003      	b.n	2f44 <_malloc_r+0x74>
    2f3c:	428c      	cmp	r4, r1
    2f3e:	d10e      	bne.n	2f5e <_malloc_r+0x8e>
    2f40:	6863      	ldr	r3, [r4, #4]
    2f42:	6013      	str	r3, [r2, #0]
    2f44:	0030      	movs	r0, r6
    2f46:	f000 fb48 	bl	35da <__malloc_unlock>
    2f4a:	0020      	movs	r0, r4
    2f4c:	2207      	movs	r2, #7
    2f4e:	300b      	adds	r0, #11
    2f50:	1d23      	adds	r3, r4, #4
    2f52:	4390      	bics	r0, r2
    2f54:	1ac3      	subs	r3, r0, r3
    2f56:	d0e7      	beq.n	2f28 <_malloc_r+0x58>
    2f58:	425a      	negs	r2, r3
    2f5a:	50e2      	str	r2, [r4, r3]
    2f5c:	e7e4      	b.n	2f28 <_malloc_r+0x58>
    2f5e:	684b      	ldr	r3, [r1, #4]
    2f60:	6063      	str	r3, [r4, #4]
    2f62:	000c      	movs	r4, r1
    2f64:	e7ee      	b.n	2f44 <_malloc_r+0x74>
    2f66:	000c      	movs	r4, r1
    2f68:	6849      	ldr	r1, [r1, #4]
    2f6a:	e7c2      	b.n	2ef2 <_malloc_r+0x22>
    2f6c:	2303      	movs	r3, #3
    2f6e:	1cc4      	adds	r4, r0, #3
    2f70:	439c      	bics	r4, r3
    2f72:	42a0      	cmp	r0, r4
    2f74:	d0e0      	beq.n	2f38 <_malloc_r+0x68>
    2f76:	1a21      	subs	r1, r4, r0
    2f78:	0030      	movs	r0, r6
    2f7a:	f000 faf5 	bl	3568 <_sbrk_r>
    2f7e:	1c43      	adds	r3, r0, #1
    2f80:	d1da      	bne.n	2f38 <_malloc_r+0x68>
    2f82:	e7c6      	b.n	2f12 <_malloc_r+0x42>
    2f84:	20000154 	.word	0x20000154
    2f88:	20000158 	.word	0x20000158

00002f8c <__ssputs_r>:
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	688e      	ldr	r6, [r1, #8]
    2f90:	b085      	sub	sp, #20
    2f92:	0007      	movs	r7, r0
    2f94:	000c      	movs	r4, r1
    2f96:	9203      	str	r2, [sp, #12]
    2f98:	9301      	str	r3, [sp, #4]
    2f9a:	429e      	cmp	r6, r3
    2f9c:	d839      	bhi.n	3012 <__ssputs_r+0x86>
    2f9e:	2390      	movs	r3, #144	; 0x90
    2fa0:	898a      	ldrh	r2, [r1, #12]
    2fa2:	00db      	lsls	r3, r3, #3
    2fa4:	421a      	tst	r2, r3
    2fa6:	d034      	beq.n	3012 <__ssputs_r+0x86>
    2fa8:	2503      	movs	r5, #3
    2faa:	6909      	ldr	r1, [r1, #16]
    2fac:	6823      	ldr	r3, [r4, #0]
    2fae:	1a5b      	subs	r3, r3, r1
    2fb0:	9302      	str	r3, [sp, #8]
    2fb2:	6963      	ldr	r3, [r4, #20]
    2fb4:	9802      	ldr	r0, [sp, #8]
    2fb6:	435d      	muls	r5, r3
    2fb8:	0feb      	lsrs	r3, r5, #31
    2fba:	195d      	adds	r5, r3, r5
    2fbc:	9b01      	ldr	r3, [sp, #4]
    2fbe:	106d      	asrs	r5, r5, #1
    2fc0:	3301      	adds	r3, #1
    2fc2:	181b      	adds	r3, r3, r0
    2fc4:	42ab      	cmp	r3, r5
    2fc6:	d900      	bls.n	2fca <__ssputs_r+0x3e>
    2fc8:	001d      	movs	r5, r3
    2fca:	0553      	lsls	r3, r2, #21
    2fcc:	d532      	bpl.n	3034 <__ssputs_r+0xa8>
    2fce:	0029      	movs	r1, r5
    2fd0:	0038      	movs	r0, r7
    2fd2:	f7ff ff7d 	bl	2ed0 <_malloc_r>
    2fd6:	1e06      	subs	r6, r0, #0
    2fd8:	d109      	bne.n	2fee <__ssputs_r+0x62>
    2fda:	230c      	movs	r3, #12
    2fdc:	603b      	str	r3, [r7, #0]
    2fde:	2340      	movs	r3, #64	; 0x40
    2fe0:	2001      	movs	r0, #1
    2fe2:	89a2      	ldrh	r2, [r4, #12]
    2fe4:	4240      	negs	r0, r0
    2fe6:	4313      	orrs	r3, r2
    2fe8:	81a3      	strh	r3, [r4, #12]
    2fea:	b005      	add	sp, #20
    2fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fee:	9a02      	ldr	r2, [sp, #8]
    2ff0:	6921      	ldr	r1, [r4, #16]
    2ff2:	f000 fad6 	bl	35a2 <memcpy>
    2ff6:	89a3      	ldrh	r3, [r4, #12]
    2ff8:	4a14      	ldr	r2, [pc, #80]	; (304c <__ssputs_r+0xc0>)
    2ffa:	401a      	ands	r2, r3
    2ffc:	2380      	movs	r3, #128	; 0x80
    2ffe:	4313      	orrs	r3, r2
    3000:	81a3      	strh	r3, [r4, #12]
    3002:	9b02      	ldr	r3, [sp, #8]
    3004:	6126      	str	r6, [r4, #16]
    3006:	18f6      	adds	r6, r6, r3
    3008:	6026      	str	r6, [r4, #0]
    300a:	6165      	str	r5, [r4, #20]
    300c:	9e01      	ldr	r6, [sp, #4]
    300e:	1aed      	subs	r5, r5, r3
    3010:	60a5      	str	r5, [r4, #8]
    3012:	9b01      	ldr	r3, [sp, #4]
    3014:	42b3      	cmp	r3, r6
    3016:	d200      	bcs.n	301a <__ssputs_r+0x8e>
    3018:	001e      	movs	r6, r3
    301a:	0032      	movs	r2, r6
    301c:	9903      	ldr	r1, [sp, #12]
    301e:	6820      	ldr	r0, [r4, #0]
    3020:	f000 fac8 	bl	35b4 <memmove>
    3024:	68a3      	ldr	r3, [r4, #8]
    3026:	2000      	movs	r0, #0
    3028:	1b9b      	subs	r3, r3, r6
    302a:	60a3      	str	r3, [r4, #8]
    302c:	6823      	ldr	r3, [r4, #0]
    302e:	199e      	adds	r6, r3, r6
    3030:	6026      	str	r6, [r4, #0]
    3032:	e7da      	b.n	2fea <__ssputs_r+0x5e>
    3034:	002a      	movs	r2, r5
    3036:	0038      	movs	r0, r7
    3038:	f000 fb1a 	bl	3670 <_realloc_r>
    303c:	1e06      	subs	r6, r0, #0
    303e:	d1e0      	bne.n	3002 <__ssputs_r+0x76>
    3040:	6921      	ldr	r1, [r4, #16]
    3042:	0038      	movs	r0, r7
    3044:	f000 faca 	bl	35dc <_free_r>
    3048:	e7c7      	b.n	2fda <__ssputs_r+0x4e>
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	fffffb7f 	.word	0xfffffb7f

00003050 <_svfiprintf_r>:
    3050:	b5f0      	push	{r4, r5, r6, r7, lr}
    3052:	b09f      	sub	sp, #124	; 0x7c
    3054:	9002      	str	r0, [sp, #8]
    3056:	9305      	str	r3, [sp, #20]
    3058:	898b      	ldrh	r3, [r1, #12]
    305a:	000f      	movs	r7, r1
    305c:	0016      	movs	r6, r2
    305e:	061b      	lsls	r3, r3, #24
    3060:	d511      	bpl.n	3086 <_svfiprintf_r+0x36>
    3062:	690b      	ldr	r3, [r1, #16]
    3064:	2b00      	cmp	r3, #0
    3066:	d10e      	bne.n	3086 <_svfiprintf_r+0x36>
    3068:	2140      	movs	r1, #64	; 0x40
    306a:	f7ff ff31 	bl	2ed0 <_malloc_r>
    306e:	6038      	str	r0, [r7, #0]
    3070:	6138      	str	r0, [r7, #16]
    3072:	2800      	cmp	r0, #0
    3074:	d105      	bne.n	3082 <_svfiprintf_r+0x32>
    3076:	230c      	movs	r3, #12
    3078:	9a02      	ldr	r2, [sp, #8]
    307a:	3801      	subs	r0, #1
    307c:	6013      	str	r3, [r2, #0]
    307e:	b01f      	add	sp, #124	; 0x7c
    3080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3082:	2340      	movs	r3, #64	; 0x40
    3084:	617b      	str	r3, [r7, #20]
    3086:	2300      	movs	r3, #0
    3088:	ad06      	add	r5, sp, #24
    308a:	616b      	str	r3, [r5, #20]
    308c:	3320      	adds	r3, #32
    308e:	766b      	strb	r3, [r5, #25]
    3090:	3310      	adds	r3, #16
    3092:	76ab      	strb	r3, [r5, #26]
    3094:	0034      	movs	r4, r6
    3096:	7823      	ldrb	r3, [r4, #0]
    3098:	2b00      	cmp	r3, #0
    309a:	d147      	bne.n	312c <_svfiprintf_r+0xdc>
    309c:	1ba3      	subs	r3, r4, r6
    309e:	9304      	str	r3, [sp, #16]
    30a0:	d00d      	beq.n	30be <_svfiprintf_r+0x6e>
    30a2:	1ba3      	subs	r3, r4, r6
    30a4:	0032      	movs	r2, r6
    30a6:	0039      	movs	r1, r7
    30a8:	9802      	ldr	r0, [sp, #8]
    30aa:	f7ff ff6f 	bl	2f8c <__ssputs_r>
    30ae:	1c43      	adds	r3, r0, #1
    30b0:	d100      	bne.n	30b4 <_svfiprintf_r+0x64>
    30b2:	e0b5      	b.n	3220 <_svfiprintf_r+0x1d0>
    30b4:	696a      	ldr	r2, [r5, #20]
    30b6:	9b04      	ldr	r3, [sp, #16]
    30b8:	4694      	mov	ip, r2
    30ba:	4463      	add	r3, ip
    30bc:	616b      	str	r3, [r5, #20]
    30be:	7823      	ldrb	r3, [r4, #0]
    30c0:	2b00      	cmp	r3, #0
    30c2:	d100      	bne.n	30c6 <_svfiprintf_r+0x76>
    30c4:	e0ac      	b.n	3220 <_svfiprintf_r+0x1d0>
    30c6:	2201      	movs	r2, #1
    30c8:	2300      	movs	r3, #0
    30ca:	4252      	negs	r2, r2
    30cc:	606a      	str	r2, [r5, #4]
    30ce:	a902      	add	r1, sp, #8
    30d0:	3254      	adds	r2, #84	; 0x54
    30d2:	1852      	adds	r2, r2, r1
    30d4:	3401      	adds	r4, #1
    30d6:	602b      	str	r3, [r5, #0]
    30d8:	60eb      	str	r3, [r5, #12]
    30da:	60ab      	str	r3, [r5, #8]
    30dc:	7013      	strb	r3, [r2, #0]
    30de:	65ab      	str	r3, [r5, #88]	; 0x58
    30e0:	4e58      	ldr	r6, [pc, #352]	; (3244 <_svfiprintf_r+0x1f4>)
    30e2:	2205      	movs	r2, #5
    30e4:	7821      	ldrb	r1, [r4, #0]
    30e6:	0030      	movs	r0, r6
    30e8:	f000 fa50 	bl	358c <memchr>
    30ec:	1c62      	adds	r2, r4, #1
    30ee:	2800      	cmp	r0, #0
    30f0:	d120      	bne.n	3134 <_svfiprintf_r+0xe4>
    30f2:	6829      	ldr	r1, [r5, #0]
    30f4:	06cb      	lsls	r3, r1, #27
    30f6:	d504      	bpl.n	3102 <_svfiprintf_r+0xb2>
    30f8:	2353      	movs	r3, #83	; 0x53
    30fa:	ae02      	add	r6, sp, #8
    30fc:	3020      	adds	r0, #32
    30fe:	199b      	adds	r3, r3, r6
    3100:	7018      	strb	r0, [r3, #0]
    3102:	070b      	lsls	r3, r1, #28
    3104:	d504      	bpl.n	3110 <_svfiprintf_r+0xc0>
    3106:	2353      	movs	r3, #83	; 0x53
    3108:	202b      	movs	r0, #43	; 0x2b
    310a:	ae02      	add	r6, sp, #8
    310c:	199b      	adds	r3, r3, r6
    310e:	7018      	strb	r0, [r3, #0]
    3110:	7823      	ldrb	r3, [r4, #0]
    3112:	2b2a      	cmp	r3, #42	; 0x2a
    3114:	d016      	beq.n	3144 <_svfiprintf_r+0xf4>
    3116:	2000      	movs	r0, #0
    3118:	210a      	movs	r1, #10
    311a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    311c:	7822      	ldrb	r2, [r4, #0]
    311e:	3a30      	subs	r2, #48	; 0x30
    3120:	2a09      	cmp	r2, #9
    3122:	d955      	bls.n	31d0 <_svfiprintf_r+0x180>
    3124:	2800      	cmp	r0, #0
    3126:	d015      	beq.n	3154 <_svfiprintf_r+0x104>
    3128:	9309      	str	r3, [sp, #36]	; 0x24
    312a:	e013      	b.n	3154 <_svfiprintf_r+0x104>
    312c:	2b25      	cmp	r3, #37	; 0x25
    312e:	d0b5      	beq.n	309c <_svfiprintf_r+0x4c>
    3130:	3401      	adds	r4, #1
    3132:	e7b0      	b.n	3096 <_svfiprintf_r+0x46>
    3134:	2301      	movs	r3, #1
    3136:	1b80      	subs	r0, r0, r6
    3138:	4083      	lsls	r3, r0
    313a:	6829      	ldr	r1, [r5, #0]
    313c:	0014      	movs	r4, r2
    313e:	430b      	orrs	r3, r1
    3140:	602b      	str	r3, [r5, #0]
    3142:	e7cd      	b.n	30e0 <_svfiprintf_r+0x90>
    3144:	9b05      	ldr	r3, [sp, #20]
    3146:	1d18      	adds	r0, r3, #4
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	9005      	str	r0, [sp, #20]
    314c:	2b00      	cmp	r3, #0
    314e:	db39      	blt.n	31c4 <_svfiprintf_r+0x174>
    3150:	9309      	str	r3, [sp, #36]	; 0x24
    3152:	0014      	movs	r4, r2
    3154:	7823      	ldrb	r3, [r4, #0]
    3156:	2b2e      	cmp	r3, #46	; 0x2e
    3158:	d10b      	bne.n	3172 <_svfiprintf_r+0x122>
    315a:	7863      	ldrb	r3, [r4, #1]
    315c:	1c62      	adds	r2, r4, #1
    315e:	2b2a      	cmp	r3, #42	; 0x2a
    3160:	d13e      	bne.n	31e0 <_svfiprintf_r+0x190>
    3162:	9b05      	ldr	r3, [sp, #20]
    3164:	3402      	adds	r4, #2
    3166:	1d1a      	adds	r2, r3, #4
    3168:	681b      	ldr	r3, [r3, #0]
    316a:	9205      	str	r2, [sp, #20]
    316c:	2b00      	cmp	r3, #0
    316e:	db34      	blt.n	31da <_svfiprintf_r+0x18a>
    3170:	9307      	str	r3, [sp, #28]
    3172:	4e35      	ldr	r6, [pc, #212]	; (3248 <_svfiprintf_r+0x1f8>)
    3174:	7821      	ldrb	r1, [r4, #0]
    3176:	2203      	movs	r2, #3
    3178:	0030      	movs	r0, r6
    317a:	f000 fa07 	bl	358c <memchr>
    317e:	2800      	cmp	r0, #0
    3180:	d006      	beq.n	3190 <_svfiprintf_r+0x140>
    3182:	2340      	movs	r3, #64	; 0x40
    3184:	1b80      	subs	r0, r0, r6
    3186:	4083      	lsls	r3, r0
    3188:	682a      	ldr	r2, [r5, #0]
    318a:	3401      	adds	r4, #1
    318c:	4313      	orrs	r3, r2
    318e:	602b      	str	r3, [r5, #0]
    3190:	7821      	ldrb	r1, [r4, #0]
    3192:	2206      	movs	r2, #6
    3194:	482d      	ldr	r0, [pc, #180]	; (324c <_svfiprintf_r+0x1fc>)
    3196:	1c66      	adds	r6, r4, #1
    3198:	7629      	strb	r1, [r5, #24]
    319a:	f000 f9f7 	bl	358c <memchr>
    319e:	2800      	cmp	r0, #0
    31a0:	d046      	beq.n	3230 <_svfiprintf_r+0x1e0>
    31a2:	4b2b      	ldr	r3, [pc, #172]	; (3250 <_svfiprintf_r+0x200>)
    31a4:	2b00      	cmp	r3, #0
    31a6:	d12f      	bne.n	3208 <_svfiprintf_r+0x1b8>
    31a8:	6829      	ldr	r1, [r5, #0]
    31aa:	9b05      	ldr	r3, [sp, #20]
    31ac:	2207      	movs	r2, #7
    31ae:	05c9      	lsls	r1, r1, #23
    31b0:	d528      	bpl.n	3204 <_svfiprintf_r+0x1b4>
    31b2:	189b      	adds	r3, r3, r2
    31b4:	4393      	bics	r3, r2
    31b6:	3308      	adds	r3, #8
    31b8:	9305      	str	r3, [sp, #20]
    31ba:	696b      	ldr	r3, [r5, #20]
    31bc:	9a03      	ldr	r2, [sp, #12]
    31be:	189b      	adds	r3, r3, r2
    31c0:	616b      	str	r3, [r5, #20]
    31c2:	e767      	b.n	3094 <_svfiprintf_r+0x44>
    31c4:	425b      	negs	r3, r3
    31c6:	60eb      	str	r3, [r5, #12]
    31c8:	2302      	movs	r3, #2
    31ca:	430b      	orrs	r3, r1
    31cc:	602b      	str	r3, [r5, #0]
    31ce:	e7c0      	b.n	3152 <_svfiprintf_r+0x102>
    31d0:	434b      	muls	r3, r1
    31d2:	3401      	adds	r4, #1
    31d4:	189b      	adds	r3, r3, r2
    31d6:	2001      	movs	r0, #1
    31d8:	e7a0      	b.n	311c <_svfiprintf_r+0xcc>
    31da:	2301      	movs	r3, #1
    31dc:	425b      	negs	r3, r3
    31de:	e7c7      	b.n	3170 <_svfiprintf_r+0x120>
    31e0:	2300      	movs	r3, #0
    31e2:	0014      	movs	r4, r2
    31e4:	200a      	movs	r0, #10
    31e6:	001a      	movs	r2, r3
    31e8:	606b      	str	r3, [r5, #4]
    31ea:	7821      	ldrb	r1, [r4, #0]
    31ec:	3930      	subs	r1, #48	; 0x30
    31ee:	2909      	cmp	r1, #9
    31f0:	d903      	bls.n	31fa <_svfiprintf_r+0x1aa>
    31f2:	2b00      	cmp	r3, #0
    31f4:	d0bd      	beq.n	3172 <_svfiprintf_r+0x122>
    31f6:	9207      	str	r2, [sp, #28]
    31f8:	e7bb      	b.n	3172 <_svfiprintf_r+0x122>
    31fa:	4342      	muls	r2, r0
    31fc:	3401      	adds	r4, #1
    31fe:	1852      	adds	r2, r2, r1
    3200:	2301      	movs	r3, #1
    3202:	e7f2      	b.n	31ea <_svfiprintf_r+0x19a>
    3204:	3307      	adds	r3, #7
    3206:	e7d5      	b.n	31b4 <_svfiprintf_r+0x164>
    3208:	ab05      	add	r3, sp, #20
    320a:	9300      	str	r3, [sp, #0]
    320c:	003a      	movs	r2, r7
    320e:	4b11      	ldr	r3, [pc, #68]	; (3254 <_svfiprintf_r+0x204>)
    3210:	0029      	movs	r1, r5
    3212:	9802      	ldr	r0, [sp, #8]
    3214:	e000      	b.n	3218 <_svfiprintf_r+0x1c8>
    3216:	bf00      	nop
    3218:	9003      	str	r0, [sp, #12]
    321a:	9b03      	ldr	r3, [sp, #12]
    321c:	3301      	adds	r3, #1
    321e:	d1cc      	bne.n	31ba <_svfiprintf_r+0x16a>
    3220:	89bb      	ldrh	r3, [r7, #12]
    3222:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3224:	065b      	lsls	r3, r3, #25
    3226:	d400      	bmi.n	322a <_svfiprintf_r+0x1da>
    3228:	e729      	b.n	307e <_svfiprintf_r+0x2e>
    322a:	2001      	movs	r0, #1
    322c:	4240      	negs	r0, r0
    322e:	e726      	b.n	307e <_svfiprintf_r+0x2e>
    3230:	ab05      	add	r3, sp, #20
    3232:	9300      	str	r3, [sp, #0]
    3234:	003a      	movs	r2, r7
    3236:	4b07      	ldr	r3, [pc, #28]	; (3254 <_svfiprintf_r+0x204>)
    3238:	0029      	movs	r1, r5
    323a:	9802      	ldr	r0, [sp, #8]
    323c:	f000 f87a 	bl	3334 <_printf_i>
    3240:	e7ea      	b.n	3218 <_svfiprintf_r+0x1c8>
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	00003dd4 	.word	0x00003dd4
    3248:	00003dda 	.word	0x00003dda
    324c:	00003dde 	.word	0x00003dde
    3250:	00000000 	.word	0x00000000
    3254:	00002f8d 	.word	0x00002f8d

00003258 <_printf_common>:
    3258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    325a:	0015      	movs	r5, r2
    325c:	9301      	str	r3, [sp, #4]
    325e:	688a      	ldr	r2, [r1, #8]
    3260:	690b      	ldr	r3, [r1, #16]
    3262:	9000      	str	r0, [sp, #0]
    3264:	000c      	movs	r4, r1
    3266:	4293      	cmp	r3, r2
    3268:	da00      	bge.n	326c <_printf_common+0x14>
    326a:	0013      	movs	r3, r2
    326c:	0022      	movs	r2, r4
    326e:	602b      	str	r3, [r5, #0]
    3270:	3243      	adds	r2, #67	; 0x43
    3272:	7812      	ldrb	r2, [r2, #0]
    3274:	2a00      	cmp	r2, #0
    3276:	d001      	beq.n	327c <_printf_common+0x24>
    3278:	3301      	adds	r3, #1
    327a:	602b      	str	r3, [r5, #0]
    327c:	6823      	ldr	r3, [r4, #0]
    327e:	069b      	lsls	r3, r3, #26
    3280:	d502      	bpl.n	3288 <_printf_common+0x30>
    3282:	682b      	ldr	r3, [r5, #0]
    3284:	3302      	adds	r3, #2
    3286:	602b      	str	r3, [r5, #0]
    3288:	2706      	movs	r7, #6
    328a:	6823      	ldr	r3, [r4, #0]
    328c:	401f      	ands	r7, r3
    328e:	d027      	beq.n	32e0 <_printf_common+0x88>
    3290:	0023      	movs	r3, r4
    3292:	3343      	adds	r3, #67	; 0x43
    3294:	781b      	ldrb	r3, [r3, #0]
    3296:	1e5a      	subs	r2, r3, #1
    3298:	4193      	sbcs	r3, r2
    329a:	6822      	ldr	r2, [r4, #0]
    329c:	0692      	lsls	r2, r2, #26
    329e:	d430      	bmi.n	3302 <_printf_common+0xaa>
    32a0:	0022      	movs	r2, r4
    32a2:	9901      	ldr	r1, [sp, #4]
    32a4:	3243      	adds	r2, #67	; 0x43
    32a6:	9800      	ldr	r0, [sp, #0]
    32a8:	9e08      	ldr	r6, [sp, #32]
    32aa:	47b0      	blx	r6
    32ac:	1c43      	adds	r3, r0, #1
    32ae:	d025      	beq.n	32fc <_printf_common+0xa4>
    32b0:	2306      	movs	r3, #6
    32b2:	6820      	ldr	r0, [r4, #0]
    32b4:	682a      	ldr	r2, [r5, #0]
    32b6:	68e1      	ldr	r1, [r4, #12]
    32b8:	4003      	ands	r3, r0
    32ba:	2500      	movs	r5, #0
    32bc:	2b04      	cmp	r3, #4
    32be:	d103      	bne.n	32c8 <_printf_common+0x70>
    32c0:	1a8d      	subs	r5, r1, r2
    32c2:	43eb      	mvns	r3, r5
    32c4:	17db      	asrs	r3, r3, #31
    32c6:	401d      	ands	r5, r3
    32c8:	68a3      	ldr	r3, [r4, #8]
    32ca:	6922      	ldr	r2, [r4, #16]
    32cc:	4293      	cmp	r3, r2
    32ce:	dd01      	ble.n	32d4 <_printf_common+0x7c>
    32d0:	1a9b      	subs	r3, r3, r2
    32d2:	18ed      	adds	r5, r5, r3
    32d4:	2700      	movs	r7, #0
    32d6:	42bd      	cmp	r5, r7
    32d8:	d120      	bne.n	331c <_printf_common+0xc4>
    32da:	2000      	movs	r0, #0
    32dc:	e010      	b.n	3300 <_printf_common+0xa8>
    32de:	3701      	adds	r7, #1
    32e0:	68e3      	ldr	r3, [r4, #12]
    32e2:	682a      	ldr	r2, [r5, #0]
    32e4:	1a9b      	subs	r3, r3, r2
    32e6:	429f      	cmp	r7, r3
    32e8:	dad2      	bge.n	3290 <_printf_common+0x38>
    32ea:	0022      	movs	r2, r4
    32ec:	2301      	movs	r3, #1
    32ee:	3219      	adds	r2, #25
    32f0:	9901      	ldr	r1, [sp, #4]
    32f2:	9800      	ldr	r0, [sp, #0]
    32f4:	9e08      	ldr	r6, [sp, #32]
    32f6:	47b0      	blx	r6
    32f8:	1c43      	adds	r3, r0, #1
    32fa:	d1f0      	bne.n	32de <_printf_common+0x86>
    32fc:	2001      	movs	r0, #1
    32fe:	4240      	negs	r0, r0
    3300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3302:	2030      	movs	r0, #48	; 0x30
    3304:	18e1      	adds	r1, r4, r3
    3306:	3143      	adds	r1, #67	; 0x43
    3308:	7008      	strb	r0, [r1, #0]
    330a:	0021      	movs	r1, r4
    330c:	1c5a      	adds	r2, r3, #1
    330e:	3145      	adds	r1, #69	; 0x45
    3310:	7809      	ldrb	r1, [r1, #0]
    3312:	18a2      	adds	r2, r4, r2
    3314:	3243      	adds	r2, #67	; 0x43
    3316:	3302      	adds	r3, #2
    3318:	7011      	strb	r1, [r2, #0]
    331a:	e7c1      	b.n	32a0 <_printf_common+0x48>
    331c:	0022      	movs	r2, r4
    331e:	2301      	movs	r3, #1
    3320:	321a      	adds	r2, #26
    3322:	9901      	ldr	r1, [sp, #4]
    3324:	9800      	ldr	r0, [sp, #0]
    3326:	9e08      	ldr	r6, [sp, #32]
    3328:	47b0      	blx	r6
    332a:	1c43      	adds	r3, r0, #1
    332c:	d0e6      	beq.n	32fc <_printf_common+0xa4>
    332e:	3701      	adds	r7, #1
    3330:	e7d1      	b.n	32d6 <_printf_common+0x7e>
	...

00003334 <_printf_i>:
    3334:	b5f0      	push	{r4, r5, r6, r7, lr}
    3336:	b08b      	sub	sp, #44	; 0x2c
    3338:	9206      	str	r2, [sp, #24]
    333a:	000a      	movs	r2, r1
    333c:	3243      	adds	r2, #67	; 0x43
    333e:	9307      	str	r3, [sp, #28]
    3340:	9005      	str	r0, [sp, #20]
    3342:	9204      	str	r2, [sp, #16]
    3344:	7e0a      	ldrb	r2, [r1, #24]
    3346:	000c      	movs	r4, r1
    3348:	9b10      	ldr	r3, [sp, #64]	; 0x40
    334a:	2a6e      	cmp	r2, #110	; 0x6e
    334c:	d100      	bne.n	3350 <_printf_i+0x1c>
    334e:	e08f      	b.n	3470 <_printf_i+0x13c>
    3350:	d817      	bhi.n	3382 <_printf_i+0x4e>
    3352:	2a63      	cmp	r2, #99	; 0x63
    3354:	d02c      	beq.n	33b0 <_printf_i+0x7c>
    3356:	d808      	bhi.n	336a <_printf_i+0x36>
    3358:	2a00      	cmp	r2, #0
    335a:	d100      	bne.n	335e <_printf_i+0x2a>
    335c:	e099      	b.n	3492 <_printf_i+0x15e>
    335e:	2a58      	cmp	r2, #88	; 0x58
    3360:	d054      	beq.n	340c <_printf_i+0xd8>
    3362:	0026      	movs	r6, r4
    3364:	3642      	adds	r6, #66	; 0x42
    3366:	7032      	strb	r2, [r6, #0]
    3368:	e029      	b.n	33be <_printf_i+0x8a>
    336a:	2a64      	cmp	r2, #100	; 0x64
    336c:	d001      	beq.n	3372 <_printf_i+0x3e>
    336e:	2a69      	cmp	r2, #105	; 0x69
    3370:	d1f7      	bne.n	3362 <_printf_i+0x2e>
    3372:	6821      	ldr	r1, [r4, #0]
    3374:	681a      	ldr	r2, [r3, #0]
    3376:	0608      	lsls	r0, r1, #24
    3378:	d523      	bpl.n	33c2 <_printf_i+0x8e>
    337a:	1d11      	adds	r1, r2, #4
    337c:	6019      	str	r1, [r3, #0]
    337e:	6815      	ldr	r5, [r2, #0]
    3380:	e025      	b.n	33ce <_printf_i+0x9a>
    3382:	2a73      	cmp	r2, #115	; 0x73
    3384:	d100      	bne.n	3388 <_printf_i+0x54>
    3386:	e088      	b.n	349a <_printf_i+0x166>
    3388:	d808      	bhi.n	339c <_printf_i+0x68>
    338a:	2a6f      	cmp	r2, #111	; 0x6f
    338c:	d029      	beq.n	33e2 <_printf_i+0xae>
    338e:	2a70      	cmp	r2, #112	; 0x70
    3390:	d1e7      	bne.n	3362 <_printf_i+0x2e>
    3392:	2220      	movs	r2, #32
    3394:	6809      	ldr	r1, [r1, #0]
    3396:	430a      	orrs	r2, r1
    3398:	6022      	str	r2, [r4, #0]
    339a:	e003      	b.n	33a4 <_printf_i+0x70>
    339c:	2a75      	cmp	r2, #117	; 0x75
    339e:	d020      	beq.n	33e2 <_printf_i+0xae>
    33a0:	2a78      	cmp	r2, #120	; 0x78
    33a2:	d1de      	bne.n	3362 <_printf_i+0x2e>
    33a4:	0022      	movs	r2, r4
    33a6:	2178      	movs	r1, #120	; 0x78
    33a8:	3245      	adds	r2, #69	; 0x45
    33aa:	7011      	strb	r1, [r2, #0]
    33ac:	4a6c      	ldr	r2, [pc, #432]	; (3560 <_printf_i+0x22c>)
    33ae:	e030      	b.n	3412 <_printf_i+0xde>
    33b0:	000e      	movs	r6, r1
    33b2:	681a      	ldr	r2, [r3, #0]
    33b4:	3642      	adds	r6, #66	; 0x42
    33b6:	1d11      	adds	r1, r2, #4
    33b8:	6019      	str	r1, [r3, #0]
    33ba:	6813      	ldr	r3, [r2, #0]
    33bc:	7033      	strb	r3, [r6, #0]
    33be:	2301      	movs	r3, #1
    33c0:	e079      	b.n	34b6 <_printf_i+0x182>
    33c2:	0649      	lsls	r1, r1, #25
    33c4:	d5d9      	bpl.n	337a <_printf_i+0x46>
    33c6:	1d11      	adds	r1, r2, #4
    33c8:	6019      	str	r1, [r3, #0]
    33ca:	2300      	movs	r3, #0
    33cc:	5ed5      	ldrsh	r5, [r2, r3]
    33ce:	2d00      	cmp	r5, #0
    33d0:	da03      	bge.n	33da <_printf_i+0xa6>
    33d2:	232d      	movs	r3, #45	; 0x2d
    33d4:	9a04      	ldr	r2, [sp, #16]
    33d6:	426d      	negs	r5, r5
    33d8:	7013      	strb	r3, [r2, #0]
    33da:	4b62      	ldr	r3, [pc, #392]	; (3564 <_printf_i+0x230>)
    33dc:	270a      	movs	r7, #10
    33de:	9303      	str	r3, [sp, #12]
    33e0:	e02f      	b.n	3442 <_printf_i+0x10e>
    33e2:	6820      	ldr	r0, [r4, #0]
    33e4:	6819      	ldr	r1, [r3, #0]
    33e6:	0605      	lsls	r5, r0, #24
    33e8:	d503      	bpl.n	33f2 <_printf_i+0xbe>
    33ea:	1d08      	adds	r0, r1, #4
    33ec:	6018      	str	r0, [r3, #0]
    33ee:	680d      	ldr	r5, [r1, #0]
    33f0:	e005      	b.n	33fe <_printf_i+0xca>
    33f2:	0640      	lsls	r0, r0, #25
    33f4:	d5f9      	bpl.n	33ea <_printf_i+0xb6>
    33f6:	680d      	ldr	r5, [r1, #0]
    33f8:	1d08      	adds	r0, r1, #4
    33fa:	6018      	str	r0, [r3, #0]
    33fc:	b2ad      	uxth	r5, r5
    33fe:	4b59      	ldr	r3, [pc, #356]	; (3564 <_printf_i+0x230>)
    3400:	2708      	movs	r7, #8
    3402:	9303      	str	r3, [sp, #12]
    3404:	2a6f      	cmp	r2, #111	; 0x6f
    3406:	d018      	beq.n	343a <_printf_i+0x106>
    3408:	270a      	movs	r7, #10
    340a:	e016      	b.n	343a <_printf_i+0x106>
    340c:	3145      	adds	r1, #69	; 0x45
    340e:	700a      	strb	r2, [r1, #0]
    3410:	4a54      	ldr	r2, [pc, #336]	; (3564 <_printf_i+0x230>)
    3412:	9203      	str	r2, [sp, #12]
    3414:	681a      	ldr	r2, [r3, #0]
    3416:	6821      	ldr	r1, [r4, #0]
    3418:	1d10      	adds	r0, r2, #4
    341a:	6018      	str	r0, [r3, #0]
    341c:	6815      	ldr	r5, [r2, #0]
    341e:	0608      	lsls	r0, r1, #24
    3420:	d522      	bpl.n	3468 <_printf_i+0x134>
    3422:	07cb      	lsls	r3, r1, #31
    3424:	d502      	bpl.n	342c <_printf_i+0xf8>
    3426:	2320      	movs	r3, #32
    3428:	4319      	orrs	r1, r3
    342a:	6021      	str	r1, [r4, #0]
    342c:	2710      	movs	r7, #16
    342e:	2d00      	cmp	r5, #0
    3430:	d103      	bne.n	343a <_printf_i+0x106>
    3432:	2320      	movs	r3, #32
    3434:	6822      	ldr	r2, [r4, #0]
    3436:	439a      	bics	r2, r3
    3438:	6022      	str	r2, [r4, #0]
    343a:	0023      	movs	r3, r4
    343c:	2200      	movs	r2, #0
    343e:	3343      	adds	r3, #67	; 0x43
    3440:	701a      	strb	r2, [r3, #0]
    3442:	6863      	ldr	r3, [r4, #4]
    3444:	60a3      	str	r3, [r4, #8]
    3446:	2b00      	cmp	r3, #0
    3448:	db5c      	blt.n	3504 <_printf_i+0x1d0>
    344a:	2204      	movs	r2, #4
    344c:	6821      	ldr	r1, [r4, #0]
    344e:	4391      	bics	r1, r2
    3450:	6021      	str	r1, [r4, #0]
    3452:	2d00      	cmp	r5, #0
    3454:	d158      	bne.n	3508 <_printf_i+0x1d4>
    3456:	9e04      	ldr	r6, [sp, #16]
    3458:	2b00      	cmp	r3, #0
    345a:	d064      	beq.n	3526 <_printf_i+0x1f2>
    345c:	0026      	movs	r6, r4
    345e:	9b03      	ldr	r3, [sp, #12]
    3460:	3642      	adds	r6, #66	; 0x42
    3462:	781b      	ldrb	r3, [r3, #0]
    3464:	7033      	strb	r3, [r6, #0]
    3466:	e05e      	b.n	3526 <_printf_i+0x1f2>
    3468:	0648      	lsls	r0, r1, #25
    346a:	d5da      	bpl.n	3422 <_printf_i+0xee>
    346c:	b2ad      	uxth	r5, r5
    346e:	e7d8      	b.n	3422 <_printf_i+0xee>
    3470:	6809      	ldr	r1, [r1, #0]
    3472:	681a      	ldr	r2, [r3, #0]
    3474:	0608      	lsls	r0, r1, #24
    3476:	d505      	bpl.n	3484 <_printf_i+0x150>
    3478:	1d11      	adds	r1, r2, #4
    347a:	6019      	str	r1, [r3, #0]
    347c:	6813      	ldr	r3, [r2, #0]
    347e:	6962      	ldr	r2, [r4, #20]
    3480:	601a      	str	r2, [r3, #0]
    3482:	e006      	b.n	3492 <_printf_i+0x15e>
    3484:	0649      	lsls	r1, r1, #25
    3486:	d5f7      	bpl.n	3478 <_printf_i+0x144>
    3488:	1d11      	adds	r1, r2, #4
    348a:	6019      	str	r1, [r3, #0]
    348c:	6813      	ldr	r3, [r2, #0]
    348e:	8aa2      	ldrh	r2, [r4, #20]
    3490:	801a      	strh	r2, [r3, #0]
    3492:	2300      	movs	r3, #0
    3494:	9e04      	ldr	r6, [sp, #16]
    3496:	6123      	str	r3, [r4, #16]
    3498:	e054      	b.n	3544 <_printf_i+0x210>
    349a:	681a      	ldr	r2, [r3, #0]
    349c:	1d11      	adds	r1, r2, #4
    349e:	6019      	str	r1, [r3, #0]
    34a0:	6816      	ldr	r6, [r2, #0]
    34a2:	2100      	movs	r1, #0
    34a4:	6862      	ldr	r2, [r4, #4]
    34a6:	0030      	movs	r0, r6
    34a8:	f000 f870 	bl	358c <memchr>
    34ac:	2800      	cmp	r0, #0
    34ae:	d001      	beq.n	34b4 <_printf_i+0x180>
    34b0:	1b80      	subs	r0, r0, r6
    34b2:	6060      	str	r0, [r4, #4]
    34b4:	6863      	ldr	r3, [r4, #4]
    34b6:	6123      	str	r3, [r4, #16]
    34b8:	2300      	movs	r3, #0
    34ba:	9a04      	ldr	r2, [sp, #16]
    34bc:	7013      	strb	r3, [r2, #0]
    34be:	e041      	b.n	3544 <_printf_i+0x210>
    34c0:	6923      	ldr	r3, [r4, #16]
    34c2:	0032      	movs	r2, r6
    34c4:	9906      	ldr	r1, [sp, #24]
    34c6:	9805      	ldr	r0, [sp, #20]
    34c8:	9d07      	ldr	r5, [sp, #28]
    34ca:	47a8      	blx	r5
    34cc:	1c43      	adds	r3, r0, #1
    34ce:	d043      	beq.n	3558 <_printf_i+0x224>
    34d0:	6823      	ldr	r3, [r4, #0]
    34d2:	2500      	movs	r5, #0
    34d4:	079b      	lsls	r3, r3, #30
    34d6:	d40f      	bmi.n	34f8 <_printf_i+0x1c4>
    34d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    34da:	68e0      	ldr	r0, [r4, #12]
    34dc:	4298      	cmp	r0, r3
    34de:	da3d      	bge.n	355c <_printf_i+0x228>
    34e0:	0018      	movs	r0, r3
    34e2:	e03b      	b.n	355c <_printf_i+0x228>
    34e4:	0022      	movs	r2, r4
    34e6:	2301      	movs	r3, #1
    34e8:	3219      	adds	r2, #25
    34ea:	9906      	ldr	r1, [sp, #24]
    34ec:	9805      	ldr	r0, [sp, #20]
    34ee:	9e07      	ldr	r6, [sp, #28]
    34f0:	47b0      	blx	r6
    34f2:	1c43      	adds	r3, r0, #1
    34f4:	d030      	beq.n	3558 <_printf_i+0x224>
    34f6:	3501      	adds	r5, #1
    34f8:	68e3      	ldr	r3, [r4, #12]
    34fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    34fc:	1a9b      	subs	r3, r3, r2
    34fe:	429d      	cmp	r5, r3
    3500:	dbf0      	blt.n	34e4 <_printf_i+0x1b0>
    3502:	e7e9      	b.n	34d8 <_printf_i+0x1a4>
    3504:	2d00      	cmp	r5, #0
    3506:	d0a9      	beq.n	345c <_printf_i+0x128>
    3508:	9e04      	ldr	r6, [sp, #16]
    350a:	0028      	movs	r0, r5
    350c:	0039      	movs	r1, r7
    350e:	f7fe ff99 	bl	2444 <__aeabi_uidivmod>
    3512:	9b03      	ldr	r3, [sp, #12]
    3514:	3e01      	subs	r6, #1
    3516:	5c5b      	ldrb	r3, [r3, r1]
    3518:	0028      	movs	r0, r5
    351a:	7033      	strb	r3, [r6, #0]
    351c:	0039      	movs	r1, r7
    351e:	f7fe ff0b 	bl	2338 <__udivsi3>
    3522:	1e05      	subs	r5, r0, #0
    3524:	d1f1      	bne.n	350a <_printf_i+0x1d6>
    3526:	2f08      	cmp	r7, #8
    3528:	d109      	bne.n	353e <_printf_i+0x20a>
    352a:	6823      	ldr	r3, [r4, #0]
    352c:	07db      	lsls	r3, r3, #31
    352e:	d506      	bpl.n	353e <_printf_i+0x20a>
    3530:	6863      	ldr	r3, [r4, #4]
    3532:	6922      	ldr	r2, [r4, #16]
    3534:	4293      	cmp	r3, r2
    3536:	dc02      	bgt.n	353e <_printf_i+0x20a>
    3538:	2330      	movs	r3, #48	; 0x30
    353a:	3e01      	subs	r6, #1
    353c:	7033      	strb	r3, [r6, #0]
    353e:	9b04      	ldr	r3, [sp, #16]
    3540:	1b9b      	subs	r3, r3, r6
    3542:	6123      	str	r3, [r4, #16]
    3544:	9b07      	ldr	r3, [sp, #28]
    3546:	aa09      	add	r2, sp, #36	; 0x24
    3548:	9300      	str	r3, [sp, #0]
    354a:	0021      	movs	r1, r4
    354c:	9b06      	ldr	r3, [sp, #24]
    354e:	9805      	ldr	r0, [sp, #20]
    3550:	f7ff fe82 	bl	3258 <_printf_common>
    3554:	1c43      	adds	r3, r0, #1
    3556:	d1b3      	bne.n	34c0 <_printf_i+0x18c>
    3558:	2001      	movs	r0, #1
    355a:	4240      	negs	r0, r0
    355c:	b00b      	add	sp, #44	; 0x2c
    355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3560:	00003df6 	.word	0x00003df6
    3564:	00003de5 	.word	0x00003de5

00003568 <_sbrk_r>:
    3568:	2300      	movs	r3, #0
    356a:	b570      	push	{r4, r5, r6, lr}
    356c:	4c06      	ldr	r4, [pc, #24]	; (3588 <_sbrk_r+0x20>)
    356e:	0005      	movs	r5, r0
    3570:	0008      	movs	r0, r1
    3572:	6023      	str	r3, [r4, #0]
    3574:	f7fd f8fe 	bl	774 <_sbrk>
    3578:	1c43      	adds	r3, r0, #1
    357a:	d103      	bne.n	3584 <_sbrk_r+0x1c>
    357c:	6823      	ldr	r3, [r4, #0]
    357e:	2b00      	cmp	r3, #0
    3580:	d000      	beq.n	3584 <_sbrk_r+0x1c>
    3582:	602b      	str	r3, [r5, #0]
    3584:	bd70      	pop	{r4, r5, r6, pc}
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	20000194 	.word	0x20000194

0000358c <memchr>:
    358c:	b2c9      	uxtb	r1, r1
    358e:	1882      	adds	r2, r0, r2
    3590:	4290      	cmp	r0, r2
    3592:	d101      	bne.n	3598 <memchr+0xc>
    3594:	2000      	movs	r0, #0
    3596:	4770      	bx	lr
    3598:	7803      	ldrb	r3, [r0, #0]
    359a:	428b      	cmp	r3, r1
    359c:	d0fb      	beq.n	3596 <memchr+0xa>
    359e:	3001      	adds	r0, #1
    35a0:	e7f6      	b.n	3590 <memchr+0x4>

000035a2 <memcpy>:
    35a2:	2300      	movs	r3, #0
    35a4:	b510      	push	{r4, lr}
    35a6:	429a      	cmp	r2, r3
    35a8:	d100      	bne.n	35ac <memcpy+0xa>
    35aa:	bd10      	pop	{r4, pc}
    35ac:	5ccc      	ldrb	r4, [r1, r3]
    35ae:	54c4      	strb	r4, [r0, r3]
    35b0:	3301      	adds	r3, #1
    35b2:	e7f8      	b.n	35a6 <memcpy+0x4>

000035b4 <memmove>:
    35b4:	b510      	push	{r4, lr}
    35b6:	4288      	cmp	r0, r1
    35b8:	d902      	bls.n	35c0 <memmove+0xc>
    35ba:	188b      	adds	r3, r1, r2
    35bc:	4298      	cmp	r0, r3
    35be:	d308      	bcc.n	35d2 <memmove+0x1e>
    35c0:	2300      	movs	r3, #0
    35c2:	429a      	cmp	r2, r3
    35c4:	d007      	beq.n	35d6 <memmove+0x22>
    35c6:	5ccc      	ldrb	r4, [r1, r3]
    35c8:	54c4      	strb	r4, [r0, r3]
    35ca:	3301      	adds	r3, #1
    35cc:	e7f9      	b.n	35c2 <memmove+0xe>
    35ce:	5c8b      	ldrb	r3, [r1, r2]
    35d0:	5483      	strb	r3, [r0, r2]
    35d2:	3a01      	subs	r2, #1
    35d4:	d2fb      	bcs.n	35ce <memmove+0x1a>
    35d6:	bd10      	pop	{r4, pc}

000035d8 <__malloc_lock>:
    35d8:	4770      	bx	lr

000035da <__malloc_unlock>:
    35da:	4770      	bx	lr

000035dc <_free_r>:
    35dc:	b570      	push	{r4, r5, r6, lr}
    35de:	0005      	movs	r5, r0
    35e0:	2900      	cmp	r1, #0
    35e2:	d010      	beq.n	3606 <_free_r+0x2a>
    35e4:	1f0c      	subs	r4, r1, #4
    35e6:	6823      	ldr	r3, [r4, #0]
    35e8:	2b00      	cmp	r3, #0
    35ea:	da00      	bge.n	35ee <_free_r+0x12>
    35ec:	18e4      	adds	r4, r4, r3
    35ee:	0028      	movs	r0, r5
    35f0:	f7ff fff2 	bl	35d8 <__malloc_lock>
    35f4:	4a1d      	ldr	r2, [pc, #116]	; (366c <_free_r+0x90>)
    35f6:	6813      	ldr	r3, [r2, #0]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d105      	bne.n	3608 <_free_r+0x2c>
    35fc:	6063      	str	r3, [r4, #4]
    35fe:	6014      	str	r4, [r2, #0]
    3600:	0028      	movs	r0, r5
    3602:	f7ff ffea 	bl	35da <__malloc_unlock>
    3606:	bd70      	pop	{r4, r5, r6, pc}
    3608:	42a3      	cmp	r3, r4
    360a:	d909      	bls.n	3620 <_free_r+0x44>
    360c:	6821      	ldr	r1, [r4, #0]
    360e:	1860      	adds	r0, r4, r1
    3610:	4283      	cmp	r3, r0
    3612:	d1f3      	bne.n	35fc <_free_r+0x20>
    3614:	6818      	ldr	r0, [r3, #0]
    3616:	685b      	ldr	r3, [r3, #4]
    3618:	1841      	adds	r1, r0, r1
    361a:	6021      	str	r1, [r4, #0]
    361c:	e7ee      	b.n	35fc <_free_r+0x20>
    361e:	0013      	movs	r3, r2
    3620:	685a      	ldr	r2, [r3, #4]
    3622:	2a00      	cmp	r2, #0
    3624:	d001      	beq.n	362a <_free_r+0x4e>
    3626:	42a2      	cmp	r2, r4
    3628:	d9f9      	bls.n	361e <_free_r+0x42>
    362a:	6819      	ldr	r1, [r3, #0]
    362c:	1858      	adds	r0, r3, r1
    362e:	42a0      	cmp	r0, r4
    3630:	d10b      	bne.n	364a <_free_r+0x6e>
    3632:	6820      	ldr	r0, [r4, #0]
    3634:	1809      	adds	r1, r1, r0
    3636:	1858      	adds	r0, r3, r1
    3638:	6019      	str	r1, [r3, #0]
    363a:	4282      	cmp	r2, r0
    363c:	d1e0      	bne.n	3600 <_free_r+0x24>
    363e:	6810      	ldr	r0, [r2, #0]
    3640:	6852      	ldr	r2, [r2, #4]
    3642:	1841      	adds	r1, r0, r1
    3644:	6019      	str	r1, [r3, #0]
    3646:	605a      	str	r2, [r3, #4]
    3648:	e7da      	b.n	3600 <_free_r+0x24>
    364a:	42a0      	cmp	r0, r4
    364c:	d902      	bls.n	3654 <_free_r+0x78>
    364e:	230c      	movs	r3, #12
    3650:	602b      	str	r3, [r5, #0]
    3652:	e7d5      	b.n	3600 <_free_r+0x24>
    3654:	6821      	ldr	r1, [r4, #0]
    3656:	1860      	adds	r0, r4, r1
    3658:	4282      	cmp	r2, r0
    365a:	d103      	bne.n	3664 <_free_r+0x88>
    365c:	6810      	ldr	r0, [r2, #0]
    365e:	6852      	ldr	r2, [r2, #4]
    3660:	1841      	adds	r1, r0, r1
    3662:	6021      	str	r1, [r4, #0]
    3664:	6062      	str	r2, [r4, #4]
    3666:	605c      	str	r4, [r3, #4]
    3668:	e7ca      	b.n	3600 <_free_r+0x24>
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	20000154 	.word	0x20000154

00003670 <_realloc_r>:
    3670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3672:	0007      	movs	r7, r0
    3674:	000d      	movs	r5, r1
    3676:	0016      	movs	r6, r2
    3678:	2900      	cmp	r1, #0
    367a:	d105      	bne.n	3688 <_realloc_r+0x18>
    367c:	0011      	movs	r1, r2
    367e:	f7ff fc27 	bl	2ed0 <_malloc_r>
    3682:	0004      	movs	r4, r0
    3684:	0020      	movs	r0, r4
    3686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3688:	2a00      	cmp	r2, #0
    368a:	d103      	bne.n	3694 <_realloc_r+0x24>
    368c:	f7ff ffa6 	bl	35dc <_free_r>
    3690:	0034      	movs	r4, r6
    3692:	e7f7      	b.n	3684 <_realloc_r+0x14>
    3694:	f000 f812 	bl	36bc <_malloc_usable_size_r>
    3698:	002c      	movs	r4, r5
    369a:	4286      	cmp	r6, r0
    369c:	d9f2      	bls.n	3684 <_realloc_r+0x14>
    369e:	0031      	movs	r1, r6
    36a0:	0038      	movs	r0, r7
    36a2:	f7ff fc15 	bl	2ed0 <_malloc_r>
    36a6:	1e04      	subs	r4, r0, #0
    36a8:	d0ec      	beq.n	3684 <_realloc_r+0x14>
    36aa:	0029      	movs	r1, r5
    36ac:	0032      	movs	r2, r6
    36ae:	f7ff ff78 	bl	35a2 <memcpy>
    36b2:	0029      	movs	r1, r5
    36b4:	0038      	movs	r0, r7
    36b6:	f7ff ff91 	bl	35dc <_free_r>
    36ba:	e7e3      	b.n	3684 <_realloc_r+0x14>

000036bc <_malloc_usable_size_r>:
    36bc:	1f0b      	subs	r3, r1, #4
    36be:	681b      	ldr	r3, [r3, #0]
    36c0:	1f18      	subs	r0, r3, #4
    36c2:	2b00      	cmp	r3, #0
    36c4:	da01      	bge.n	36ca <_malloc_usable_size_r+0xe>
    36c6:	580b      	ldr	r3, [r1, r0]
    36c8:	18c0      	adds	r0, r0, r3
    36ca:	4770      	bx	lr
    36cc:	682f2e2e 	.word	0x682f2e2e
    36d0:	732f6c61 	.word	0x732f6c61
    36d4:	682f6372 	.word	0x682f6372
    36d8:	695f6c61 	.word	0x695f6c61
    36dc:	6d5f6332 	.word	0x6d5f6332
    36e0:	6e79735f 	.word	0x6e79735f
    36e4:	00632e63 	.word	0x00632e63
    36e8:	682f2e2e 	.word	0x682f2e2e
    36ec:	732f6c61 	.word	0x732f6c61
    36f0:	682f6372 	.word	0x682f6372
    36f4:	695f6c61 	.word	0x695f6c61
    36f8:	00632e6f 	.word	0x00632e6f
    36fc:	682f2e2e 	.word	0x682f2e2e
    3700:	732f6c61 	.word	0x732f6c61
    3704:	682f6372 	.word	0x682f6372
    3708:	755f6c61 	.word	0x755f6c61
    370c:	74726173 	.word	0x74726173
    3710:	6e79735f 	.word	0x6e79735f
    3714:	00632e63 	.word	0x00632e63

00003718 <_map>:
    3718:	0000000c 00000018 682f2e2e 652f6c70     ........../hpl/e
    3728:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00003738 <_usarts>:
    3738:	00000005 40100004 00030000 0000f62b     .......@....+...
    3748:	00000000                                ....

0000374c <_i2cms>:
    374c:	00000001 00200014 00000100 0000e6e5     ...... .........
    375c:	00d70000 02dc8000                       ........

00003764 <_i2css>:
	...

00003774 <sercomspi_regs>:
	...
    3788:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3798:	65735f6c 6d6f6372 0000632e 70696843     l_sercom.c..Chip
    37a8:	6d616e20 093a2065 0d0a7325 00000000      name :.%s......
    37b8:	756e614d 74636166 72657275 2509203a     Manufacturer: .%
    37c8:	000d0a73 65746e49 63616672 09203a65     s...Interface: .
    37d8:	0d0a7325 00000000 70707553 7620796c     %s......Supply v
    37e8:	61746c6f 6d206567 3a207861 30250920     oltage max : .%0
    37f8:	5666322e 00000d0a 70707553 7620796c     .2fV....Supply v
    3808:	61746c6f 6d206567 203a6e69 2e302509     oltage min: .%0.
    3818:	0a566632 0000000d 6978614d 206d756d     2fV.....Maximum 
    3828:	72727563 3a746e65 30250920 6d66312e     current: .%0.1fm
    3838:	000d0a41 706d6554 74617265 20657275     A...Temperature 
    3848:	3a78614d 2e250920 0a436631 0000000d     Max: .%.1fC.....
    3858:	706d6554 74617265 20657275 3a6e694d     Temperature Min:
    3868:	2e250920 0a436631 0000000d 76697244      .%.1fC.....Driv
    3878:	76207265 69737265 203a6e6f 2e255609     er version: .V%.
    3888:	252e6631 0a64322e 0000000d              1f.%.2d.....

00003894 <pinMask>:
    3894:	08040201 80402010 3250434d 38303033     ..... @.MCP23008
    38a4:	6166203a 64656c69 206f7420 0d2e7325     : failed to %s..
    38b4:	0000000a 3270636d 38303033 6572203a     ....mcp23008: re
    38c4:	76696563 61635f65 61626c6c 000a6b63     ceive_callback..
    38d4:	3270636d 38303033 6564203a 5f79616c     mcp23008: delay_
    38e4:	000a736d 3270636d 38303033 3269203a     ms..mcp23008: i2
    38f4:	6e692063 61697469 657a696c 20736920     c initialize is 
    3904:	6c6c756e 0000000a 3270636d 38303033     null....mcp23008
    3914:	3269203a 65645f63 20746e69 6e207369     : i2c_deint is n
    3924:	0a6c6c75 00000000 3270636d 38303033     ull.....mcp23008
    3934:	3269203a 65725f63 69206461 756e2073     : i2c_read is nu
    3944:	000a6c6c 3270636d 38303033 3269203a     ll..mcp23008: i2
    3954:	72775f63 20657469 6e207369 0a6c6c75     c_write is null.
    3964:	00000000 3270636d 38303033 3269203a     ....mcp23008: i2
    3974:	6e692063 61697469 657a696c 69616620     c initialize fai
    3984:	0a64656c 00000000 20633269 6e696564     led.....i2c dein
    3994:	66207469 656c6961 00000064 6c696166     it failed...fail
    39a4:	74206465 7865206f 74756365 72692065     ed to execute ir
    39b4:	6f722071 6e697475 00000065 20746573     q routine...set 
    39c4:	206e6970 65646f6d 00000000 64616572     pin mode....read
    39d4:	6e697020 646f6d20 65722065 74736967      pin mode regist
    39e4:	00007265 20746573 74726f70 646f6d20     er..set port mod
    39f4:	00000065 64616572 74616c20 72206863     e...read latch r
    3a04:	73696765 00726574 74697277 69702065     egister.write pi
    3a14:	0000006e 74697277 6c612065 6970206c     n...write all pi
    3a24:	0000736e 64616572 6c757020 70752d6c     ns..read pull-up
    3a34:	67657220 65747369 00000072 20746573      register...set 
    3a44:	206e6970 6c6c7570 0070752d 20746573     pin pull-up.set 
    3a54:	74726f70 6c757020 70752d6c 00000000     port pull-up....
    3a64:	64616572 706e6920 70207475 72616c6f     read input polar
    3a74:	00797469 20746573 206e6970 75706e69     ity.set pin inpu
    3a84:	6f702074 6972616c 00007974 64616572     t polarity..read
    3a94:	6e697020 6c6f7020 74697261 00000079      pin polarity...
    3aa4:	64616572 746e6920 75727265 00007470     read interrupt..
    3ab4:	20746573 206e6970 65746e69 70757272     set pin interrup
    3ac4:	00000074 64616572 6e697020 746e6920     t...read pin int
    3ad4:	75727265 73207470 75746174 00000073     errupt status...
    3ae4:	64616572 746e6920 75727265 66207470     read interrupt f
    3af4:	0067616c 64616572 70786520 65646e61     lag.read expande
    3b04:	65722072 00000067 65746e69 70757272     r reg...interrup
    3b14:	69702074 756f206e 74757074 76656c20     t pin output lev
    3b24:	00006c65 64616572 746e6920 75727265     el..read interru
    3b34:	63207470 75747061 73206572 75746174     pt capture statu
    3b44:	00000073 20746573 65746e69 70757272     s...set interrup
    3b54:	69702074 756f206e 74757074 646f6d20     t pin output mod
    3b64:	00000065 64616572 746e6920 75727265     e...read interru
    3b74:	6f207470 6863206e 65676e61 6e6f6320     pt on change con
    3b84:	6c6f7274 67657220 00000000 20746573     trol reg....set 
    3b94:	65746e69 70757272 6f632074 7261706d     interrupt compar
    3ba4:	6f6d2065 00006564 64616572 66656420     e mode..read def
    3bb4:	746c7561 6d6f6320 65726170 6c617620     ault compare val
    3bc4:	72206575 00006765 20746573 206e6970     ue reg..set pin 
    3bd4:	61666564 20746c75 706d6f63 20657261     default compare 
    3be4:	756c6176 00000065 64616572 6e697020     value...read pin
    3bf4:	66656420 746c7561 6d6f6320 65726170      default compare
    3c04:	6c617620 73206575 75746174 00000073      value status...
    3c14:	20746573 77656c73 74617220 00000065     set slew rate...
    3c24:	64616572 656c7320 61722077 73206574     read slew rate s
    3c34:	75746174 00000073 20746573 75716573     tatus...set sequ
    3c44:	69746e65 6f206c61 61726570 6e6f6974     ential operation
    3c54:	646f6d20 00000065 64616572 71657320      mode...read seq
    3c64:	636e6575 206c6169 7265706f 6f697461     uencial operatio
    3c74:	6f6d206e 73206564 75746174 00000073     n mode status...
    3c84:	3250434d 38303033 00000000 00433249     MCP23008....I2C.
    3c94:	7263694d 6968636f 65542070 6f6e6863     Microchip Techno
    3ca4:	79676f6c 00000000 20633269 74697277     logy....i2c writ
    3cb4:	61662065 64656c69 6863202c 206b6365     e failed, check 
    3cc4:	20656874 20633269 72646461 20737365     the i2c address 
    3cd4:	7720726f 6e697269 00000a67 3270636d     or wiring...mcp2
    3ce4:	38303033 5047203a 6e692030 72726574     3008: GP0 interr
    3cf4:	0a747075 00000000 3270636d 38303033     upt.....mcp23008
    3d04:	5047203a 6e692031 72726574 0a747075     : GP1 interrupt.
    3d14:	00000000 3270636d 38303033 6c61663a     ....mcp23008:fal
    3d24:	69206573 7265746e 74707572 000a7420     se interrupt t..
    3d34:	000025c0 00002510 00002510 0000250e     .%...%...%...%..
    3d44:	000025b2 000025b2 000025a8 0000250e     .%...%...%...%..
    3d54:	000025b2 000025a8 000025b2 0000250e     .%...%...%...%..
    3d64:	000025b8 000025b8 000025b8 00002648     .%...%...%..H&..

00003d74 <__sf_fake_stderr>:
	...

00003d94 <__sf_fake_stdin>:
	...

00003db4 <__sf_fake_stdout>:
	...
    3dd4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3de4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3df4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3e04:	00006665                                ef..

00003e08 <_init>:
    3e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e0e:	bc08      	pop	{r3}
    3e10:	469e      	mov	lr, r3
    3e12:	4770      	bx	lr

00003e14 <__init_array_start>:
    3e14:	000000dd 	.word	0x000000dd

00003e18 <_fini>:
    3e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e1e:	bc08      	pop	{r3}
    3e20:	469e      	mov	lr, r3
    3e22:	4770      	bx	lr

00003e24 <__fini_array_start>:
    3e24:	000000b5 	.word	0x000000b5
