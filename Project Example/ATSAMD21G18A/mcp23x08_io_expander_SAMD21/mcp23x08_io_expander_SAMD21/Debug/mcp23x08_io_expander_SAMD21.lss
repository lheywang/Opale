
mcp23x08_io_expander_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003914  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00003914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  20000064  00003978  00020064  2**2
                  ALLOC
  3 .stack        00002000  20000180  00003a94  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002372c  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d68  00000000  00000000  00043811  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ce88  00000000  00000000  00046579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b60  00000000  00000000  00053401  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bf0  00000000  00000000  00053f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000187c2  00000000  00000000  00054b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d889  00000000  00000000  0006d313  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008681c  00000000  00000000  0007ab9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000248c  00000000  00000000  001013b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 21 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .!. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00003914 	.word	0x00003914

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00003914 	.word	0x00003914
     10c:	00003914 	.word	0x00003914
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00000331 	.word	0x00000331

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
     128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
     12a:	429a      	cmp	r2, r3
     12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
     130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
     132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     134:	6811      	ldr	r1, [r2, #0]
     136:	6019      	str	r1, [r3, #0]
     138:	3304      	adds	r3, #4
     13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
     13e:	428b      	cmp	r3, r1
     140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
     144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
     146:	2200      	movs	r2, #0
     148:	601a      	str	r2, [r3, #0]
     14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
     14e:	4293      	cmp	r3, r2
     150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
     154:	21ff      	movs	r1, #255	; 0xff
     156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
     158:	438b      	bics	r3, r1
     15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	39fd      	subs	r1, #253	; 0xfd
     15e:	2390      	movs	r3, #144	; 0x90
     160:	005b      	lsls	r3, r3, #1
     162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
     164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	2503      	movs	r5, #3
     16c:	43ab      	bics	r3, r5
     16e:	2402      	movs	r4, #2
     170:	4323      	orrs	r3, r4
     172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     174:	78d3      	ldrb	r3, [r2, #3]
     176:	270c      	movs	r7, #12
     178:	43bb      	bics	r3, r7
     17a:	2608      	movs	r6, #8
     17c:	4333      	orrs	r3, r6
     17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
     182:	7b98      	ldrb	r0, [r3, #14]
     184:	2230      	movs	r2, #48	; 0x30
     186:	4390      	bics	r0, r2
     188:	2220      	movs	r2, #32
     18a:	4310      	orrs	r0, r2
     18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     18e:	7b99      	ldrb	r1, [r3, #14]
     190:	43b9      	bics	r1, r7
     192:	4331      	orrs	r1, r6
     194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     196:	7b9a      	ldrb	r2, [r3, #14]
     198:	43aa      	bics	r2, r5
     19a:	4322      	orrs	r2, r4
     19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
     1a0:	6851      	ldr	r1, [r2, #4]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	430b      	orrs	r3, r1
     1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
     1aa:	4798      	blx	r3
        main();
     1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
     1ae:	4798      	blx	r3
     1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00003914 	.word	0x00003914
     1b8:	20000000 	.word	0x20000000
     1bc:	20000064 	.word	0x20000064
     1c0:	20000064 	.word	0x20000064
     1c4:	20000180 	.word	0x20000180
     1c8:	e000ed00 	.word	0xe000ed00
     1cc:	00000000 	.word	0x00000000
     1d0:	41007000 	.word	0x41007000
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	00002909 	.word	0x00002909
     1e4:	000010ad 	.word	0x000010ad

000001e8 <I2C_0_PORT_init>:
struct i2c_m_sync_desc I2C_0;

struct usart_sync_descriptor USART_0;

void I2C_0_PORT_init(void)
{
     1e8:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     1ea:	4b13      	ldr	r3, [pc, #76]	; (238 <I2C_0_PORT_init+0x50>)
     1ec:	2050      	movs	r0, #80	; 0x50
     1ee:	5c19      	ldrb	r1, [r3, r0]
     1f0:	2204      	movs	r2, #4
     1f2:	4391      	bics	r1, r2
     1f4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1f6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f8:	2501      	movs	r5, #1
     1fa:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1fc:	2401      	movs	r4, #1
     1fe:	4321      	orrs	r1, r4
     200:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     202:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     204:	3818      	subs	r0, #24
     206:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     208:	260f      	movs	r6, #15
     20a:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     20c:	2602      	movs	r6, #2
     20e:	4331      	orrs	r1, r6
     210:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     212:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     214:	2151      	movs	r1, #81	; 0x51
     216:	5c5e      	ldrb	r6, [r3, r1]
     218:	4396      	bics	r6, r2
     21a:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     21c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     21e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     220:	4322      	orrs	r2, r4
     222:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     224:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     226:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     228:	3942      	subs	r1, #66	; 0x42
     22a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     22c:	2120      	movs	r1, #32
     22e:	430a      	orrs	r2, r1
     230:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     232:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
}
     234:	bd70      	pop	{r4, r5, r6, pc}
     236:	46c0      	nop			; (mov r8, r8)
     238:	41004400 	.word	0x41004400

0000023c <I2C_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     23c:	4a05      	ldr	r2, [pc, #20]	; (254 <I2C_0_CLOCK_init+0x18>)
     23e:	6a13      	ldr	r3, [r2, #32]
     240:	2108      	movs	r1, #8
     242:	430b      	orrs	r3, r1
     244:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     246:	4b04      	ldr	r3, [pc, #16]	; (258 <I2C_0_CLOCK_init+0x1c>)
     248:	4a04      	ldr	r2, [pc, #16]	; (25c <I2C_0_CLOCK_init+0x20>)
     24a:	805a      	strh	r2, [r3, #2]
     24c:	4a04      	ldr	r2, [pc, #16]	; (260 <I2C_0_CLOCK_init+0x24>)
     24e:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
}
     250:	4770      	bx	lr
     252:	46c0      	nop			; (mov r8, r8)
     254:	40000400 	.word	0x40000400
     258:	40000c00 	.word	0x40000c00
     25c:	00004015 	.word	0x00004015
     260:	00004313 	.word	0x00004313

00000264 <I2C_0_init>:

void I2C_0_init(void)
{
     264:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     266:	4b04      	ldr	r3, [pc, #16]	; (278 <I2C_0_init+0x14>)
     268:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM1);
     26a:	4904      	ldr	r1, [pc, #16]	; (27c <I2C_0_init+0x18>)
     26c:	4804      	ldr	r0, [pc, #16]	; (280 <I2C_0_init+0x1c>)
     26e:	4b05      	ldr	r3, [pc, #20]	; (284 <I2C_0_init+0x20>)
     270:	4798      	blx	r3
	I2C_0_PORT_init();
     272:	4b05      	ldr	r3, [pc, #20]	; (288 <I2C_0_init+0x24>)
     274:	4798      	blx	r3
}
     276:	bd10      	pop	{r4, pc}
     278:	0000023d 	.word	0x0000023d
     27c:	42000c00 	.word	0x42000c00
     280:	2000015c 	.word	0x2000015c
     284:	00000419 	.word	0x00000419
     288:	000001e9 	.word	0x000001e9

0000028c <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     28c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     28e:	4b0f      	ldr	r3, [pc, #60]	; (2cc <USART_0_PORT_init+0x40>)
     290:	22c2      	movs	r2, #194	; 0xc2
     292:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     294:	2501      	movs	r5, #1
     296:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     298:	2401      	movs	r4, #1
     29a:	4321      	orrs	r1, r4
     29c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     29e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a0:	20b1      	movs	r0, #177	; 0xb1
     2a2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2a4:	3ab3      	subs	r2, #179	; 0xb3
     2a6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2a8:	2203      	movs	r2, #3
     2aa:	4311      	orrs	r1, r2
     2ac:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ae:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b0:	21c3      	movs	r1, #195	; 0xc3
     2b2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b6:	4322      	orrs	r2, r4
     2b8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2ba:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2bc:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2be:	39b4      	subs	r1, #180	; 0xb4
     2c0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2c2:	2130      	movs	r1, #48	; 0x30
     2c4:	430a      	orrs	r2, r1
     2c6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2c8:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB02, PINMUX_PB02D_SERCOM5_PAD0);

	gpio_set_pin_function(PB03, PINMUX_PB03D_SERCOM5_PAD1);
}
     2ca:	bd30      	pop	{r4, r5, pc}
     2cc:	41004400 	.word	0x41004400

000002d0 <USART_0_CLOCK_init>:
     2d0:	4a04      	ldr	r2, [pc, #16]	; (2e4 <USART_0_CLOCK_init+0x14>)
     2d2:	6a13      	ldr	r3, [r2, #32]
     2d4:	2180      	movs	r1, #128	; 0x80
     2d6:	430b      	orrs	r3, r1
     2d8:	6213      	str	r3, [r2, #32]
     2da:	4a03      	ldr	r2, [pc, #12]	; (2e8 <USART_0_CLOCK_init+0x18>)
     2dc:	4b03      	ldr	r3, [pc, #12]	; (2ec <USART_0_CLOCK_init+0x1c>)
     2de:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     2e0:	4770      	bx	lr
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	40000400 	.word	0x40000400
     2e8:	00004019 	.word	0x00004019
     2ec:	40000c00 	.word	0x40000c00

000002f0 <USART_0_init>:

void USART_0_init(void)
{
     2f0:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     2f2:	4b05      	ldr	r3, [pc, #20]	; (308 <USART_0_init+0x18>)
     2f4:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
     2f6:	2200      	movs	r2, #0
     2f8:	4904      	ldr	r1, [pc, #16]	; (30c <USART_0_init+0x1c>)
     2fa:	4805      	ldr	r0, [pc, #20]	; (310 <USART_0_init+0x20>)
     2fc:	4b05      	ldr	r3, [pc, #20]	; (314 <USART_0_init+0x24>)
     2fe:	4798      	blx	r3
	USART_0_PORT_init();
     300:	4b05      	ldr	r3, [pc, #20]	; (318 <USART_0_init+0x28>)
     302:	4798      	blx	r3
}
     304:	bd10      	pop	{r4, pc}
     306:	46c0      	nop			; (mov r8, r8)
     308:	000002d1 	.word	0x000002d1
     30c:	42001c00 	.word	0x42001c00
     310:	20000150 	.word	0x20000150
     314:	000005d1 	.word	0x000005d1
     318:	0000028d 	.word	0x0000028d

0000031c <delay_driver_init>:

void delay_driver_init(void)
{
     31c:	b510      	push	{r4, lr}
	delay_init(SysTick);
     31e:	4802      	ldr	r0, [pc, #8]	; (328 <delay_driver_init+0xc>)
     320:	4b02      	ldr	r3, [pc, #8]	; (32c <delay_driver_init+0x10>)
     322:	4798      	blx	r3
}
     324:	bd10      	pop	{r4, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	e000e010 	.word	0xe000e010
     32c:	0000037d 	.word	0x0000037d

00000330 <system_init>:

void system_init(void)
{
     330:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     332:	4b0c      	ldr	r3, [pc, #48]	; (364 <system_init+0x34>)
     334:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     336:	23c0      	movs	r3, #192	; 0xc0
     338:	05db      	lsls	r3, r3, #23
     33a:	2208      	movs	r2, #8
     33c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     33e:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <system_init+0x38>)
     342:	4a0a      	ldr	r2, [pc, #40]	; (36c <system_init+0x3c>)
     344:	629a      	str	r2, [r3, #40]	; 0x28
     346:	22c0      	movs	r2, #192	; 0xc0
     348:	0612      	lsls	r2, r2, #24
     34a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     34c:	2143      	movs	r1, #67	; 0x43
     34e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     350:	2001      	movs	r0, #1
     352:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     354:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(mcp23008_reset_pin, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(mcp23008_reset_pin, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     356:	4b06      	ldr	r3, [pc, #24]	; (370 <system_init+0x40>)
     358:	4798      	blx	r3

	USART_0_init();
     35a:	4b06      	ldr	r3, [pc, #24]	; (374 <system_init+0x44>)
     35c:	4798      	blx	r3

	delay_driver_init();
     35e:	4b06      	ldr	r3, [pc, #24]	; (378 <system_init+0x48>)
     360:	4798      	blx	r3
}
     362:	bd10      	pop	{r4, pc}
     364:	000006b1 	.word	0x000006b1
     368:	41004400 	.word	0x41004400
     36c:	40000008 	.word	0x40000008
     370:	00000265 	.word	0x00000265
     374:	000002f1 	.word	0x000002f1
     378:	0000031d 	.word	0x0000031d

0000037c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     37c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     37e:	4b02      	ldr	r3, [pc, #8]	; (388 <delay_init+0xc>)
     380:	6018      	str	r0, [r3, #0]
     382:	4b02      	ldr	r3, [pc, #8]	; (38c <delay_init+0x10>)
     384:	4798      	blx	r3
}
     386:	bd10      	pop	{r4, pc}
     388:	20000080 	.word	0x20000080
     38c:	00001061 	.word	0x00001061

00000390 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     390:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     392:	4b04      	ldr	r3, [pc, #16]	; (3a4 <delay_ms+0x14>)
     394:	681c      	ldr	r4, [r3, #0]
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <delay_ms+0x18>)
     398:	4798      	blx	r3
     39a:	0001      	movs	r1, r0
     39c:	0020      	movs	r0, r4
     39e:	4b03      	ldr	r3, [pc, #12]	; (3ac <delay_ms+0x1c>)
     3a0:	4798      	blx	r3
}
     3a2:	bd10      	pop	{r4, pc}
     3a4:	20000080 	.word	0x20000080
     3a8:	000006a5 	.word	0x000006a5
     3ac:	0000106d 	.word	0x0000106d

000003b0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     3b0:	b510      	push	{r4, lr}
     3b2:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     3b4:	3814      	subs	r0, #20
     3b6:	8b84      	ldrh	r4, [r0, #28]
     3b8:	ab01      	add	r3, sp, #4
     3ba:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     3bc:	0014      	movs	r4, r2
     3be:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     3c0:	4a06      	ldr	r2, [pc, #24]	; (3dc <i2c_m_sync_write+0x2c>)
     3c2:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     3c4:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3c6:	0019      	movs	r1, r3
     3c8:	4b05      	ldr	r3, [pc, #20]	; (3e0 <i2c_m_sync_write+0x30>)
     3ca:	4798      	blx	r3

	if (ret) {
     3cc:	2800      	cmp	r0, #0
     3ce:	d102      	bne.n	3d6 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     3d0:	0020      	movs	r0, r4
     3d2:	b004      	add	sp, #16
     3d4:	bd10      	pop	{r4, pc}
		return ret;
     3d6:	0004      	movs	r4, r0
     3d8:	e7fa      	b.n	3d0 <i2c_m_sync_write+0x20>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	ffff8000 	.word	0xffff8000
     3e0:	00000d31 	.word	0x00000d31

000003e4 <i2c_m_sync_read>:
{
     3e4:	b510      	push	{r4, lr}
     3e6:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     3e8:	3814      	subs	r0, #20
     3ea:	8b84      	ldrh	r4, [r0, #28]
     3ec:	ab01      	add	r3, sp, #4
     3ee:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     3f0:	0014      	movs	r4, r2
     3f2:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     3f4:	4a06      	ldr	r2, [pc, #24]	; (410 <i2c_m_sync_read+0x2c>)
     3f6:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     3f8:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3fa:	0019      	movs	r1, r3
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <i2c_m_sync_read+0x30>)
     3fe:	4798      	blx	r3
	if (ret) {
     400:	2800      	cmp	r0, #0
     402:	d102      	bne.n	40a <i2c_m_sync_read+0x26>
}
     404:	0020      	movs	r0, r4
     406:	b004      	add	sp, #16
     408:	bd10      	pop	{r4, pc}
		return ret;
     40a:	0004      	movs	r4, r0
     40c:	e7fa      	b.n	404 <i2c_m_sync_read+0x20>
     40e:	46c0      	nop			; (mov r8, r8)
     410:	ffff8001 	.word	0xffff8001
     414:	00000d31 	.word	0x00000d31

00000418 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     418:	b570      	push	{r4, r5, r6, lr}
     41a:	0004      	movs	r4, r0
     41c:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     41e:	1e43      	subs	r3, r0, #1
     420:	4198      	sbcs	r0, r3
     422:	b2c0      	uxtb	r0, r0
     424:	225e      	movs	r2, #94	; 0x5e
     426:	4907      	ldr	r1, [pc, #28]	; (444 <i2c_m_sync_init+0x2c>)
     428:	4b07      	ldr	r3, [pc, #28]	; (448 <i2c_m_sync_init+0x30>)
     42a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     42c:	0029      	movs	r1, r5
     42e:	0020      	movs	r0, r4
     430:	4b06      	ldr	r3, [pc, #24]	; (44c <i2c_m_sync_init+0x34>)
     432:	4798      	blx	r3
	if (init_status) {
     434:	2800      	cmp	r0, #0
     436:	d103      	bne.n	440 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     438:	4b05      	ldr	r3, [pc, #20]	; (450 <i2c_m_sync_init+0x38>)
     43a:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     43c:	4b05      	ldr	r3, [pc, #20]	; (454 <i2c_m_sync_init+0x3c>)
     43e:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     440:	bd70      	pop	{r4, r5, r6, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	00003204 	.word	0x00003204
     448:	00000679 	.word	0x00000679
     44c:	00000c81 	.word	0x00000c81
     450:	000003e5 	.word	0x000003e5
     454:	000003b1 	.word	0x000003b1

00000458 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     458:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     45a:	4b01      	ldr	r3, [pc, #4]	; (460 <i2c_m_sync_enable+0x8>)
     45c:	4798      	blx	r3
}
     45e:	bd10      	pop	{r4, pc}
     460:	00000cb1 	.word	0x00000cb1

00000464 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     464:	0589      	lsls	r1, r1, #22
     466:	0d89      	lsrs	r1, r1, #22
     468:	2380      	movs	r3, #128	; 0x80
     46a:	00db      	lsls	r3, r3, #3
     46c:	401a      	ands	r2, r3
     46e:	430a      	orrs	r2, r1
     470:	8382      	strh	r2, [r0, #28]
}
     472:	0010      	movs	r0, r2
     474:	4770      	bx	lr

00000476 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     476:	3014      	adds	r0, #20
     478:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     47a:	2000      	movs	r0, #0
     47c:	4770      	bx	lr
	...

00000480 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     480:	b570      	push	{r4, r5, r6, lr}
     482:	0004      	movs	r4, r0
     484:	000d      	movs	r5, r1
     486:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     488:	2800      	cmp	r0, #0
     48a:	d00e      	beq.n	4aa <io_write+0x2a>
     48c:	2900      	cmp	r1, #0
     48e:	d00a      	beq.n	4a6 <io_write+0x26>
     490:	2001      	movs	r0, #1
     492:	2234      	movs	r2, #52	; 0x34
     494:	4906      	ldr	r1, [pc, #24]	; (4b0 <io_write+0x30>)
     496:	4b07      	ldr	r3, [pc, #28]	; (4b4 <io_write+0x34>)
     498:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     49a:	6823      	ldr	r3, [r4, #0]
     49c:	0032      	movs	r2, r6
     49e:	0029      	movs	r1, r5
     4a0:	0020      	movs	r0, r4
     4a2:	4798      	blx	r3
}
     4a4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     4a6:	2000      	movs	r0, #0
     4a8:	e7f3      	b.n	492 <io_write+0x12>
     4aa:	2000      	movs	r0, #0
     4ac:	e7f1      	b.n	492 <io_write+0x12>
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	00003220 	.word	0x00003220
     4b4:	00000679 	.word	0x00000679

000004b8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4b8:	b570      	push	{r4, r5, r6, lr}
     4ba:	0004      	movs	r4, r0
     4bc:	000d      	movs	r5, r1
     4be:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4c0:	2800      	cmp	r0, #0
     4c2:	d00e      	beq.n	4e2 <io_read+0x2a>
     4c4:	2900      	cmp	r1, #0
     4c6:	d00a      	beq.n	4de <io_read+0x26>
     4c8:	2001      	movs	r0, #1
     4ca:	223d      	movs	r2, #61	; 0x3d
     4cc:	4906      	ldr	r1, [pc, #24]	; (4e8 <io_read+0x30>)
     4ce:	4b07      	ldr	r3, [pc, #28]	; (4ec <io_read+0x34>)
     4d0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4d2:	6863      	ldr	r3, [r4, #4]
     4d4:	0032      	movs	r2, r6
     4d6:	0029      	movs	r1, r5
     4d8:	0020      	movs	r0, r4
     4da:	4798      	blx	r3
}
     4dc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     4de:	2000      	movs	r0, #0
     4e0:	e7f3      	b.n	4ca <io_read+0x12>
     4e2:	2000      	movs	r0, #0
     4e4:	e7f1      	b.n	4ca <io_read+0x12>
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	00003220 	.word	0x00003220
     4ec:	00000679 	.word	0x00000679

000004f0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4f2:	0005      	movs	r5, r0
     4f4:	000e      	movs	r6, r1
     4f6:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     4f8:	2800      	cmp	r0, #0
     4fa:	d023      	beq.n	544 <usart_sync_write+0x54>
     4fc:	2900      	cmp	r1, #0
     4fe:	d023      	beq.n	548 <usart_sync_write+0x58>
     500:	2a00      	cmp	r2, #0
     502:	d123      	bne.n	54c <usart_sync_write+0x5c>
     504:	2000      	movs	r0, #0
     506:	22f1      	movs	r2, #241	; 0xf1
     508:	4911      	ldr	r1, [pc, #68]	; (550 <usart_sync_write+0x60>)
     50a:	4b12      	ldr	r3, [pc, #72]	; (554 <usart_sync_write+0x64>)
     50c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     50e:	002c      	movs	r4, r5
     510:	3408      	adds	r4, #8
     512:	0020      	movs	r0, r4
     514:	4b10      	ldr	r3, [pc, #64]	; (558 <usart_sync_write+0x68>)
     516:	4798      	blx	r3
     518:	2800      	cmp	r0, #0
     51a:	d0f8      	beq.n	50e <usart_sync_write+0x1e>
     51c:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     51e:	5d71      	ldrb	r1, [r6, r5]
     520:	0020      	movs	r0, r4
     522:	4b0e      	ldr	r3, [pc, #56]	; (55c <usart_sync_write+0x6c>)
     524:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     526:	0020      	movs	r0, r4
     528:	4b0b      	ldr	r3, [pc, #44]	; (558 <usart_sync_write+0x68>)
     52a:	4798      	blx	r3
     52c:	2800      	cmp	r0, #0
     52e:	d0fa      	beq.n	526 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     530:	3501      	adds	r5, #1
     532:	42bd      	cmp	r5, r7
     534:	d3f3      	bcc.n	51e <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     536:	0020      	movs	r0, r4
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <usart_sync_write+0x70>)
     53a:	4798      	blx	r3
     53c:	2800      	cmp	r0, #0
     53e:	d0fa      	beq.n	536 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     540:	0028      	movs	r0, r5
     542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     544:	2000      	movs	r0, #0
     546:	e7de      	b.n	506 <usart_sync_write+0x16>
     548:	2000      	movs	r0, #0
     54a:	e7dc      	b.n	506 <usart_sync_write+0x16>
     54c:	2001      	movs	r0, #1
     54e:	e7da      	b.n	506 <usart_sync_write+0x16>
     550:	00003234 	.word	0x00003234
     554:	00000679 	.word	0x00000679
     558:	00000c5f 	.word	0x00000c5f
     55c:	00000c4f 	.word	0x00000c4f
     560:	00000c69 	.word	0x00000c69

00000564 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     566:	46ce      	mov	lr, r9
     568:	4647      	mov	r7, r8
     56a:	b580      	push	{r7, lr}
     56c:	1e05      	subs	r5, r0, #0
     56e:	4688      	mov	r8, r1
     570:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     572:	d01f      	beq.n	5b4 <usart_sync_read+0x50>
     574:	2900      	cmp	r1, #0
     576:	d01f      	beq.n	5b8 <usart_sync_read+0x54>
     578:	2a00      	cmp	r2, #0
     57a:	d11f      	bne.n	5bc <usart_sync_read+0x58>
     57c:	2000      	movs	r0, #0
     57e:	2286      	movs	r2, #134	; 0x86
     580:	0052      	lsls	r2, r2, #1
     582:	490f      	ldr	r1, [pc, #60]	; (5c0 <usart_sync_read+0x5c>)
     584:	4b0f      	ldr	r3, [pc, #60]	; (5c4 <usart_sync_read+0x60>)
     586:	4798      	blx	r3
	uint32_t                      offset = 0;
     588:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     58a:	002c      	movs	r4, r5
     58c:	3408      	adds	r4, #8
     58e:	0020      	movs	r0, r4
     590:	4b0d      	ldr	r3, [pc, #52]	; (5c8 <usart_sync_read+0x64>)
     592:	4798      	blx	r3
     594:	2800      	cmp	r0, #0
     596:	d0f8      	beq.n	58a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     598:	4643      	mov	r3, r8
     59a:	199f      	adds	r7, r3, r6
     59c:	0020      	movs	r0, r4
     59e:	4b0b      	ldr	r3, [pc, #44]	; (5cc <usart_sync_read+0x68>)
     5a0:	4798      	blx	r3
     5a2:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     5a4:	3601      	adds	r6, #1
     5a6:	454e      	cmp	r6, r9
     5a8:	d3ef      	bcc.n	58a <usart_sync_read+0x26>

	return (int32_t)offset;
}
     5aa:	0030      	movs	r0, r6
     5ac:	bc0c      	pop	{r2, r3}
     5ae:	4690      	mov	r8, r2
     5b0:	4699      	mov	r9, r3
     5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5b4:	2000      	movs	r0, #0
     5b6:	e7e2      	b.n	57e <usart_sync_read+0x1a>
     5b8:	2000      	movs	r0, #0
     5ba:	e7e0      	b.n	57e <usart_sync_read+0x1a>
     5bc:	2001      	movs	r0, #1
     5be:	e7de      	b.n	57e <usart_sync_read+0x1a>
     5c0:	00003234 	.word	0x00003234
     5c4:	00000679 	.word	0x00000679
     5c8:	00000c75 	.word	0x00000c75
     5cc:	00000c57 	.word	0x00000c57

000005d0 <usart_sync_init>:
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5d6:	2800      	cmp	r0, #0
     5d8:	d014      	beq.n	604 <usart_sync_init+0x34>
     5da:	2900      	cmp	r1, #0
     5dc:	d010      	beq.n	600 <usart_sync_init+0x30>
     5de:	2001      	movs	r0, #1
     5e0:	2234      	movs	r2, #52	; 0x34
     5e2:	4909      	ldr	r1, [pc, #36]	; (608 <usart_sync_init+0x38>)
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <usart_sync_init+0x3c>)
     5e6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     5e8:	0020      	movs	r0, r4
     5ea:	3008      	adds	r0, #8
     5ec:	0029      	movs	r1, r5
     5ee:	4b08      	ldr	r3, [pc, #32]	; (610 <usart_sync_init+0x40>)
     5f0:	4798      	blx	r3
	if (init_status) {
     5f2:	2800      	cmp	r0, #0
     5f4:	d103      	bne.n	5fe <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     5f6:	4b07      	ldr	r3, [pc, #28]	; (614 <usart_sync_init+0x44>)
     5f8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     5fa:	4b07      	ldr	r3, [pc, #28]	; (618 <usart_sync_init+0x48>)
     5fc:	6023      	str	r3, [r4, #0]
}
     5fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     600:	2000      	movs	r0, #0
     602:	e7ed      	b.n	5e0 <usart_sync_init+0x10>
     604:	2000      	movs	r0, #0
     606:	e7eb      	b.n	5e0 <usart_sync_init+0x10>
     608:	00003234 	.word	0x00003234
     60c:	00000679 	.word	0x00000679
     610:	00000c11 	.word	0x00000c11
     614:	00000565 	.word	0x00000565
     618:	000004f1 	.word	0x000004f1

0000061c <usart_sync_enable>:
{
     61c:	b510      	push	{r4, lr}
     61e:	0004      	movs	r4, r0
	ASSERT(descr);
     620:	1e43      	subs	r3, r0, #1
     622:	4198      	sbcs	r0, r3
     624:	b2c0      	uxtb	r0, r0
     626:	2253      	movs	r2, #83	; 0x53
     628:	4904      	ldr	r1, [pc, #16]	; (63c <usart_sync_enable+0x20>)
     62a:	4b05      	ldr	r3, [pc, #20]	; (640 <usart_sync_enable+0x24>)
     62c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     62e:	0020      	movs	r0, r4
     630:	3008      	adds	r0, #8
     632:	4b04      	ldr	r3, [pc, #16]	; (644 <usart_sync_enable+0x28>)
     634:	4798      	blx	r3
}
     636:	2000      	movs	r0, #0
     638:	bd10      	pop	{r4, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	00003234 	.word	0x00003234
     640:	00000679 	.word	0x00000679
     644:	00000c3d 	.word	0x00000c3d

00000648 <usart_sync_get_io_descriptor>:
{
     648:	b570      	push	{r4, r5, r6, lr}
     64a:	0004      	movs	r4, r0
     64c:	000d      	movs	r5, r1
	ASSERT(descr && io);
     64e:	2800      	cmp	r0, #0
     650:	d00b      	beq.n	66a <usart_sync_get_io_descriptor+0x22>
     652:	2900      	cmp	r1, #0
     654:	d007      	beq.n	666 <usart_sync_get_io_descriptor+0x1e>
     656:	2001      	movs	r0, #1
     658:	2269      	movs	r2, #105	; 0x69
     65a:	4905      	ldr	r1, [pc, #20]	; (670 <usart_sync_get_io_descriptor+0x28>)
     65c:	4b05      	ldr	r3, [pc, #20]	; (674 <usart_sync_get_io_descriptor+0x2c>)
     65e:	4798      	blx	r3
	*io = &descr->io;
     660:	602c      	str	r4, [r5, #0]
}
     662:	2000      	movs	r0, #0
     664:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     666:	2000      	movs	r0, #0
     668:	e7f6      	b.n	658 <usart_sync_get_io_descriptor+0x10>
     66a:	2000      	movs	r0, #0
     66c:	e7f4      	b.n	658 <usart_sync_get_io_descriptor+0x10>
     66e:	46c0      	nop			; (mov r8, r8)
     670:	00003234 	.word	0x00003234
     674:	00000679 	.word	0x00000679

00000678 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     678:	2800      	cmp	r0, #0
     67a:	d100      	bne.n	67e <assert+0x6>
		__asm("BKPT #0");
     67c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     67e:	4770      	bx	lr

00000680 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     680:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     682:	4a06      	ldr	r2, [pc, #24]	; (69c <_sbrk+0x1c>)
     684:	6812      	ldr	r2, [r2, #0]
     686:	2a00      	cmp	r2, #0
     688:	d004      	beq.n	694 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     68a:	4a04      	ldr	r2, [pc, #16]	; (69c <_sbrk+0x1c>)
     68c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     68e:	18c3      	adds	r3, r0, r3
     690:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     692:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     694:	4902      	ldr	r1, [pc, #8]	; (6a0 <_sbrk+0x20>)
     696:	4a01      	ldr	r2, [pc, #4]	; (69c <_sbrk+0x1c>)
     698:	6011      	str	r1, [r2, #0]
     69a:	e7f6      	b.n	68a <_sbrk+0xa>
     69c:	20000084 	.word	0x20000084
     6a0:	20002180 	.word	0x20002180

000006a4 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     6a4:	0103      	lsls	r3, r0, #4
     6a6:	1a1b      	subs	r3, r3, r0
     6a8:	011a      	lsls	r2, r3, #4
     6aa:	2064      	movs	r0, #100	; 0x64
     6ac:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     6ae:	4770      	bx	lr

000006b0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     6b0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     6b2:	4b07      	ldr	r3, [pc, #28]	; (6d0 <_init_chip+0x20>)
     6b4:	685a      	ldr	r2, [r3, #4]
     6b6:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     6b8:	4b06      	ldr	r3, [pc, #24]	; (6d4 <_init_chip+0x24>)
     6ba:	4798      	blx	r3
	_sysctrl_init_sources();
     6bc:	4b06      	ldr	r3, [pc, #24]	; (6d8 <_init_chip+0x28>)
     6be:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     6c0:	2002      	movs	r0, #2
     6c2:	4c06      	ldr	r4, [pc, #24]	; (6dc <_init_chip+0x2c>)
     6c4:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     6c6:	4b06      	ldr	r3, [pc, #24]	; (6e0 <_init_chip+0x30>)
     6c8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     6ca:	20fd      	movs	r0, #253	; 0xfd
     6cc:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     6ce:	bd10      	pop	{r4, pc}
     6d0:	41004000 	.word	0x41004000
     6d4:	00000725 	.word	0x00000725
     6d8:	00000fad 	.word	0x00000fad
     6dc:	000006e5 	.word	0x000006e5
     6e0:	00000fc5 	.word	0x00000fc5

000006e4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     6e4:	07c3      	lsls	r3, r0, #31
     6e6:	d509      	bpl.n	6fc <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     6e8:	4b0b      	ldr	r3, [pc, #44]	; (718 <_gclk_init_generators_by_fref+0x34>)
     6ea:	2280      	movs	r2, #128	; 0x80
     6ec:	0052      	lsls	r2, r2, #1
     6ee:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     6f0:	4a0a      	ldr	r2, [pc, #40]	; (71c <_gclk_init_generators_by_fref+0x38>)
     6f2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     6f4:	4b08      	ldr	r3, [pc, #32]	; (718 <_gclk_init_generators_by_fref+0x34>)
     6f6:	785b      	ldrb	r3, [r3, #1]
     6f8:	09db      	lsrs	r3, r3, #7
     6fa:	d1fb      	bne.n	6f4 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     6fc:	0783      	lsls	r3, r0, #30
     6fe:	d509      	bpl.n	714 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     700:	4b05      	ldr	r3, [pc, #20]	; (718 <_gclk_init_generators_by_fref+0x34>)
     702:	2202      	movs	r2, #2
     704:	32ff      	adds	r2, #255	; 0xff
     706:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     708:	4a05      	ldr	r2, [pc, #20]	; (720 <_gclk_init_generators_by_fref+0x3c>)
     70a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     70c:	4b02      	ldr	r3, [pc, #8]	; (718 <_gclk_init_generators_by_fref+0x34>)
     70e:	785b      	ldrb	r3, [r3, #1]
     710:	09db      	lsrs	r3, r3, #7
     712:	d1fb      	bne.n	70c <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     714:	4770      	bx	lr
     716:	46c0      	nop			; (mov r8, r8)
     718:	40000c00 	.word	0x40000c00
     71c:	00010700 	.word	0x00010700
     720:	00010301 	.word	0x00010301

00000724 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     724:	4b07      	ldr	r3, [pc, #28]	; (744 <_pm_init+0x20>)
     726:	7a1a      	ldrb	r2, [r3, #8]
     728:	2101      	movs	r1, #1
     72a:	430a      	orrs	r2, r1
     72c:	b2d2      	uxtb	r2, r2
     72e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     730:	7a5a      	ldrb	r2, [r3, #9]
     732:	b2d2      	uxtb	r2, r2
     734:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     736:	7a9a      	ldrb	r2, [r3, #10]
     738:	b2d2      	uxtb	r2, r2
     73a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     73c:	7ada      	ldrb	r2, [r3, #11]
     73e:	b2d2      	uxtb	r2, r2
     740:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     742:	4770      	bx	lr
     744:	40000400 	.word	0x40000400

00000748 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     748:	4b02      	ldr	r3, [pc, #8]	; (754 <_sercom_get_hardware_index+0xc>)
     74a:	469c      	mov	ip, r3
     74c:	4460      	add	r0, ip
     74e:	0a80      	lsrs	r0, r0, #10
     750:	b2c0      	uxtb	r0, r0
}
     752:	4770      	bx	lr
     754:	bdfff800 	.word	0xbdfff800

00000758 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     758:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     75a:	4b0b      	ldr	r3, [pc, #44]	; (788 <_get_sercom_index+0x30>)
     75c:	4798      	blx	r3
     75e:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     760:	2000      	movs	r0, #0
     762:	2800      	cmp	r0, #0
     764:	d006      	beq.n	774 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     766:	4a09      	ldr	r2, [pc, #36]	; (78c <_get_sercom_index+0x34>)
     768:	4909      	ldr	r1, [pc, #36]	; (790 <_get_sercom_index+0x38>)
     76a:	2000      	movs	r0, #0
     76c:	4b09      	ldr	r3, [pc, #36]	; (794 <_get_sercom_index+0x3c>)
     76e:	4798      	blx	r3
	return 0;
     770:	2000      	movs	r0, #0
}
     772:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     774:	0083      	lsls	r3, r0, #2
     776:	181b      	adds	r3, r3, r0
     778:	0099      	lsls	r1, r3, #2
     77a:	4b07      	ldr	r3, [pc, #28]	; (798 <_get_sercom_index+0x40>)
     77c:	5ccb      	ldrb	r3, [r1, r3]
     77e:	429a      	cmp	r2, r3
     780:	d0f7      	beq.n	772 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     782:	3001      	adds	r0, #1
     784:	b2c0      	uxtb	r0, r0
     786:	e7ec      	b.n	762 <_get_sercom_index+0xa>
     788:	00000749 	.word	0x00000749
     78c:	0000023a 	.word	0x0000023a
     790:	000032a0 	.word	0x000032a0
     794:	00000679 	.word	0x00000679
     798:	00003250 	.word	0x00003250

0000079c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     79c:	b570      	push	{r4, r5, r6, lr}
     79e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     7a0:	4b38      	ldr	r3, [pc, #224]	; (884 <_usart_init+0xe8>)
     7a2:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     7a4:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     7a6:	07db      	lsls	r3, r3, #31
     7a8:	d41d      	bmi.n	7e6 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     7aa:	0083      	lsls	r3, r0, #2
     7ac:	181b      	adds	r3, r3, r0
     7ae:	009a      	lsls	r2, r3, #2
     7b0:	4b35      	ldr	r3, [pc, #212]	; (888 <_usart_init+0xec>)
     7b2:	189b      	adds	r3, r3, r2
     7b4:	685a      	ldr	r2, [r3, #4]
     7b6:	231c      	movs	r3, #28
     7b8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7ba:	69e3      	ldr	r3, [r4, #28]
     7bc:	079b      	lsls	r3, r3, #30
     7be:	d1fc      	bne.n	7ba <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     7c0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     7c2:	079b      	lsls	r3, r3, #30
     7c4:	d509      	bpl.n	7da <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     7c6:	6823      	ldr	r3, [r4, #0]
     7c8:	2102      	movs	r1, #2
     7ca:	438b      	bics	r3, r1
     7cc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7ce:	69e3      	ldr	r3, [r4, #28]
     7d0:	079b      	lsls	r3, r3, #30
     7d2:	d1fc      	bne.n	7ce <_usart_init+0x32>
     7d4:	69e3      	ldr	r3, [r4, #28]
     7d6:	079b      	lsls	r3, r3, #30
     7d8:	d4fc      	bmi.n	7d4 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     7da:	2301      	movs	r3, #1
     7dc:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     7de:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7e0:	69e3      	ldr	r3, [r4, #28]
     7e2:	079b      	lsls	r3, r3, #30
     7e4:	d1fc      	bne.n	7e0 <_usart_init+0x44>
     7e6:	69e3      	ldr	r3, [r4, #28]
     7e8:	07db      	lsls	r3, r3, #31
     7ea:	d4fc      	bmi.n	7e6 <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     7ec:	0083      	lsls	r3, r0, #2
     7ee:	181b      	adds	r3, r3, r0
     7f0:	009a      	lsls	r2, r3, #2
     7f2:	4b25      	ldr	r3, [pc, #148]	; (888 <_usart_init+0xec>)
     7f4:	189b      	adds	r3, r3, r2
     7f6:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     7f8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     7fa:	69e3      	ldr	r3, [r4, #28]
     7fc:	079b      	lsls	r3, r3, #30
     7fe:	d1fc      	bne.n	7fa <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     800:	0083      	lsls	r3, r0, #2
     802:	181b      	adds	r3, r3, r0
     804:	009a      	lsls	r2, r3, #2
     806:	4b20      	ldr	r3, [pc, #128]	; (888 <_usart_init+0xec>)
     808:	189b      	adds	r3, r3, r2
     80a:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     80c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     80e:	69e3      	ldr	r3, [r4, #28]
     810:	075b      	lsls	r3, r3, #29
     812:	d1fc      	bne.n	80e <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     814:	0083      	lsls	r3, r0, #2
     816:	181b      	adds	r3, r3, r0
     818:	009a      	lsls	r2, r3, #2
     81a:	4b1b      	ldr	r3, [pc, #108]	; (888 <_usart_init+0xec>)
     81c:	189b      	adds	r3, r3, r2
     81e:	685b      	ldr	r3, [r3, #4]
     820:	049a      	lsls	r2, r3, #18
     822:	d40b      	bmi.n	83c <_usart_init+0xa0>
     824:	22c0      	movs	r2, #192	; 0xc0
     826:	01d2      	lsls	r2, r2, #7
     828:	4213      	tst	r3, r2
     82a:	d107      	bne.n	83c <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     82c:	0083      	lsls	r3, r0, #2
     82e:	181b      	adds	r3, r3, r0
     830:	009a      	lsls	r2, r3, #2
     832:	4b15      	ldr	r3, [pc, #84]	; (888 <_usart_init+0xec>)
     834:	189b      	adds	r3, r3, r2
     836:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     838:	81a3      	strh	r3, [r4, #12]
     83a:	e015      	b.n	868 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     83c:	0083      	lsls	r3, r0, #2
     83e:	181b      	adds	r3, r3, r0
     840:	009a      	lsls	r2, r3, #2
     842:	4911      	ldr	r1, [pc, #68]	; (888 <_usart_init+0xec>)
     844:	1889      	adds	r1, r1, r2
     846:	898a      	ldrh	r2, [r1, #12]
     848:	89a3      	ldrh	r3, [r4, #12]
     84a:	04d2      	lsls	r2, r2, #19
     84c:	0cd2      	lsrs	r2, r2, #19
     84e:	0b5b      	lsrs	r3, r3, #13
     850:	035b      	lsls	r3, r3, #13
     852:	4313      	orrs	r3, r2
     854:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     856:	7b8b      	ldrb	r3, [r1, #14]
     858:	2207      	movs	r2, #7
     85a:	401a      	ands	r2, r3
     85c:	89a3      	ldrh	r3, [r4, #12]
     85e:	0352      	lsls	r2, r2, #13
     860:	04db      	lsls	r3, r3, #19
     862:	0cdb      	lsrs	r3, r3, #19
     864:	4313      	orrs	r3, r2
     866:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     868:	4a07      	ldr	r2, [pc, #28]	; (888 <_usart_init+0xec>)
     86a:	0083      	lsls	r3, r0, #2
     86c:	181d      	adds	r5, r3, r0
     86e:	00a9      	lsls	r1, r5, #2
     870:	000d      	movs	r5, r1
     872:	1851      	adds	r1, r2, r1
     874:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     876:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     878:	1952      	adds	r2, r2, r5
     87a:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     87c:	2330      	movs	r3, #48	; 0x30
     87e:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     880:	2000      	movs	r0, #0
     882:	bd70      	pop	{r4, r5, r6, pc}
     884:	00000759 	.word	0x00000759
     888:	00003250 	.word	0x00003250

0000088c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     88c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     88e:	4b0d      	ldr	r3, [pc, #52]	; (8c4 <_get_i2cm_index+0x38>)
     890:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     892:	2300      	movs	r3, #0
     894:	2b00      	cmp	r3, #0
     896:	d008      	beq.n	8aa <_get_i2cm_index+0x1e>
		if (_i2cms[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     898:	22e6      	movs	r2, #230	; 0xe6
     89a:	0092      	lsls	r2, r2, #2
     89c:	490a      	ldr	r1, [pc, #40]	; (8c8 <_get_i2cm_index+0x3c>)
     89e:	2000      	movs	r0, #0
     8a0:	4b0a      	ldr	r3, [pc, #40]	; (8cc <_get_i2cm_index+0x40>)
     8a2:	4798      	blx	r3
	return -1;
     8a4:	2001      	movs	r0, #1
     8a6:	4240      	negs	r0, r0
}
     8a8:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
     8aa:	005a      	lsls	r2, r3, #1
     8ac:	18d2      	adds	r2, r2, r3
     8ae:	00d1      	lsls	r1, r2, #3
     8b0:	4a07      	ldr	r2, [pc, #28]	; (8d0 <_get_i2cm_index+0x44>)
     8b2:	1852      	adds	r2, r2, r1
     8b4:	7d12      	ldrb	r2, [r2, #20]
     8b6:	4290      	cmp	r0, r2
     8b8:	d002      	beq.n	8c0 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     8ba:	3301      	adds	r3, #1
     8bc:	b2db      	uxtb	r3, r3
     8be:	e7e9      	b.n	894 <_get_i2cm_index+0x8>
			return i;
     8c0:	b258      	sxtb	r0, r3
     8c2:	e7f1      	b.n	8a8 <_get_i2cm_index+0x1c>
     8c4:	00000749 	.word	0x00000749
     8c8:	000032a0 	.word	0x000032a0
     8cc:	00000679 	.word	0x00000679
     8d0:	00003250 	.word	0x00003250

000008d4 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     8d4:	b570      	push	{r4, r5, r6, lr}
     8d6:	0005      	movs	r5, r0
     8d8:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     8da:	0008      	movs	r0, r1
     8dc:	4b2d      	ldr	r3, [pc, #180]	; (994 <_i2c_m_sync_init_impl+0xc0>)
     8de:	4798      	blx	r3
     8e0:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     8e2:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     8e4:	07db      	lsls	r3, r3, #31
     8e6:	d41d      	bmi.n	924 <_i2c_m_sync_init_impl+0x50>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     8e8:	0043      	lsls	r3, r0, #1
     8ea:	181b      	adds	r3, r3, r0
     8ec:	00da      	lsls	r2, r3, #3
     8ee:	4b2a      	ldr	r3, [pc, #168]	; (998 <_i2c_m_sync_init_impl+0xc4>)
     8f0:	189b      	adds	r3, r3, r2
     8f2:	699a      	ldr	r2, [r3, #24]
     8f4:	231c      	movs	r3, #28
     8f6:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     8f8:	69e3      	ldr	r3, [r4, #28]
     8fa:	079b      	lsls	r3, r3, #30
     8fc:	d1fc      	bne.n	8f8 <_i2c_m_sync_init_impl+0x24>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     8fe:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     900:	079b      	lsls	r3, r3, #30
     902:	d509      	bpl.n	918 <_i2c_m_sync_init_impl+0x44>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     904:	6823      	ldr	r3, [r4, #0]
     906:	2102      	movs	r1, #2
     908:	438b      	bics	r3, r1
     90a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     90c:	69e3      	ldr	r3, [r4, #28]
     90e:	079b      	lsls	r3, r3, #30
     910:	d1fc      	bne.n	90c <_i2c_m_sync_init_impl+0x38>
     912:	69e3      	ldr	r3, [r4, #28]
     914:	079b      	lsls	r3, r3, #30
     916:	d4fc      	bmi.n	912 <_i2c_m_sync_init_impl+0x3e>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     918:	2301      	movs	r3, #1
     91a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     91c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     91e:	69e3      	ldr	r3, [r4, #28]
     920:	079b      	lsls	r3, r3, #30
     922:	d1fc      	bne.n	91e <_i2c_m_sync_init_impl+0x4a>
     924:	69e3      	ldr	r3, [r4, #28]
     926:	07db      	lsls	r3, r3, #31
     928:	d4fc      	bmi.n	924 <_i2c_m_sync_init_impl+0x50>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     92a:	0043      	lsls	r3, r0, #1
     92c:	181b      	adds	r3, r3, r0
     92e:	00da      	lsls	r2, r3, #3
     930:	4b19      	ldr	r3, [pc, #100]	; (998 <_i2c_m_sync_init_impl+0xc4>)
     932:	189b      	adds	r3, r3, r2
     934:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     936:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     938:	69e3      	ldr	r3, [r4, #28]
     93a:	079b      	lsls	r3, r3, #30
     93c:	d1fc      	bne.n	938 <_i2c_m_sync_init_impl+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     93e:	0043      	lsls	r3, r0, #1
     940:	181b      	adds	r3, r3, r0
     942:	00da      	lsls	r2, r3, #3
     944:	4b14      	ldr	r3, [pc, #80]	; (998 <_i2c_m_sync_init_impl+0xc4>)
     946:	189b      	adds	r3, r3, r2
     948:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     94a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     94c:	69e3      	ldr	r3, [r4, #28]
     94e:	075b      	lsls	r3, r3, #29
     950:	d4fc      	bmi.n	94c <_i2c_m_sync_init_impl+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     952:	0042      	lsls	r2, r0, #1
     954:	1812      	adds	r2, r2, r0
     956:	00d1      	lsls	r1, r2, #3
     958:	4b0f      	ldr	r3, [pc, #60]	; (998 <_i2c_m_sync_init_impl+0xc4>)
     95a:	185b      	adds	r3, r3, r1
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     95c:	6a1a      	ldr	r2, [r3, #32]
     95e:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     960:	7eda      	ldrb	r2, [r3, #27]
     962:	2303      	movs	r3, #3
     964:	401a      	ands	r2, r3
     966:	81aa      	strh	r2, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     968:	3b02      	subs	r3, #2
     96a:	4293      	cmp	r3, r2
     96c:	419b      	sbcs	r3, r3
     96e:	425b      	negs	r3, r3
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     970:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     972:	490a      	ldr	r1, [pc, #40]	; (99c <_i2c_m_sync_init_impl+0xc8>)
     974:	400a      	ands	r2, r1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     976:	039b      	lsls	r3, r3, #14
     978:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     97a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     97c:	69e3      	ldr	r3, [r4, #28]
     97e:	075b      	lsls	r3, r3, #29
     980:	d4fc      	bmi.n	97c <_i2c_m_sync_init_impl+0xa8>

	service->trise = _i2cms[i].trise;
     982:	0043      	lsls	r3, r0, #1
     984:	1818      	adds	r0, r3, r0
     986:	00c2      	lsls	r2, r0, #3
     988:	4b03      	ldr	r3, [pc, #12]	; (998 <_i2c_m_sync_init_impl+0xc4>)
     98a:	189b      	adds	r3, r3, r2
     98c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     98e:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     990:	2000      	movs	r0, #0
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	0000088d 	.word	0x0000088d
     998:	00003250 	.word	0x00003250
     99c:	ffffbfff 	.word	0xffffbfff

000009a0 <_sercom_i2c_sync_send_address>:
{
     9a0:	b570      	push	{r4, r5, r6, lr}
     9a2:	0005      	movs	r5, r0
	void *             hw    = i2c_dev->hw;
     9a4:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     9a6:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     9a8:	0edb      	lsrs	r3, r3, #27
     9aa:	2601      	movs	r6, #1
     9ac:	401e      	ands	r6, r3
	ASSERT(i2c_dev);
     9ae:	1e43      	subs	r3, r0, #1
     9b0:	4198      	sbcs	r0, r3
     9b2:	b2c0      	uxtb	r0, r0
     9b4:	4a8e      	ldr	r2, [pc, #568]	; (bf0 <_sercom_i2c_sync_send_address+0x250>)
     9b6:	498f      	ldr	r1, [pc, #572]	; (bf4 <_sercom_i2c_sync_send_address+0x254>)
     9b8:	4b8f      	ldr	r3, [pc, #572]	; (bf8 <_sercom_i2c_sync_send_address+0x258>)
     9ba:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     9bc:	686b      	ldr	r3, [r5, #4]
     9be:	2b01      	cmp	r3, #1
     9c0:	d04d      	beq.n	a5e <_sercom_i2c_sync_send_address+0xbe>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9c2:	6863      	ldr	r3, [r4, #4]
     9c4:	4a8d      	ldr	r2, [pc, #564]	; (bfc <_sercom_i2c_sync_send_address+0x25c>)
     9c6:	4013      	ands	r3, r2
     9c8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9ca:	69e3      	ldr	r3, [r4, #28]
     9cc:	075b      	lsls	r3, r3, #29
     9ce:	d4fc      	bmi.n	9ca <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
     9d0:	882b      	ldrh	r3, [r5, #0]
     9d2:	055a      	lsls	r2, r3, #21
     9d4:	d54e      	bpl.n	a74 <_sercom_i2c_sync_send_address+0xd4>
		if (msg->flags & I2C_M_RD) {
     9d6:	886a      	ldrh	r2, [r5, #2]
     9d8:	07d2      	lsls	r2, r2, #31
     9da:	d504      	bpl.n	9e6 <_sercom_i2c_sync_send_address+0x46>
			msg->flags |= I2C_M_TEN;
     9dc:	886a      	ldrh	r2, [r5, #2]
     9de:	2180      	movs	r1, #128	; 0x80
     9e0:	00c9      	lsls	r1, r1, #3
     9e2:	430a      	orrs	r2, r1
     9e4:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     9e6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     9e8:	4a85      	ldr	r2, [pc, #532]	; (c00 <_sercom_i2c_sync_send_address+0x260>)
     9ea:	401a      	ands	r2, r3
     9ec:	69e3      	ldr	r3, [r4, #28]
     9ee:	075b      	lsls	r3, r3, #29
     9f0:	d4fc      	bmi.n	9ec <_sercom_i2c_sync_send_address+0x4c>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
     9f4:	2180      	movs	r1, #128	; 0x80
     9f6:	01c9      	lsls	r1, r1, #7
     9f8:	400b      	ands	r3, r1
     9fa:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     9fc:	2280      	movs	r2, #128	; 0x80
     9fe:	0212      	lsls	r2, r2, #8
     a00:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     a02:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a04:	69e3      	ldr	r3, [r4, #28]
     a06:	075b      	lsls	r3, r3, #29
     a08:	d4fc      	bmi.n	a04 <_sercom_i2c_sync_send_address+0x64>
	void *   hw      = i2c_dev->hw;
     a0a:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     a0c:	4a7d      	ldr	r2, [pc, #500]	; (c04 <_sercom_i2c_sync_send_address+0x264>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     a0e:	7e33      	ldrb	r3, [r6, #24]
     a10:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     a12:	0018      	movs	r0, r3
		if (timeout-- == 0) {
     a14:	1e51      	subs	r1, r2, #1
     a16:	2a00      	cmp	r2, #0
     a18:	d002      	beq.n	a20 <_sercom_i2c_sync_send_address+0x80>
     a1a:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     a1c:	079b      	lsls	r3, r3, #30
     a1e:	d0f6      	beq.n	a0e <_sercom_i2c_sync_send_address+0x6e>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     a20:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     a22:	0edb      	lsrs	r3, r3, #27
     a24:	2201      	movs	r2, #1
     a26:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a28:	69e3      	ldr	r3, [r4, #28]
     a2a:	075b      	lsls	r3, r3, #29
     a2c:	d4fc      	bmi.n	a28 <_sercom_i2c_sync_send_address+0x88>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     a2e:	8b63      	ldrh	r3, [r4, #26]
     a30:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     a32:	07c1      	lsls	r1, r0, #31
     a34:	d400      	bmi.n	a38 <_sercom_i2c_sync_send_address+0x98>
     a36:	e08f      	b.n	b58 <_sercom_i2c_sync_send_address+0x1b8>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     a38:	079a      	lsls	r2, r3, #30
     a3a:	d52f      	bpl.n	a9c <_sercom_i2c_sync_send_address+0xfc>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     a3c:	2201      	movs	r2, #1
     a3e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     a40:	886a      	ldrh	r2, [r5, #2]
     a42:	2180      	movs	r1, #128	; 0x80
     a44:	0149      	lsls	r1, r1, #5
     a46:	430a      	orrs	r2, r1
     a48:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     a4a:	886a      	ldrh	r2, [r5, #2]
     a4c:	496e      	ldr	r1, [pc, #440]	; (c08 <_sercom_i2c_sync_send_address+0x268>)
     a4e:	400a      	ands	r2, r1
     a50:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     a52:	07db      	lsls	r3, r3, #31
     a54:	d400      	bmi.n	a58 <_sercom_i2c_sync_send_address+0xb8>
     a56:	e0c6      	b.n	be6 <_sercom_i2c_sync_send_address+0x246>
				return I2C_ERR_BUS;
     a58:	2005      	movs	r0, #5
     a5a:	4240      	negs	r0, r0
     a5c:	e0a2      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
	if (msg->len == 1 && sclsm) {
     a5e:	2e00      	cmp	r6, #0
     a60:	d0af      	beq.n	9c2 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a62:	6862      	ldr	r2, [r4, #4]
     a64:	2380      	movs	r3, #128	; 0x80
     a66:	02db      	lsls	r3, r3, #11
     a68:	4313      	orrs	r3, r2
     a6a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a6c:	69e3      	ldr	r3, [r4, #28]
     a6e:	075b      	lsls	r3, r3, #29
     a70:	d4fc      	bmi.n	a6c <_sercom_i2c_sync_send_address+0xcc>
     a72:	e7ad      	b.n	9d0 <_sercom_i2c_sync_send_address+0x30>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     a74:	005b      	lsls	r3, r3, #1
     a76:	22ff      	movs	r2, #255	; 0xff
     a78:	4013      	ands	r3, r2
     a7a:	886a      	ldrh	r2, [r5, #2]
     a7c:	2101      	movs	r1, #1
     a7e:	400a      	ands	r2, r1
     a80:	431a      	orrs	r2, r3
     a82:	69e3      	ldr	r3, [r4, #28]
     a84:	075b      	lsls	r3, r3, #29
     a86:	d4fc      	bmi.n	a82 <_sercom_i2c_sync_send_address+0xe2>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     a8a:	2180      	movs	r1, #128	; 0x80
     a8c:	01c9      	lsls	r1, r1, #7
     a8e:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
     a90:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     a92:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a94:	69e3      	ldr	r3, [r4, #28]
     a96:	075b      	lsls	r3, r3, #29
     a98:	d4fc      	bmi.n	a94 <_sercom_i2c_sync_send_address+0xf4>
     a9a:	e7b6      	b.n	a0a <_sercom_i2c_sync_send_address+0x6a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     a9c:	075b      	lsls	r3, r3, #29
     a9e:	d41b      	bmi.n	ad8 <_sercom_i2c_sync_send_address+0x138>
			if (msg->flags & I2C_M_TEN) {
     aa0:	886b      	ldrh	r3, [r5, #2]
     aa2:	055b      	lsls	r3, r3, #21
     aa4:	d534      	bpl.n	b10 <_sercom_i2c_sync_send_address+0x170>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     aa6:	882a      	ldrh	r2, [r5, #0]
     aa8:	1212      	asrs	r2, r2, #8
     aaa:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     aac:	2306      	movs	r3, #6
     aae:	401a      	ands	r2, r3
     ab0:	69e3      	ldr	r3, [r4, #28]
     ab2:	075b      	lsls	r3, r3, #29
     ab4:	d4fc      	bmi.n	ab0 <_sercom_i2c_sync_send_address+0x110>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ab8:	2180      	movs	r1, #128	; 0x80
     aba:	01c9      	lsls	r1, r1, #7
     abc:	400b      	ands	r3, r1
     abe:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     ac0:	22f1      	movs	r2, #241	; 0xf1
     ac2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     ac4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ac6:	69e3      	ldr	r3, [r4, #28]
     ac8:	075b      	lsls	r3, r3, #29
     aca:	d4fc      	bmi.n	ac6 <_sercom_i2c_sync_send_address+0x126>
				msg->flags &= ~I2C_M_TEN;
     acc:	886b      	ldrh	r3, [r5, #2]
     ace:	4a4f      	ldr	r2, [pc, #316]	; (c0c <_sercom_i2c_sync_send_address+0x26c>)
     ad0:	4013      	ands	r3, r2
     ad2:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     ad4:	2000      	movs	r0, #0
     ad6:	e065      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
				if (msg->len > 0) {
     ad8:	686b      	ldr	r3, [r5, #4]
     ada:	2b00      	cmp	r3, #0
     adc:	dd04      	ble.n	ae8 <_sercom_i2c_sync_send_address+0x148>
					msg->flags |= I2C_M_FAIL;
     ade:	886b      	ldrh	r3, [r5, #2]
     ae0:	2280      	movs	r2, #128	; 0x80
     ae2:	0152      	lsls	r2, r2, #5
     ae4:	4313      	orrs	r3, r2
     ae6:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     ae8:	886b      	ldrh	r3, [r5, #2]
     aea:	b21b      	sxth	r3, r3
     aec:	2b00      	cmp	r3, #0
     aee:	db06      	blt.n	afe <_sercom_i2c_sync_send_address+0x15e>
				msg->flags &= ~I2C_M_BUSY;
     af0:	886b      	ldrh	r3, [r5, #2]
     af2:	4a45      	ldr	r2, [pc, #276]	; (c08 <_sercom_i2c_sync_send_address+0x268>)
     af4:	4013      	ands	r3, r2
     af6:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     af8:	2002      	movs	r0, #2
     afa:	4240      	negs	r0, r0
     afc:	e052      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     afe:	6862      	ldr	r2, [r4, #4]
     b00:	23c0      	movs	r3, #192	; 0xc0
     b02:	029b      	lsls	r3, r3, #10
     b04:	4313      	orrs	r3, r2
     b06:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b08:	69e3      	ldr	r3, [r4, #28]
     b0a:	075b      	lsls	r3, r3, #29
     b0c:	d4fc      	bmi.n	b08 <_sercom_i2c_sync_send_address+0x168>
     b0e:	e7ef      	b.n	af0 <_sercom_i2c_sync_send_address+0x150>
			if (msg->len == 0) {
     b10:	6868      	ldr	r0, [r5, #4]
     b12:	2800      	cmp	r0, #0
     b14:	d111      	bne.n	b3a <_sercom_i2c_sync_send_address+0x19a>
				if (msg->flags & I2C_M_STOP) {
     b16:	886b      	ldrh	r3, [r5, #2]
     b18:	b21b      	sxth	r3, r3
     b1a:	2b00      	cmp	r3, #0
     b1c:	db04      	blt.n	b28 <_sercom_i2c_sync_send_address+0x188>
				msg->flags &= ~I2C_M_BUSY;
     b1e:	886b      	ldrh	r3, [r5, #2]
     b20:	4a39      	ldr	r2, [pc, #228]	; (c08 <_sercom_i2c_sync_send_address+0x268>)
     b22:	4013      	ands	r3, r2
     b24:	806b      	strh	r3, [r5, #2]
     b26:	e03d      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     b28:	6862      	ldr	r2, [r4, #4]
     b2a:	23c0      	movs	r3, #192	; 0xc0
     b2c:	029b      	lsls	r3, r3, #10
     b2e:	4313      	orrs	r3, r2
     b30:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b32:	69e3      	ldr	r3, [r4, #28]
     b34:	075b      	lsls	r3, r3, #29
     b36:	d4fc      	bmi.n	b32 <_sercom_i2c_sync_send_address+0x192>
     b38:	e7f1      	b.n	b1e <_sercom_i2c_sync_send_address+0x17e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     b3a:	68ab      	ldr	r3, [r5, #8]
     b3c:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     b3e:	2328      	movs	r3, #40	; 0x28
     b40:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b42:	69e3      	ldr	r3, [r4, #28]
     b44:	075b      	lsls	r3, r3, #29
     b46:	d4fc      	bmi.n	b42 <_sercom_i2c_sync_send_address+0x1a2>
				msg->buffer++;
     b48:	68ab      	ldr	r3, [r5, #8]
     b4a:	3301      	adds	r3, #1
     b4c:	60ab      	str	r3, [r5, #8]
				msg->len--;
     b4e:	686b      	ldr	r3, [r5, #4]
     b50:	3b01      	subs	r3, #1
     b52:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     b54:	2000      	movs	r0, #0
     b56:	e025      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
	} else if (flags & SB_FLAG) {
     b58:	0781      	lsls	r1, r0, #30
     b5a:	d547      	bpl.n	bec <_sercom_i2c_sync_send_address+0x24c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     b5c:	6869      	ldr	r1, [r5, #4]
     b5e:	2900      	cmp	r1, #0
     b60:	d03c      	beq.n	bdc <_sercom_i2c_sync_send_address+0x23c>
     b62:	075b      	lsls	r3, r3, #29
     b64:	d43a      	bmi.n	bdc <_sercom_i2c_sync_send_address+0x23c>
			msg->len--;
     b66:	3901      	subs	r1, #1
     b68:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     b6a:	2900      	cmp	r1, #0
     b6c:	d101      	bne.n	b72 <_sercom_i2c_sync_send_address+0x1d2>
     b6e:	2a00      	cmp	r2, #0
     b70:	d01b      	beq.n	baa <_sercom_i2c_sync_send_address+0x20a>
     b72:	2901      	cmp	r1, #1
     b74:	d017      	beq.n	ba6 <_sercom_i2c_sync_send_address+0x206>
			if (msg->len == 0) {
     b76:	686b      	ldr	r3, [r5, #4]
     b78:	2b00      	cmp	r3, #0
     b7a:	d107      	bne.n	b8c <_sercom_i2c_sync_send_address+0x1ec>
				if (msg->flags & I2C_M_STOP) {
     b7c:	886b      	ldrh	r3, [r5, #2]
     b7e:	b21b      	sxth	r3, r3
     b80:	2b00      	cmp	r3, #0
     b82:	db1b      	blt.n	bbc <_sercom_i2c_sync_send_address+0x21c>
				msg->flags &= ~I2C_M_BUSY;
     b84:	886b      	ldrh	r3, [r5, #2]
     b86:	4a20      	ldr	r2, [pc, #128]	; (c08 <_sercom_i2c_sync_send_address+0x268>)
     b88:	4013      	ands	r3, r2
     b8a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     b8c:	68aa      	ldr	r2, [r5, #8]
     b8e:	1c53      	adds	r3, r2, #1
     b90:	60ab      	str	r3, [r5, #8]
     b92:	69e3      	ldr	r3, [r4, #28]
     b94:	075b      	lsls	r3, r3, #29
     b96:	d4fc      	bmi.n	b92 <_sercom_i2c_sync_send_address+0x1f2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     b98:	2328      	movs	r3, #40	; 0x28
     b9a:	5ce3      	ldrb	r3, [r4, r3]
     b9c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b9e:	2302      	movs	r3, #2
     ba0:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     ba2:	2000      	movs	r0, #0
}
     ba4:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     ba6:	2a00      	cmp	r2, #0
     ba8:	d0e5      	beq.n	b76 <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     baa:	6862      	ldr	r2, [r4, #4]
     bac:	2380      	movs	r3, #128	; 0x80
     bae:	02db      	lsls	r3, r3, #11
     bb0:	4313      	orrs	r3, r2
     bb2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bb4:	69e3      	ldr	r3, [r4, #28]
     bb6:	075b      	lsls	r3, r3, #29
     bb8:	d4fc      	bmi.n	bb4 <_sercom_i2c_sync_send_address+0x214>
     bba:	e7dc      	b.n	b76 <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     bbc:	6863      	ldr	r3, [r4, #4]
     bbe:	4a12      	ldr	r2, [pc, #72]	; (c08 <_sercom_i2c_sync_send_address+0x268>)
     bc0:	4013      	ands	r3, r2
     bc2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bc4:	69e3      	ldr	r3, [r4, #28]
     bc6:	075b      	lsls	r3, r3, #29
     bc8:	d4fc      	bmi.n	bc4 <_sercom_i2c_sync_send_address+0x224>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     bca:	6862      	ldr	r2, [r4, #4]
     bcc:	23c0      	movs	r3, #192	; 0xc0
     bce:	029b      	lsls	r3, r3, #10
     bd0:	4313      	orrs	r3, r2
     bd2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bd4:	69e3      	ldr	r3, [r4, #28]
     bd6:	075b      	lsls	r3, r3, #29
     bd8:	d4fc      	bmi.n	bd4 <_sercom_i2c_sync_send_address+0x234>
     bda:	e7d3      	b.n	b84 <_sercom_i2c_sync_send_address+0x1e4>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     bdc:	2302      	movs	r3, #2
     bde:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     be0:	2002      	movs	r0, #2
     be2:	4240      	negs	r0, r0
     be4:	e7de      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
			return I2C_ERR_BAD_ADDRESS;
     be6:	2004      	movs	r0, #4
     be8:	4240      	negs	r0, r0
     bea:	e7db      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
	return I2C_OK;
     bec:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
     bee:	e7d9      	b.n	ba4 <_sercom_i2c_sync_send_address+0x204>
     bf0:	00000594 	.word	0x00000594
     bf4:	000032a0 	.word	0x000032a0
     bf8:	00000679 	.word	0x00000679
     bfc:	fffbffff 	.word	0xfffbffff
     c00:	000007fe 	.word	0x000007fe
     c04:	0000ffff 	.word	0x0000ffff
     c08:	fffffeff 	.word	0xfffffeff
     c0c:	fffffbff 	.word	0xfffffbff

00000c10 <_usart_sync_init>:
{
     c10:	b570      	push	{r4, r5, r6, lr}
     c12:	0005      	movs	r5, r0
     c14:	000c      	movs	r4, r1
	ASSERT(device);
     c16:	1e43      	subs	r3, r0, #1
     c18:	4198      	sbcs	r0, r3
     c1a:	b2c0      	uxtb	r0, r0
     c1c:	22b4      	movs	r2, #180	; 0xb4
     c1e:	4904      	ldr	r1, [pc, #16]	; (c30 <_usart_sync_init+0x20>)
     c20:	4b04      	ldr	r3, [pc, #16]	; (c34 <_usart_sync_init+0x24>)
     c22:	4798      	blx	r3
	device->hw = hw;
     c24:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     c26:	0020      	movs	r0, r4
     c28:	4b03      	ldr	r3, [pc, #12]	; (c38 <_usart_sync_init+0x28>)
     c2a:	4798      	blx	r3
}
     c2c:	bd70      	pop	{r4, r5, r6, pc}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	000032a0 	.word	0x000032a0
     c34:	00000679 	.word	0x00000679
     c38:	0000079d 	.word	0x0000079d

00000c3c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     c3c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c3e:	6813      	ldr	r3, [r2, #0]
     c40:	2102      	movs	r1, #2
     c42:	430b      	orrs	r3, r1
     c44:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c46:	69d3      	ldr	r3, [r2, #28]
     c48:	079b      	lsls	r3, r3, #30
     c4a:	d1fc      	bne.n	c46 <_usart_sync_enable+0xa>
}
     c4c:	4770      	bx	lr

00000c4e <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     c4e:	6803      	ldr	r3, [r0, #0]
     c50:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     c52:	8519      	strh	r1, [r3, #40]	; 0x28
}
     c54:	4770      	bx	lr

00000c56 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     c56:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     c58:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     c5a:	b2c0      	uxtb	r0, r0
}
     c5c:	4770      	bx	lr

00000c5e <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     c5e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c60:	7e18      	ldrb	r0, [r3, #24]
     c62:	2301      	movs	r3, #1
     c64:	4018      	ands	r0, r3
}
     c66:	4770      	bx	lr

00000c68 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     c68:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     c6a:	7e1b      	ldrb	r3, [r3, #24]
     c6c:	085b      	lsrs	r3, r3, #1
     c6e:	2001      	movs	r0, #1
     c70:	4018      	ands	r0, r3
}
     c72:	4770      	bx	lr

00000c74 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     c74:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     c76:	7e1b      	ldrb	r3, [r3, #24]
     c78:	089b      	lsrs	r3, r3, #2
     c7a:	2001      	movs	r0, #1
     c7c:	4018      	ands	r0, r3
}
     c7e:	4770      	bx	lr

00000c80 <_i2c_m_sync_init>:
{
     c80:	b570      	push	{r4, r5, r6, lr}
     c82:	0004      	movs	r4, r0
     c84:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     c86:	1e43      	subs	r3, r0, #1
     c88:	4198      	sbcs	r0, r3
     c8a:	b2c0      	uxtb	r0, r0
     c8c:	4a04      	ldr	r2, [pc, #16]	; (ca0 <_i2c_m_sync_init+0x20>)
     c8e:	4905      	ldr	r1, [pc, #20]	; (ca4 <_i2c_m_sync_init+0x24>)
     c90:	4b05      	ldr	r3, [pc, #20]	; (ca8 <_i2c_m_sync_init+0x28>)
     c92:	4798      	blx	r3
	i2c_dev->hw = hw;
     c94:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     c96:	0029      	movs	r1, r5
     c98:	0020      	movs	r0, r4
     c9a:	4b04      	ldr	r3, [pc, #16]	; (cac <_i2c_m_sync_init+0x2c>)
     c9c:	4798      	blx	r3
}
     c9e:	bd70      	pop	{r4, r5, r6, pc}
     ca0:	00000507 	.word	0x00000507
     ca4:	000032a0 	.word	0x000032a0
     ca8:	00000679 	.word	0x00000679
     cac:	000008d5 	.word	0x000008d5

00000cb0 <_i2c_m_sync_enable>:
{
     cb0:	b570      	push	{r4, r5, r6, lr}
     cb2:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     cb4:	4d19      	ldr	r5, [pc, #100]	; (d1c <_i2c_m_sync_enable+0x6c>)
     cb6:	1e43      	subs	r3, r0, #1
     cb8:	4198      	sbcs	r0, r3
     cba:	b2c0      	uxtb	r0, r0
     cbc:	4a18      	ldr	r2, [pc, #96]	; (d20 <_i2c_m_sync_enable+0x70>)
     cbe:	0029      	movs	r1, r5
     cc0:	4e18      	ldr	r6, [pc, #96]	; (d24 <_i2c_m_sync_enable+0x74>)
     cc2:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
     cc4:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     cc6:	0020      	movs	r0, r4
     cc8:	1e43      	subs	r3, r0, #1
     cca:	4198      	sbcs	r0, r3
     ccc:	b2c0      	uxtb	r0, r0
     cce:	4a16      	ldr	r2, [pc, #88]	; (d28 <_i2c_m_sync_enable+0x78>)
     cd0:	0029      	movs	r1, r5
     cd2:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     cd4:	6823      	ldr	r3, [r4, #0]
     cd6:	2202      	movs	r2, #2
     cd8:	4313      	orrs	r3, r2
     cda:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cdc:	69e3      	ldr	r3, [r4, #28]
     cde:	079b      	lsls	r3, r3, #30
     ce0:	d1fc      	bne.n	cdc <_i2c_m_sync_enable+0x2c>
     ce2:	2004      	movs	r0, #4
     ce4:	4911      	ldr	r1, [pc, #68]	; (d2c <_i2c_m_sync_enable+0x7c>)
     ce6:	69e3      	ldr	r3, [r4, #28]
     ce8:	075b      	lsls	r3, r3, #29
     cea:	d4fc      	bmi.n	ce6 <_i2c_m_sync_enable+0x36>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     cec:	8b62      	ldrh	r2, [r4, #26]
     cee:	0912      	lsrs	r2, r2, #4
     cf0:	2303      	movs	r3, #3
     cf2:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     cf4:	2b01      	cmp	r3, #1
     cf6:	d00b      	beq.n	d10 <_i2c_m_sync_enable+0x60>
		timeout--;
     cf8:	3901      	subs	r1, #1
		if (timeout <= 0) {
     cfa:	2900      	cmp	r1, #0
     cfc:	dcf3      	bgt.n	ce6 <_i2c_m_sync_enable+0x36>
			if (--timeout_attempt)
     cfe:	3801      	subs	r0, #1
     d00:	2800      	cmp	r0, #0
     d02:	d007      	beq.n	d14 <_i2c_m_sync_enable+0x64>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     d04:	2310      	movs	r3, #16
     d06:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d08:	69e3      	ldr	r3, [r4, #28]
     d0a:	075b      	lsls	r3, r3, #29
     d0c:	d4fc      	bmi.n	d08 <_i2c_m_sync_enable+0x58>
     d0e:	e7e9      	b.n	ce4 <_i2c_m_sync_enable+0x34>
	return ERR_NONE;
     d10:	2000      	movs	r0, #0
}
     d12:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     d14:	2006      	movs	r0, #6
     d16:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
     d18:	e7fb      	b.n	d12 <_i2c_m_sync_enable+0x62>
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	000032a0 	.word	0x000032a0
     d20:	00000524 	.word	0x00000524
     d24:	00000679 	.word	0x00000679
     d28:	000005f4 	.word	0x000005f4
     d2c:	0000ffff 	.word	0x0000ffff

00000d30 <_i2c_m_sync_transfer>:
{
     d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d32:	0005      	movs	r5, r0
     d34:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
     d36:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     d38:	1e43      	subs	r3, r0, #1
     d3a:	4198      	sbcs	r0, r3
     d3c:	b2c0      	uxtb	r0, r0
     d3e:	4a93      	ldr	r2, [pc, #588]	; (f8c <_i2c_m_sync_transfer+0x25c>)
     d40:	4993      	ldr	r1, [pc, #588]	; (f90 <_i2c_m_sync_transfer+0x260>)
     d42:	4f94      	ldr	r7, [pc, #592]	; (f94 <_i2c_m_sync_transfer+0x264>)
     d44:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
     d46:	6928      	ldr	r0, [r5, #16]
     d48:	1e43      	subs	r3, r0, #1
     d4a:	4198      	sbcs	r0, r3
     d4c:	b2c0      	uxtb	r0, r0
     d4e:	22b8      	movs	r2, #184	; 0xb8
     d50:	00d2      	lsls	r2, r2, #3
     d52:	498f      	ldr	r1, [pc, #572]	; (f90 <_i2c_m_sync_transfer+0x260>)
     d54:	47b8      	blx	r7
	ASSERT(msg);
     d56:	0030      	movs	r0, r6
     d58:	1e43      	subs	r3, r0, #1
     d5a:	4198      	sbcs	r0, r3
     d5c:	b2c0      	uxtb	r0, r0
     d5e:	4a8e      	ldr	r2, [pc, #568]	; (f98 <_i2c_m_sync_transfer+0x268>)
     d60:	498b      	ldr	r1, [pc, #556]	; (f90 <_i2c_m_sync_transfer+0x260>)
     d62:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     d64:	886b      	ldrh	r3, [r5, #2]
     d66:	05db      	lsls	r3, r3, #23
     d68:	d500      	bpl.n	d6c <_i2c_m_sync_transfer+0x3c>
     d6a:	e10b      	b.n	f84 <_i2c_m_sync_transfer+0x254>
	msg->flags |= I2C_M_BUSY;
     d6c:	8872      	ldrh	r2, [r6, #2]
     d6e:	2380      	movs	r3, #128	; 0x80
     d70:	005b      	lsls	r3, r3, #1
     d72:	469c      	mov	ip, r3
     d74:	431a      	orrs	r2, r3
     d76:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
     d78:	002a      	movs	r2, r5
     d7a:	0031      	movs	r1, r6
     d7c:	c989      	ldmia	r1!, {r0, r3, r7}
     d7e:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     d80:	6862      	ldr	r2, [r4, #4]
     d82:	4663      	mov	r3, ip
     d84:	4313      	orrs	r3, r2
     d86:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d88:	69e3      	ldr	r3, [r4, #28]
     d8a:	075b      	lsls	r3, r3, #29
     d8c:	d4fc      	bmi.n	d88 <_i2c_m_sync_transfer+0x58>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
     d8e:	0028      	movs	r0, r5
     d90:	4b82      	ldr	r3, [pc, #520]	; (f9c <_i2c_m_sync_transfer+0x26c>)
     d92:	4798      	blx	r3
	if (ret) {
     d94:	2800      	cmp	r0, #0
     d96:	d100      	bne.n	d9a <_i2c_m_sync_transfer+0x6a>
     d98:	e09d      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     d9a:	886b      	ldrh	r3, [r5, #2]
     d9c:	4a80      	ldr	r2, [pc, #512]	; (fa0 <_i2c_m_sync_transfer+0x270>)
     d9e:	4013      	ands	r3, r2
     da0:	806b      	strh	r3, [r5, #2]
}
     da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
     da4:	2005      	movs	r0, #5
     da6:	4240      	negs	r0, r0
     da8:	e0a6      	b.n	ef8 <_i2c_m_sync_transfer+0x1c8>
			if (msg->flags & I2C_M_STOP) {
     daa:	8873      	ldrh	r3, [r6, #2]
     dac:	b21b      	sxth	r3, r3
     dae:	2b00      	cmp	r3, #0
     db0:	db04      	blt.n	dbc <_i2c_m_sync_transfer+0x8c>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     db2:	886b      	ldrh	r3, [r5, #2]
     db4:	4a7a      	ldr	r2, [pc, #488]	; (fa0 <_i2c_m_sync_transfer+0x270>)
     db6:	4013      	ands	r3, r2
     db8:	806b      	strh	r3, [r5, #2]
			return ret;
     dba:	e7f2      	b.n	da2 <_i2c_m_sync_transfer+0x72>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     dbc:	6862      	ldr	r2, [r4, #4]
     dbe:	23c0      	movs	r3, #192	; 0xc0
     dc0:	029b      	lsls	r3, r3, #10
     dc2:	4313      	orrs	r3, r2
     dc4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dc6:	69e3      	ldr	r3, [r4, #28]
     dc8:	075b      	lsls	r3, r3, #29
     dca:	d4fc      	bmi.n	dc6 <_i2c_m_sync_transfer+0x96>
     dcc:	e7f1      	b.n	db2 <_i2c_m_sync_transfer+0x82>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     dce:	0753      	lsls	r3, r2, #29
     dd0:	d41b      	bmi.n	e0a <_i2c_m_sync_transfer+0xda>
			if (msg->flags & I2C_M_TEN) {
     dd2:	886b      	ldrh	r3, [r5, #2]
     dd4:	055b      	lsls	r3, r3, #21
     dd6:	d534      	bpl.n	e42 <_i2c_m_sync_transfer+0x112>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     dd8:	882a      	ldrh	r2, [r5, #0]
     dda:	1212      	asrs	r2, r2, #8
     ddc:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     dde:	2306      	movs	r3, #6
     de0:	401a      	ands	r2, r3
     de2:	69e3      	ldr	r3, [r4, #28]
     de4:	075b      	lsls	r3, r3, #29
     de6:	d4fc      	bmi.n	de2 <_i2c_m_sync_transfer+0xb2>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     dea:	2180      	movs	r1, #128	; 0x80
     dec:	01c9      	lsls	r1, r1, #7
     dee:	400b      	ands	r3, r1
     df0:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     df2:	22f1      	movs	r2, #241	; 0xf1
     df4:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     df6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     df8:	69e3      	ldr	r3, [r4, #28]
     dfa:	075b      	lsls	r3, r3, #29
     dfc:	d4fc      	bmi.n	df8 <_i2c_m_sync_transfer+0xc8>
				msg->flags &= ~I2C_M_TEN;
     dfe:	886b      	ldrh	r3, [r5, #2]
     e00:	4a68      	ldr	r2, [pc, #416]	; (fa4 <_i2c_m_sync_transfer+0x274>)
     e02:	4013      	ands	r3, r2
     e04:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     e06:	2000      	movs	r0, #0
     e08:	e065      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
				if (msg->len > 0) {
     e0a:	686b      	ldr	r3, [r5, #4]
     e0c:	2b00      	cmp	r3, #0
     e0e:	dd04      	ble.n	e1a <_i2c_m_sync_transfer+0xea>
					msg->flags |= I2C_M_FAIL;
     e10:	886b      	ldrh	r3, [r5, #2]
     e12:	2280      	movs	r2, #128	; 0x80
     e14:	0152      	lsls	r2, r2, #5
     e16:	4313      	orrs	r3, r2
     e18:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     e1a:	886b      	ldrh	r3, [r5, #2]
     e1c:	b21b      	sxth	r3, r3
     e1e:	2b00      	cmp	r3, #0
     e20:	db06      	blt.n	e30 <_i2c_m_sync_transfer+0x100>
				msg->flags &= ~I2C_M_BUSY;
     e22:	886b      	ldrh	r3, [r5, #2]
     e24:	4a5e      	ldr	r2, [pc, #376]	; (fa0 <_i2c_m_sync_transfer+0x270>)
     e26:	4013      	ands	r3, r2
     e28:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     e2a:	2002      	movs	r0, #2
     e2c:	4240      	negs	r0, r0
     e2e:	e052      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e30:	6862      	ldr	r2, [r4, #4]
     e32:	23c0      	movs	r3, #192	; 0xc0
     e34:	029b      	lsls	r3, r3, #10
     e36:	4313      	orrs	r3, r2
     e38:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e3a:	69e3      	ldr	r3, [r4, #28]
     e3c:	075b      	lsls	r3, r3, #29
     e3e:	d4fc      	bmi.n	e3a <_i2c_m_sync_transfer+0x10a>
     e40:	e7ef      	b.n	e22 <_i2c_m_sync_transfer+0xf2>
			if (msg->len == 0) {
     e42:	6868      	ldr	r0, [r5, #4]
     e44:	2800      	cmp	r0, #0
     e46:	d111      	bne.n	e6c <_i2c_m_sync_transfer+0x13c>
				if (msg->flags & I2C_M_STOP) {
     e48:	886b      	ldrh	r3, [r5, #2]
     e4a:	b21b      	sxth	r3, r3
     e4c:	2b00      	cmp	r3, #0
     e4e:	db04      	blt.n	e5a <_i2c_m_sync_transfer+0x12a>
				msg->flags &= ~I2C_M_BUSY;
     e50:	886b      	ldrh	r3, [r5, #2]
     e52:	4a53      	ldr	r2, [pc, #332]	; (fa0 <_i2c_m_sync_transfer+0x270>)
     e54:	4013      	ands	r3, r2
     e56:	806b      	strh	r3, [r5, #2]
     e58:	e03d      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e5a:	6862      	ldr	r2, [r4, #4]
     e5c:	23c0      	movs	r3, #192	; 0xc0
     e5e:	029b      	lsls	r3, r3, #10
     e60:	4313      	orrs	r3, r2
     e62:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e64:	69e3      	ldr	r3, [r4, #28]
     e66:	075b      	lsls	r3, r3, #29
     e68:	d4fc      	bmi.n	e64 <_i2c_m_sync_transfer+0x134>
     e6a:	e7f1      	b.n	e50 <_i2c_m_sync_transfer+0x120>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     e6c:	68ab      	ldr	r3, [r5, #8]
     e6e:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     e70:	2328      	movs	r3, #40	; 0x28
     e72:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e74:	69e3      	ldr	r3, [r4, #28]
     e76:	075b      	lsls	r3, r3, #29
     e78:	d4fc      	bmi.n	e74 <_i2c_m_sync_transfer+0x144>
				msg->buffer++;
     e7a:	68ab      	ldr	r3, [r5, #8]
     e7c:	3301      	adds	r3, #1
     e7e:	60ab      	str	r3, [r5, #8]
				msg->len--;
     e80:	686b      	ldr	r3, [r5, #4]
     e82:	3b01      	subs	r3, #1
     e84:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     e86:	2000      	movs	r0, #0
     e88:	e025      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
	} else if (flags & SB_FLAG) {
     e8a:	07bb      	lsls	r3, r7, #30
     e8c:	d578      	bpl.n	f80 <_i2c_m_sync_transfer+0x250>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     e8e:	686b      	ldr	r3, [r5, #4]
     e90:	2b00      	cmp	r3, #0
     e92:	d06d      	beq.n	f70 <_i2c_m_sync_transfer+0x240>
     e94:	0752      	lsls	r2, r2, #29
     e96:	d46b      	bmi.n	f70 <_i2c_m_sync_transfer+0x240>
			msg->len--;
     e98:	3b01      	subs	r3, #1
     e9a:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     e9c:	2b00      	cmp	r3, #0
     e9e:	d101      	bne.n	ea4 <_i2c_m_sync_transfer+0x174>
     ea0:	2900      	cmp	r1, #0
     ea2:	d04c      	beq.n	f3e <_i2c_m_sync_transfer+0x20e>
     ea4:	2b01      	cmp	r3, #1
     ea6:	d048      	beq.n	f3a <_i2c_m_sync_transfer+0x20a>
			if (msg->len == 0) {
     ea8:	686b      	ldr	r3, [r5, #4]
     eaa:	2b00      	cmp	r3, #0
     eac:	d107      	bne.n	ebe <_i2c_m_sync_transfer+0x18e>
				if (msg->flags & I2C_M_STOP) {
     eae:	886b      	ldrh	r3, [r5, #2]
     eb0:	b21b      	sxth	r3, r3
     eb2:	2b00      	cmp	r3, #0
     eb4:	db4c      	blt.n	f50 <_i2c_m_sync_transfer+0x220>
				msg->flags &= ~I2C_M_BUSY;
     eb6:	886b      	ldrh	r3, [r5, #2]
     eb8:	4a39      	ldr	r2, [pc, #228]	; (fa0 <_i2c_m_sync_transfer+0x270>)
     eba:	4013      	ands	r3, r2
     ebc:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     ebe:	68aa      	ldr	r2, [r5, #8]
     ec0:	1c53      	adds	r3, r2, #1
     ec2:	60ab      	str	r3, [r5, #8]
     ec4:	69e3      	ldr	r3, [r4, #28]
     ec6:	075b      	lsls	r3, r3, #29
     ec8:	d4fc      	bmi.n	ec4 <_i2c_m_sync_transfer+0x194>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     eca:	2328      	movs	r3, #40	; 0x28
     ecc:	5ce3      	ldrb	r3, [r4, r3]
     ece:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ed0:	2302      	movs	r3, #2
     ed2:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     ed4:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     ed6:	886b      	ldrh	r3, [r5, #2]
     ed8:	05db      	lsls	r3, r3, #23
     eda:	d400      	bmi.n	ede <_i2c_m_sync_transfer+0x1ae>
     edc:	e761      	b.n	da2 <_i2c_m_sync_transfer+0x72>
	void *   hw      = i2c_dev->hw;
     ede:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
     ee0:	4a31      	ldr	r2, [pc, #196]	; (fa8 <_i2c_m_sync_transfer+0x278>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     ee2:	7e03      	ldrb	r3, [r0, #24]
     ee4:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     ee6:	001f      	movs	r7, r3
		if (timeout-- == 0) {
     ee8:	1e51      	subs	r1, r2, #1
     eea:	2a00      	cmp	r2, #0
     eec:	d100      	bne.n	ef0 <_i2c_m_sync_transfer+0x1c0>
     eee:	e759      	b.n	da4 <_i2c_m_sync_transfer+0x74>
     ef0:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     ef2:	079b      	lsls	r3, r3, #30
     ef4:	d0f5      	beq.n	ee2 <_i2c_m_sync_transfer+0x1b2>
	return I2C_OK;
     ef6:	2000      	movs	r0, #0
		if (ret) {
     ef8:	2800      	cmp	r0, #0
     efa:	d000      	beq.n	efe <_i2c_m_sync_transfer+0x1ce>
     efc:	e755      	b.n	daa <_i2c_m_sync_transfer+0x7a>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     efe:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     f00:	0edb      	lsrs	r3, r3, #27
     f02:	2101      	movs	r1, #1
     f04:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f06:	69e3      	ldr	r3, [r4, #28]
     f08:	075b      	lsls	r3, r3, #29
     f0a:	d4fc      	bmi.n	f06 <_i2c_m_sync_transfer+0x1d6>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     f0c:	8b62      	ldrh	r2, [r4, #26]
     f0e:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
     f10:	07fb      	lsls	r3, r7, #31
     f12:	d5ba      	bpl.n	e8a <_i2c_m_sync_transfer+0x15a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     f14:	0793      	lsls	r3, r2, #30
     f16:	d400      	bmi.n	f1a <_i2c_m_sync_transfer+0x1ea>
     f18:	e759      	b.n	dce <_i2c_m_sync_transfer+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     f1a:	2301      	movs	r3, #1
     f1c:	7623      	strb	r3, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     f1e:	886b      	ldrh	r3, [r5, #2]
     f20:	2180      	movs	r1, #128	; 0x80
     f22:	0149      	lsls	r1, r1, #5
     f24:	430b      	orrs	r3, r1
     f26:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     f28:	886b      	ldrh	r3, [r5, #2]
     f2a:	491d      	ldr	r1, [pc, #116]	; (fa0 <_i2c_m_sync_transfer+0x270>)
     f2c:	400b      	ands	r3, r1
     f2e:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     f30:	07d3      	lsls	r3, r2, #31
     f32:	d522      	bpl.n	f7a <_i2c_m_sync_transfer+0x24a>
				return I2C_ERR_BUS;
     f34:	2005      	movs	r0, #5
     f36:	4240      	negs	r0, r0
     f38:	e7cd      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     f3a:	2900      	cmp	r1, #0
     f3c:	d0b4      	beq.n	ea8 <_i2c_m_sync_transfer+0x178>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f3e:	6862      	ldr	r2, [r4, #4]
     f40:	2380      	movs	r3, #128	; 0x80
     f42:	02db      	lsls	r3, r3, #11
     f44:	4313      	orrs	r3, r2
     f46:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f48:	69e3      	ldr	r3, [r4, #28]
     f4a:	075b      	lsls	r3, r3, #29
     f4c:	d4fc      	bmi.n	f48 <_i2c_m_sync_transfer+0x218>
     f4e:	e7ab      	b.n	ea8 <_i2c_m_sync_transfer+0x178>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     f50:	6863      	ldr	r3, [r4, #4]
     f52:	4a13      	ldr	r2, [pc, #76]	; (fa0 <_i2c_m_sync_transfer+0x270>)
     f54:	4013      	ands	r3, r2
     f56:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f58:	69e3      	ldr	r3, [r4, #28]
     f5a:	075b      	lsls	r3, r3, #29
     f5c:	d4fc      	bmi.n	f58 <_i2c_m_sync_transfer+0x228>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f5e:	6862      	ldr	r2, [r4, #4]
     f60:	23c0      	movs	r3, #192	; 0xc0
     f62:	029b      	lsls	r3, r3, #10
     f64:	4313      	orrs	r3, r2
     f66:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f68:	69e3      	ldr	r3, [r4, #28]
     f6a:	075b      	lsls	r3, r3, #29
     f6c:	d4fc      	bmi.n	f68 <_i2c_m_sync_transfer+0x238>
     f6e:	e7a2      	b.n	eb6 <_i2c_m_sync_transfer+0x186>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     f70:	2302      	movs	r3, #2
     f72:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     f74:	2002      	movs	r0, #2
     f76:	4240      	negs	r0, r0
     f78:	e7ad      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
			return I2C_ERR_BAD_ADDRESS;
     f7a:	2004      	movs	r0, #4
     f7c:	4240      	negs	r0, r0
     f7e:	e7aa      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
	return I2C_OK;
     f80:	2000      	movs	r0, #0
     f82:	e7a8      	b.n	ed6 <_i2c_m_sync_transfer+0x1a6>
		return I2C_ERR_BUSY;
     f84:	2006      	movs	r0, #6
     f86:	4240      	negs	r0, r0
     f88:	e70b      	b.n	da2 <_i2c_m_sync_transfer+0x72>
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	000005bf 	.word	0x000005bf
     f90:	000032a0 	.word	0x000032a0
     f94:	00000679 	.word	0x00000679
     f98:	000005c1 	.word	0x000005c1
     f9c:	000009a1 	.word	0x000009a1
     fa0:	fffffeff 	.word	0xfffffeff
     fa4:	fffffbff 	.word	0xfffffbff
     fa8:	0000ffff 	.word	0x0000ffff

00000fac <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     fac:	4b04      	ldr	r3, [pc, #16]	; (fc0 <_sysctrl_init_sources+0x14>)
     fae:	699a      	ldr	r2, [r3, #24]
     fb0:	2102      	movs	r1, #2
     fb2:	430a      	orrs	r2, r1
     fb4:	619a      	str	r2, [r3, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     fb6:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     fb8:	311d      	adds	r1, #29
     fba:	400a      	ands	r2, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     fbc:	771a      	strb	r2, [r3, #28]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     fbe:	4770      	bx	lr
     fc0:	40000800 	.word	0x40000800

00000fc4 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
     fc4:	2282      	movs	r2, #130	; 0x82
     fc6:	01d2      	lsls	r2, r2, #7
     fc8:	4b1c      	ldr	r3, [pc, #112]	; (103c <_sysctrl_init_referenced_generators+0x78>)
     fca:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     fcc:	2202      	movs	r2, #2
     fce:	4b1c      	ldr	r3, [pc, #112]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
     fd0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
     fd2:	4b1b      	ldr	r3, [pc, #108]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
     fd4:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
     fd6:	06db      	lsls	r3, r3, #27
     fd8:	d5fb      	bpl.n	fd2 <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
     fda:	4a1a      	ldr	r2, [pc, #104]	; (1044 <_sysctrl_init_referenced_generators+0x80>)
     fdc:	4b18      	ldr	r3, [pc, #96]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
     fde:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
     fe0:	4b19      	ldr	r3, [pc, #100]	; (1048 <_sysctrl_init_referenced_generators+0x84>)
     fe2:	681b      	ldr	r3, [r3, #0]
     fe4:	0e9b      	lsrs	r3, r3, #26
     fe6:	2b3f      	cmp	r3, #63	; 0x3f
     fe8:	d020      	beq.n	102c <_sysctrl_init_referenced_generators+0x68>
     fea:	029b      	lsls	r3, r3, #10
     fec:	2280      	movs	r2, #128	; 0x80
     fee:	0092      	lsls	r2, r2, #2
     ff0:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
     ff2:	4a13      	ldr	r2, [pc, #76]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
     ff4:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
     ff6:	2306      	movs	r3, #6
     ff8:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
     ffa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
     ffc:	075b      	lsls	r3, r3, #29
     ffe:	d518      	bpl.n	1032 <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1000:	4b0f      	ldr	r3, [pc, #60]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
    1002:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    1004:	23d0      	movs	r3, #208	; 0xd0
    1006:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1008:	2bd0      	cmp	r3, #208	; 0xd0
    100a:	d1f9      	bne.n	1000 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    100c:	4a0c      	ldr	r2, [pc, #48]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
    100e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1010:	2180      	movs	r1, #128	; 0x80
    1012:	430b      	orrs	r3, r1
    1014:	b29b      	uxth	r3, r3
    1016:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1018:	4b08      	ldr	r3, [pc, #32]	; (103c <_sysctrl_init_referenced_generators+0x78>)
    101a:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    101c:	09db      	lsrs	r3, r3, #7
    101e:	d1fb      	bne.n	1018 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1020:	4a07      	ldr	r2, [pc, #28]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
    1022:	6993      	ldr	r3, [r2, #24]
    1024:	2102      	movs	r1, #2
    1026:	438b      	bics	r3, r1
    1028:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    102a:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    102c:	23fc      	movs	r3, #252	; 0xfc
    102e:	01db      	lsls	r3, r3, #7
    1030:	e7df      	b.n	ff2 <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1032:	4b03      	ldr	r3, [pc, #12]	; (1040 <_sysctrl_init_referenced_generators+0x7c>)
    1034:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1036:	06db      	lsls	r3, r3, #27
    1038:	d5fb      	bpl.n	1032 <_sysctrl_init_referenced_generators+0x6e>
    103a:	e7e7      	b.n	100c <_sysctrl_init_referenced_generators+0x48>
    103c:	40000c00 	.word	0x40000c00
    1040:	40000800 	.word	0x40000800
    1044:	040105b9 	.word	0x040105b9
    1048:	00806024 	.word	0x00806024

0000104c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    104c:	4b02      	ldr	r3, [pc, #8]	; (1058 <_system_time_init+0xc>)
    104e:	4a03      	ldr	r2, [pc, #12]	; (105c <_system_time_init+0x10>)
    1050:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1052:	2205      	movs	r2, #5
    1054:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1056:	4770      	bx	lr
    1058:	e000e010 	.word	0xe000e010
    105c:	00ffffff 	.word	0x00ffffff

00001060 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1060:	b510      	push	{r4, lr}
	_system_time_init(hw);
    1062:	4b01      	ldr	r3, [pc, #4]	; (1068 <_delay_init+0x8>)
    1064:	4798      	blx	r3
}
    1066:	bd10      	pop	{r4, pc}
    1068:	0000104d 	.word	0x0000104d

0000106c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    106c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    106e:	e00b      	b.n	1088 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    1070:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <_delay_cycles+0x34>)
    1072:	480c      	ldr	r0, [pc, #48]	; (10a4 <_delay_cycles+0x38>)
    1074:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    1076:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1078:	4b09      	ldr	r3, [pc, #36]	; (10a0 <_delay_cycles+0x34>)
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	03db      	lsls	r3, r3, #15
    107e:	d5fb      	bpl.n	1078 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    1080:	4b09      	ldr	r3, [pc, #36]	; (10a8 <_delay_cycles+0x3c>)
    1082:	469c      	mov	ip, r3
    1084:	4461      	add	r1, ip
	while (n--) {
    1086:	0010      	movs	r0, r2
    1088:	1e42      	subs	r2, r0, #1
    108a:	b2d2      	uxtb	r2, r2
    108c:	2800      	cmp	r0, #0
    108e:	d1ef      	bne.n	1070 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1090:	4b03      	ldr	r3, [pc, #12]	; (10a0 <_delay_cycles+0x34>)
    1092:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1094:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1096:	4b02      	ldr	r3, [pc, #8]	; (10a0 <_delay_cycles+0x34>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	03db      	lsls	r3, r3, #15
    109c:	d5fb      	bpl.n	1096 <_delay_cycles+0x2a>
		;
}
    109e:	4770      	bx	lr
    10a0:	e000e010 	.word	0xe000e010
    10a4:	00ffffff 	.word	0x00ffffff
    10a8:	ff000001 	.word	0xff000001

000010ac <main>:
uint8_t i2c_write(uint8_t addr, uint8_t *buf, uint16_t len);

int variant;

int main(void)
{
    10ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ae:	b085      	sub	sp, #20
	/* Initializes MCU, drivers and middle-ware */
	atmel_start_init();
    10b0:	4b38      	ldr	r3, [pc, #224]	; (1194 <main+0xe8>)
    10b2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    10b4:	2208      	movs	r2, #8
    10b6:	23c0      	movs	r3, #192	; 0xc0
    10b8:	05db      	lsls	r3, r3, #23
    10ba:	619a      	str	r2, [r3, #24]
	
	 gpio_set_pin_level(mcp23008_reset_pin, true);  /**< make the reset pin on the slave device is constantly high during communication */
	
	 mcp23008_basic_initialize(MCP23008_I2C_ADDRESS_PIN_A110);
    10bc:	2006      	movs	r0, #6
    10be:	4b36      	ldr	r3, [pc, #216]	; (1198 <main+0xec>)
    10c0:	4798      	blx	r3
	 mcp23008_info(&mcp23008_handle);
    10c2:	4c36      	ldr	r4, [pc, #216]	; (119c <main+0xf0>)
    10c4:	0020      	movs	r0, r4
    10c6:	4b36      	ldr	r3, [pc, #216]	; (11a0 <main+0xf4>)
    10c8:	4798      	blx	r3

	 mcp23008_interface_debug_print("Chip name :\t%s\n\r", mcp23008_handle.info.chip_name);
    10ca:	0021      	movs	r1, r4
    10cc:	311c      	adds	r1, #28
    10ce:	4835      	ldr	r0, [pc, #212]	; (11a4 <main+0xf8>)
    10d0:	4d35      	ldr	r5, [pc, #212]	; (11a8 <main+0xfc>)
    10d2:	47a8      	blx	r5
	 mcp23008_interface_debug_print("Manufacturer: \t%s\n\r",  mcp23008_handle.info.manufacturer_name);
    10d4:	0021      	movs	r1, r4
    10d6:	3126      	adds	r1, #38	; 0x26
    10d8:	4834      	ldr	r0, [pc, #208]	; (11ac <main+0x100>)
    10da:	47a8      	blx	r5

	 mcp23008_interface_debug_print("Interface: \t%s\n\r",  mcp23008_handle.info.interface);
    10dc:	0021      	movs	r1, r4
    10de:	313f      	adds	r1, #63	; 0x3f
    10e0:	4833      	ldr	r0, [pc, #204]	; (11b0 <main+0x104>)
    10e2:	47a8      	blx	r5
	 mcp23008_interface_debug_print("Supply voltage max : \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_max_v);
    10e4:	4e33      	ldr	r6, [pc, #204]	; (11b4 <main+0x108>)
    10e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    10e8:	47b0      	blx	r6
    10ea:	0002      	movs	r2, r0
    10ec:	000b      	movs	r3, r1
    10ee:	4832      	ldr	r0, [pc, #200]	; (11b8 <main+0x10c>)
    10f0:	47a8      	blx	r5
	 mcp23008_interface_debug_print("Supply voltage min: \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_min_v);
    10f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    10f4:	47b0      	blx	r6
    10f6:	0002      	movs	r2, r0
    10f8:	000b      	movs	r3, r1
    10fa:	4830      	ldr	r0, [pc, #192]	; (11bc <main+0x110>)
    10fc:	47a8      	blx	r5
	 mcp23008_interface_debug_print("Maximum current: \t%0.1fmA\n\r",  mcp23008_handle.info.max_current_ma);
    10fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1100:	47b0      	blx	r6
    1102:	0002      	movs	r2, r0
    1104:	000b      	movs	r3, r1
    1106:	482e      	ldr	r0, [pc, #184]	; (11c0 <main+0x114>)
    1108:	47a8      	blx	r5
	 mcp23008_interface_debug_print("Temperature Max: \t%.1fC\n\r",  mcp23008_handle.info.temperature_max);
    110a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    110c:	47b0      	blx	r6
    110e:	0002      	movs	r2, r0
    1110:	000b      	movs	r3, r1
    1112:	482c      	ldr	r0, [pc, #176]	; (11c4 <main+0x118>)
    1114:	47a8      	blx	r5
	 mcp23008_interface_debug_print("Temperature Min: \t%.1fC\n\r",  mcp23008_handle.info.temperature_min);
    1116:	6d20      	ldr	r0, [r4, #80]	; 0x50
    1118:	47b0      	blx	r6
    111a:	0002      	movs	r2, r0
    111c:	000b      	movs	r3, r1
    111e:	482a      	ldr	r0, [pc, #168]	; (11c8 <main+0x11c>)
    1120:	47a8      	blx	r5
	 mcp23008_interface_debug_print("Driver version: \tV%.1f.%.2d\n\r", ( mcp23008_handle.info.driver_version / 1000), (uint8_t)( mcp23008_handle.info.driver_version - (uint8_t)( mcp23008_handle.info.driver_version / 100)*100));
    1122:	6da4      	ldr	r4, [r4, #88]	; 0x58
    1124:	4f29      	ldr	r7, [pc, #164]	; (11cc <main+0x120>)
    1126:	492a      	ldr	r1, [pc, #168]	; (11d0 <main+0x124>)
    1128:	1c20      	adds	r0, r4, #0
    112a:	47b8      	blx	r7
    112c:	9003      	str	r0, [sp, #12]
    112e:	4929      	ldr	r1, [pc, #164]	; (11d4 <main+0x128>)
    1130:	1c20      	adds	r0, r4, #0
    1132:	47b8      	blx	r7
    1134:	4f28      	ldr	r7, [pc, #160]	; (11d8 <main+0x12c>)
    1136:	47b8      	blx	r7
    1138:	b2c3      	uxtb	r3, r0
    113a:	2064      	movs	r0, #100	; 0x64
    113c:	4358      	muls	r0, r3
    113e:	4b27      	ldr	r3, [pc, #156]	; (11dc <main+0x130>)
    1140:	4798      	blx	r3
    1142:	1c01      	adds	r1, r0, #0
    1144:	1c20      	adds	r0, r4, #0
    1146:	4b26      	ldr	r3, [pc, #152]	; (11e0 <main+0x134>)
    1148:	4798      	blx	r3
    114a:	47b8      	blx	r7
    114c:	b2c4      	uxtb	r4, r0
    114e:	9803      	ldr	r0, [sp, #12]
    1150:	47b0      	blx	r6
    1152:	0002      	movs	r2, r0
    1154:	000b      	movs	r3, r1
    1156:	9400      	str	r4, [sp, #0]
    1158:	4822      	ldr	r0, [pc, #136]	; (11e4 <main+0x138>)
    115a:	47a8      	blx	r5

	  mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_7, MCP23008_OUTPUT);
    115c:	2100      	movs	r1, #0
    115e:	2007      	movs	r0, #7
    1160:	4c21      	ldr	r4, [pc, #132]	; (11e8 <main+0x13c>)
    1162:	47a0      	blx	r4
	  mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_6, MCP23008_OUTPUT);
    1164:	2100      	movs	r1, #0
    1166:	2006      	movs	r0, #6
    1168:	47a0      	blx	r4
	  mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_5, MCP23008_OUTPUT);
    116a:	2100      	movs	r1, #0
    116c:	2005      	movs	r0, #5
    116e:	47a0      	blx	r4
	  mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_0, MCP23008_INPUT_PULLUP);
    1170:	2110      	movs	r1, #16
    1172:	2000      	movs	r0, #0
    1174:	47a0      	blx	r4
	  mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_1, MCP23008_INPUT_PULLUP);
    1176:	2110      	movs	r1, #16
    1178:	2001      	movs	r0, #1
    117a:	47a0      	blx	r4
	  
  
	/* Replace with your application code */
	while (1) {
	 mcp23008_basic_gpio_toggle(MCP23008_GPIO_PIN_7);
    117c:	2007      	movs	r0, #7
    117e:	4c1b      	ldr	r4, [pc, #108]	; (11ec <main+0x140>)
    1180:	47a0      	blx	r4
	 mcp23008_basic_gpio_toggle(MCP23008_GPIO_PIN_6);
    1182:	2006      	movs	r0, #6
    1184:	47a0      	blx	r4
	 mcp23008_basic_gpio_toggle(MCP23008_GPIO_PIN_5);
    1186:	2005      	movs	r0, #5
    1188:	47a0      	blx	r4
	 mcp23008_interface_delay_ms(500);
    118a:	20fa      	movs	r0, #250	; 0xfa
    118c:	0040      	lsls	r0, r0, #1
    118e:	4b18      	ldr	r3, [pc, #96]	; (11f0 <main+0x144>)
    1190:	4798      	blx	r3
    1192:	e7f3      	b.n	117c <main+0xd0>
    1194:	00000115 	.word	0x00000115
    1198:	00001a51 	.word	0x00001a51
    119c:	20000088 	.word	0x20000088
    11a0:	000019e9 	.word	0x000019e9
    11a4:	000032bc 	.word	0x000032bc
    11a8:	00001dbd 	.word	0x00001dbd
    11ac:	000032d0 	.word	0x000032d0
    11b0:	000032e4 	.word	0x000032e4
    11b4:	00002665 	.word	0x00002665
    11b8:	000032f8 	.word	0x000032f8
    11bc:	00003318 	.word	0x00003318
    11c0:	00003338 	.word	0x00003338
    11c4:	00003354 	.word	0x00003354
    11c8:	00003370 	.word	0x00003370
    11cc:	00001fbd 	.word	0x00001fbd
    11d0:	447a0000 	.word	0x447a0000
    11d4:	42c80000 	.word	0x42c80000
    11d8:	00001f8d 	.word	0x00001f8d
    11dc:	000025c5 	.word	0x000025c5
    11e0:	0000224d 	.word	0x0000224d
    11e4:	0000338c 	.word	0x0000338c
    11e8:	00001ced 	.word	0x00001ced
    11ec:	00001d85 	.word	0x00001d85
    11f0:	00001db1 	.word	0x00001db1

000011f4 <print>:
	 	 //}
	}
}

void print(char *const pBuffer, size_t u8Length)
{
    11f4:	b570      	push	{r4, r5, r6, lr}
    11f6:	b082      	sub	sp, #8
    11f8:	0006      	movs	r6, r0
    11fa:	000c      	movs	r4, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&USART_0, &io);
    11fc:	4d07      	ldr	r5, [pc, #28]	; (121c <print+0x28>)
    11fe:	a901      	add	r1, sp, #4
    1200:	0028      	movs	r0, r5
    1202:	4b07      	ldr	r3, [pc, #28]	; (1220 <print+0x2c>)
    1204:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    1206:	0028      	movs	r0, r5
    1208:	4b06      	ldr	r3, [pc, #24]	; (1224 <print+0x30>)
    120a:	4798      	blx	r3

	io_write(io, (char *)pBuffer, u8Length);
    120c:	b2a2      	uxth	r2, r4
    120e:	0031      	movs	r1, r6
    1210:	9801      	ldr	r0, [sp, #4]
    1212:	4b05      	ldr	r3, [pc, #20]	; (1228 <print+0x34>)
    1214:	4798      	blx	r3
	
}
    1216:	b002      	add	sp, #8
    1218:	bd70      	pop	{r4, r5, r6, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	20000150 	.word	0x20000150
    1220:	00000649 	.word	0x00000649
    1224:	0000061d 	.word	0x0000061d
    1228:	00000481 	.word	0x00000481

0000122c <i2c_read>:

uint8_t i2c_read(uint8_t addr, uint8_t *buf, uint16_t len)
{
    122c:	b5f0      	push	{r4, r5, r6, r7, lr}
    122e:	b083      	sub	sp, #12
    1230:	0005      	movs	r5, r0
    1232:	000e      	movs	r6, r1
    1234:	0017      	movs	r7, r2
	
	struct io_descriptor *I2C_0_io;

	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    1236:	4c0b      	ldr	r4, [pc, #44]	; (1264 <i2c_read+0x38>)
    1238:	a901      	add	r1, sp, #4
    123a:	0020      	movs	r0, r4
    123c:	4b0a      	ldr	r3, [pc, #40]	; (1268 <i2c_read+0x3c>)
    123e:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    1240:	0020      	movs	r0, r4
    1242:	4b0a      	ldr	r3, [pc, #40]	; (126c <i2c_read+0x40>)
    1244:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    1246:	b229      	sxth	r1, r5
    1248:	2280      	movs	r2, #128	; 0x80
    124a:	0112      	lsls	r2, r2, #4
    124c:	0020      	movs	r0, r4
    124e:	4b08      	ldr	r3, [pc, #32]	; (1270 <i2c_read+0x44>)
    1250:	4798      	blx	r3
	io_read(I2C_0_io, buf,  len);
    1252:	003a      	movs	r2, r7
    1254:	0031      	movs	r1, r6
    1256:	9801      	ldr	r0, [sp, #4]
    1258:	4b06      	ldr	r3, [pc, #24]	; (1274 <i2c_read+0x48>)
    125a:	4798      	blx	r3
	return 0;
}
    125c:	2000      	movs	r0, #0
    125e:	b003      	add	sp, #12
    1260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	2000015c 	.word	0x2000015c
    1268:	00000477 	.word	0x00000477
    126c:	00000459 	.word	0x00000459
    1270:	00000465 	.word	0x00000465
    1274:	000004b9 	.word	0x000004b9

00001278 <i2c_write>:

uint8_t i2c_write(uint8_t addr, uint8_t *buf, uint16_t len)
{
    1278:	b5f0      	push	{r4, r5, r6, r7, lr}
    127a:	b083      	sub	sp, #12
    127c:	0005      	movs	r5, r0
    127e:	000e      	movs	r6, r1
    1280:	0017      	movs	r7, r2
	struct io_descriptor *I2C_0_io;

	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    1282:	4c0b      	ldr	r4, [pc, #44]	; (12b0 <i2c_write+0x38>)
    1284:	a901      	add	r1, sp, #4
    1286:	0020      	movs	r0, r4
    1288:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <i2c_write+0x3c>)
    128a:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    128c:	0020      	movs	r0, r4
    128e:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <i2c_write+0x40>)
    1290:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    1292:	b229      	sxth	r1, r5
    1294:	2280      	movs	r2, #128	; 0x80
    1296:	0112      	lsls	r2, r2, #4
    1298:	0020      	movs	r0, r4
    129a:	4b08      	ldr	r3, [pc, #32]	; (12bc <i2c_write+0x44>)
    129c:	4798      	blx	r3
	io_write(I2C_0_io, (uint8_t *)buf, len);
    129e:	003a      	movs	r2, r7
    12a0:	0031      	movs	r1, r6
    12a2:	9801      	ldr	r0, [sp, #4]
    12a4:	4b06      	ldr	r3, [pc, #24]	; (12c0 <i2c_write+0x48>)
    12a6:	4798      	blx	r3
	return 0;
}
    12a8:	2000      	movs	r0, #0
    12aa:	b003      	add	sp, #12
    12ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	2000015c 	.word	0x2000015c
    12b4:	00000477 	.word	0x00000477
    12b8:	00000459 	.word	0x00000459
    12bc:	00000465 	.word	0x00000465
    12c0:	00000481 	.word	0x00000481

000012c4 <a_mcp23008_i2c_write>:
 *          - 0 success
 *          - 1 failed to write
 * @note none
 */

uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
    12c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12c6:	af00      	add	r7, sp, #0
    12c8:	000d      	movs	r5, r1

    uint8_t temp_buffer[u8Length + 1];
    12ca:	1c5e      	adds	r6, r3, #1
    12cc:	001c      	movs	r4, r3
    12ce:	3408      	adds	r4, #8
    12d0:	08e4      	lsrs	r4, r4, #3
    12d2:	00e4      	lsls	r4, r4, #3
    12d4:	4669      	mov	r1, sp
    12d6:	1b09      	subs	r1, r1, r4
    12d8:	468d      	mov	sp, r1
	temp_buffer[0] = u8Reg;
    12da:	700d      	strb	r5, [r1, #0]
	for(int index = 1; index < u8Length + 1; index++){
    12dc:	2401      	movs	r4, #1
    12de:	e004      	b.n	12ea <a_mcp23008_i2c_write+0x26>
		temp_buffer[index] = pBuf[index - 1];
    12e0:	1915      	adds	r5, r2, r4
    12e2:	3d01      	subs	r5, #1
    12e4:	782d      	ldrb	r5, [r5, #0]
    12e6:	550d      	strb	r5, [r1, r4]
	for(int index = 1; index < u8Length + 1; index++){
    12e8:	3401      	adds	r4, #1
    12ea:	42b4      	cmp	r4, r6
    12ec:	dbf8      	blt.n	12e0 <a_mcp23008_i2c_write+0x1c>
	}

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)temp_buffer, (u8Length + 1)) != 0) /**< write data */ {
    12ee:	6884      	ldr	r4, [r0, #8]
    12f0:	1c5a      	adds	r2, r3, #1
    12f2:	235c      	movs	r3, #92	; 0x5c
    12f4:	5cc0      	ldrb	r0, [r0, r3]
    12f6:	47a0      	blx	r4
    12f8:	2800      	cmp	r0, #0
    12fa:	d101      	bne.n	1300 <a_mcp23008_i2c_write+0x3c>
            return 1; /**< write fail */
        }
    return 0; /**< success */
}
    12fc:	46bd      	mov	sp, r7
    12fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 1; /**< write fail */
    1300:	2001      	movs	r0, #1
    1302:	e7fb      	b.n	12fc <a_mcp23008_i2c_write+0x38>

00001304 <a_mcp23008_i2c_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed to read
 * @note none
 */
uint8_t a_mcp23008_i2c_read(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
    1304:	b570      	push	{r4, r5, r6, lr}
    1306:	b082      	sub	sp, #8
    1308:	0004      	movs	r4, r0
    130a:	0016      	movs	r6, r2
    130c:	001d      	movs	r5, r3
    130e:	466b      	mov	r3, sp
    1310:	71d9      	strb	r1, [r3, #7]
    1312:	3307      	adds	r3, #7

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)&u8Reg, 1) != 0) /**< write reg */ {
    1314:	225c      	movs	r2, #92	; 0x5c
    1316:	5c80      	ldrb	r0, [r0, r2]
    1318:	3a5b      	subs	r2, #91	; 0x5b
    131a:	0019      	movs	r1, r3
    131c:	68a3      	ldr	r3, [r4, #8]
    131e:	4798      	blx	r3
    1320:	2800      	cmp	r0, #0
    1322:	d002      	beq.n	132a <a_mcp23008_i2c_read+0x26>
            return 1; /**< write fail */
    1324:	2001      	movs	r0, #1

    if (pHandle->i2c_read(pHandle->i2c_address, pBuf, u8Length) != 0) /**< read data */ {
            return 1; /**< read fail */
        }
    return 0;
}
    1326:	b002      	add	sp, #8
    1328:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->i2c_read(pHandle->i2c_address, pBuf, u8Length) != 0) /**< read data */ {
    132a:	68e3      	ldr	r3, [r4, #12]
    132c:	b2aa      	uxth	r2, r5
    132e:	215c      	movs	r1, #92	; 0x5c
    1330:	5c60      	ldrb	r0, [r4, r1]
    1332:	0031      	movs	r1, r6
    1334:	4798      	blx	r3
    1336:	2800      	cmp	r0, #0
    1338:	d0f5      	beq.n	1326 <a_mcp23008_i2c_read+0x22>
            return 1; /**< read fail */
    133a:	2001      	movs	r0, #1
    133c:	e7f3      	b.n	1326 <a_mcp23008_i2c_read+0x22>
	...

00001340 <a_mcp23008_print_error_msg>:
* @param[in] *pBuffer point to the string to be printed
* @return none
* @note   none
*/
void a_mcp23008_print_error_msg(mcp23008_handle_t *const pHandle, char *const pBuffer)
{
    1340:	b510      	push	{r4, lr}
#ifdef MCP23008_DEBUG_MODE
    pHandle->debug_print("MCP23008: failed to %s.\r\n", pBuffer);
    1342:	6943      	ldr	r3, [r0, #20]
    1344:	4801      	ldr	r0, [pc, #4]	; (134c <a_mcp23008_print_error_msg+0xc>)
    1346:	4798      	blx	r3
#endif // mcp23008_DEBUG_MODE
}
    1348:	bd10      	pop	{r4, pc}
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	000033b4 	.word	0x000033b4

00001350 <mcp23008_init>:
 *            - 1 i2c or spi initialization failed
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t mcp23008_init(mcp23008_handle_t *const pHandle) {
    1350:	b510      	push	{r4, lr}
    1352:	1e04      	subs	r4, r0, #0

    if (pHandle == NULL)
    1354:	d03b      	beq.n	13ce <mcp23008_init+0x7e>
        return 2;
    if (pHandle->debug_print == NULL)
    1356:	6943      	ldr	r3, [r0, #20]
    1358:	2b00      	cmp	r3, #0
    135a:	d03a      	beq.n	13d2 <mcp23008_init+0x82>
        return 3;

    if (pHandle->receive_callback == NULL) {
    135c:	6982      	ldr	r2, [r0, #24]
    135e:	2a00      	cmp	r2, #0
    1360:	d015      	beq.n	138e <mcp23008_init+0x3e>
        pHandle->debug_print("mcp23008: receive_callback\n");
        return 3;
    }
    if (pHandle->delay_ms == NULL) {
    1362:	6902      	ldr	r2, [r0, #16]
    1364:	2a00      	cmp	r2, #0
    1366:	d016      	beq.n	1396 <mcp23008_init+0x46>
        pHandle->debug_print("mcp23008: delay_ms\n");
    }

    if (pHandle->i2c_init == NULL) {
    1368:	6823      	ldr	r3, [r4, #0]
    136a:	2b00      	cmp	r3, #0
    136c:	d016      	beq.n	139c <mcp23008_init+0x4c>
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
        return 3;
    }

    if (pHandle->i2c_deinit == NULL) {
    136e:	6862      	ldr	r2, [r4, #4]
    1370:	2a00      	cmp	r2, #0
    1372:	d018      	beq.n	13a6 <mcp23008_init+0x56>
        pHandle->debug_print("mcp23008: i2c_deint is null\n");
        return 3;
    }

    if (pHandle->i2c_read == NULL) {
    1374:	68e2      	ldr	r2, [r4, #12]
    1376:	2a00      	cmp	r2, #0
    1378:	d01a      	beq.n	13b0 <mcp23008_init+0x60>
        pHandle->debug_print("mcp23008: i2c_read is null\n");
        return 3;
    }
    if (pHandle->i2c_write == NULL) {
    137a:	68a2      	ldr	r2, [r4, #8]
    137c:	2a00      	cmp	r2, #0
    137e:	d01c      	beq.n	13ba <mcp23008_init+0x6a>
        pHandle->debug_print("mcp23008: i2c_write is null\n");
        return 3;
    }
    if (pHandle->i2c_init()) {
    1380:	4798      	blx	r3
    1382:	2800      	cmp	r0, #0
    1384:	d11e      	bne.n	13c4 <mcp23008_init+0x74>
        pHandle->debug_print("mcp23008: i2c initialize failed\n");
        return 1;
    }

    pHandle->inited = 1; /* flag complete initialization */
    1386:	2201      	movs	r2, #1
    1388:	235d      	movs	r3, #93	; 0x5d
    138a:	54e2      	strb	r2, [r4, r3]

    return 0;
    138c:	e020      	b.n	13d0 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: receive_callback\n");
    138e:	4812      	ldr	r0, [pc, #72]	; (13d8 <mcp23008_init+0x88>)
    1390:	4798      	blx	r3
        return 3;
    1392:	2003      	movs	r0, #3
    1394:	e01c      	b.n	13d0 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: delay_ms\n");
    1396:	4811      	ldr	r0, [pc, #68]	; (13dc <mcp23008_init+0x8c>)
    1398:	4798      	blx	r3
    139a:	e7e5      	b.n	1368 <mcp23008_init+0x18>
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
    139c:	6963      	ldr	r3, [r4, #20]
    139e:	4810      	ldr	r0, [pc, #64]	; (13e0 <mcp23008_init+0x90>)
    13a0:	4798      	blx	r3
        return 3;
    13a2:	2003      	movs	r0, #3
    13a4:	e014      	b.n	13d0 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: i2c_deint is null\n");
    13a6:	6963      	ldr	r3, [r4, #20]
    13a8:	480e      	ldr	r0, [pc, #56]	; (13e4 <mcp23008_init+0x94>)
    13aa:	4798      	blx	r3
        return 3;
    13ac:	2003      	movs	r0, #3
    13ae:	e00f      	b.n	13d0 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: i2c_read is null\n");
    13b0:	6963      	ldr	r3, [r4, #20]
    13b2:	480d      	ldr	r0, [pc, #52]	; (13e8 <mcp23008_init+0x98>)
    13b4:	4798      	blx	r3
        return 3;
    13b6:	2003      	movs	r0, #3
    13b8:	e00a      	b.n	13d0 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: i2c_write is null\n");
    13ba:	6963      	ldr	r3, [r4, #20]
    13bc:	480b      	ldr	r0, [pc, #44]	; (13ec <mcp23008_init+0x9c>)
    13be:	4798      	blx	r3
        return 3;
    13c0:	2003      	movs	r0, #3
    13c2:	e005      	b.n	13d0 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: i2c initialize failed\n");
    13c4:	6963      	ldr	r3, [r4, #20]
    13c6:	480a      	ldr	r0, [pc, #40]	; (13f0 <mcp23008_init+0xa0>)
    13c8:	4798      	blx	r3
        return 1;
    13ca:	2001      	movs	r0, #1
    13cc:	e000      	b.n	13d0 <mcp23008_init+0x80>
        return 2;
    13ce:	2002      	movs	r0, #2
}
    13d0:	bd10      	pop	{r4, pc}
        return 3;
    13d2:	2003      	movs	r0, #3
    13d4:	e7fc      	b.n	13d0 <mcp23008_init+0x80>
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	000033d0 	.word	0x000033d0
    13dc:	000033ec 	.word	0x000033ec
    13e0:	00003400 	.word	0x00003400
    13e4:	00003424 	.word	0x00003424
    13e8:	00003444 	.word	0x00003444
    13ec:	00003460 	.word	0x00003460
    13f0:	00003480 	.word	0x00003480

000013f4 <mcp23008_set_addr_pin>:
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp23008_set_addr_pin(mcp23008_handle_t *const pHandle, mcp23008_address_pin_t address_pin)
{
    if (pHandle == NULL) /**< check handle */
    13f4:	2800      	cmp	r0, #0
    13f6:	d00b      	beq.n	1410 <mcp23008_set_addr_pin+0x1c>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    13f8:	235d      	movs	r3, #93	; 0x5d
    13fa:	5cc3      	ldrb	r3, [r0, r3]
    13fc:	2b01      	cmp	r3, #1
    13fe:	d001      	beq.n	1404 <mcp23008_set_addr_pin+0x10>
        return 3; /**< return error */
    1400:	2003      	movs	r0, #3

    pHandle->i2c_address = (MCP23008_ADDRESS_DEFAULT | address_pin);

    return 0;
}
    1402:	4770      	bx	lr
    pHandle->i2c_address = (MCP23008_ADDRESS_DEFAULT | address_pin);
    1404:	2320      	movs	r3, #32
    1406:	4319      	orrs	r1, r3
    1408:	235c      	movs	r3, #92	; 0x5c
    140a:	54c1      	strb	r1, [r0, r3]
    return 0;
    140c:	2000      	movs	r0, #0
    140e:	e7f8      	b.n	1402 <mcp23008_set_addr_pin+0xe>
        return 2; /**< return error */
    1410:	2002      	movs	r0, #2
    1412:	e7f6      	b.n	1402 <mcp23008_set_addr_pin+0xe>

00001414 <mcp23008_set_pin_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set pin mode
 * @note   none
 */
uint8_t mcp23008_set_pin_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_mode_t mode) {
    1414:	b5f0      	push	{r4, r5, r6, r7, lr}
    1416:	46c6      	mov	lr, r8
    1418:	b500      	push	{lr}
    141a:	b084      	sub	sp, #16
    141c:	0004      	movs	r4, r0
    141e:	000f      	movs	r7, r1
    1420:	9201      	str	r2, [sp, #4]

    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1422:	2800      	cmp	r0, #0
    1424:	d02e      	beq.n	1484 <mcp23008_set_pin_mode+0x70>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1426:	235d      	movs	r3, #93	; 0x5d
    1428:	5cc5      	ldrb	r5, [r0, r3]
    142a:	2d01      	cmp	r5, #1
    142c:	d004      	beq.n	1438 <mcp23008_set_pin_mode+0x24>
        return 3; /**< return error */
    142e:	2003      	movs	r0, #3
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin mode");
        return 1;
    }
    return 0;
}
    1430:	b004      	add	sp, #16
    1432:	bc04      	pop	{r2}
    1434:	4690      	mov	r8, r2
    1436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
    1438:	3b5c      	subs	r3, #92	; 0x5c
    143a:	aa02      	add	r2, sp, #8
    143c:	3207      	adds	r2, #7
    143e:	2100      	movs	r1, #0
    1440:	4e11      	ldr	r6, [pc, #68]	; (1488 <mcp23008_set_pin_mode+0x74>)
    1442:	47b0      	blx	r6
    if (err != 0) {
    1444:	2800      	cmp	r0, #0
    1446:	d117      	bne.n	1478 <mcp23008_set_pin_mode+0x64>
    status &= ~(1 << pin);
    1448:	2101      	movs	r1, #1
    144a:	40b9      	lsls	r1, r7
    144c:	ab02      	add	r3, sp, #8
    144e:	1dda      	adds	r2, r3, #7
    1450:	7813      	ldrb	r3, [r2, #0]
    1452:	438b      	bics	r3, r1
    1454:	b25b      	sxtb	r3, r3
    status |= (mode << pin);
    1456:	9e01      	ldr	r6, [sp, #4]
    1458:	40be      	lsls	r6, r7
    145a:	431e      	orrs	r6, r3
    145c:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
    145e:	2301      	movs	r3, #1
    1460:	2100      	movs	r1, #0
    1462:	0020      	movs	r0, r4
    1464:	4e09      	ldr	r6, [pc, #36]	; (148c <mcp23008_set_pin_mode+0x78>)
    1466:	47b0      	blx	r6
    if (err != 0) {
    1468:	2800      	cmp	r0, #0
    146a:	d0e1      	beq.n	1430 <mcp23008_set_pin_mode+0x1c>
       a_mcp23008_print_error_msg(pHandle, "set pin mode");
    146c:	4908      	ldr	r1, [pc, #32]	; (1490 <mcp23008_set_pin_mode+0x7c>)
    146e:	0020      	movs	r0, r4
    1470:	4b08      	ldr	r3, [pc, #32]	; (1494 <mcp23008_set_pin_mode+0x80>)
    1472:	4798      	blx	r3
        return 1;
    1474:	0028      	movs	r0, r5
    1476:	e7db      	b.n	1430 <mcp23008_set_pin_mode+0x1c>
        a_mcp23008_print_error_msg(pHandle, "set pin mode");
    1478:	4905      	ldr	r1, [pc, #20]	; (1490 <mcp23008_set_pin_mode+0x7c>)
    147a:	0020      	movs	r0, r4
    147c:	4b05      	ldr	r3, [pc, #20]	; (1494 <mcp23008_set_pin_mode+0x80>)
    147e:	4798      	blx	r3
        return 1;
    1480:	0028      	movs	r0, r5
    1482:	e7d5      	b.n	1430 <mcp23008_set_pin_mode+0x1c>
        return 2; /**< return error */
    1484:	2002      	movs	r0, #2
    1486:	e7d3      	b.n	1430 <mcp23008_set_pin_mode+0x1c>
    1488:	00001305 	.word	0x00001305
    148c:	000012c5 	.word	0x000012c5
    1490:	000034d8 	.word	0x000034d8
    1494:	00001341 	.word	0x00001341

00001498 <mcp23008_pin_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_pin_write(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_logic_level_t logic_level) {
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	46c6      	mov	lr, r8
    149c:	b500      	push	{lr}
    149e:	b084      	sub	sp, #16
    14a0:	0004      	movs	r4, r0
    14a2:	000f      	movs	r7, r1
    14a4:	9201      	str	r2, [sp, #4]
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    14a6:	2800      	cmp	r0, #0
    14a8:	d02e      	beq.n	1508 <mcp23008_pin_write+0x70>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    14aa:	235d      	movs	r3, #93	; 0x5d
    14ac:	5cc5      	ldrb	r5, [r0, r3]
    14ae:	2d01      	cmp	r5, #1
    14b0:	d004      	beq.n	14bc <mcp23008_pin_write+0x24>
        return 3; /**< return error */
    14b2:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "write pin");
        return 1;
    }
    return 0;
}
    14b4:	b004      	add	sp, #16
    14b6:	bc04      	pop	{r2}
    14b8:	4690      	mov	r8, r2
    14ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    14bc:	3b5c      	subs	r3, #92	; 0x5c
    14be:	aa02      	add	r2, sp, #8
    14c0:	3207      	adds	r2, #7
    14c2:	210a      	movs	r1, #10
    14c4:	4e11      	ldr	r6, [pc, #68]	; (150c <mcp23008_pin_write+0x74>)
    14c6:	47b0      	blx	r6
    if (err != 0) {
    14c8:	2800      	cmp	r0, #0
    14ca:	d117      	bne.n	14fc <mcp23008_pin_write+0x64>
    status &= ~(1 << pin);
    14cc:	2101      	movs	r1, #1
    14ce:	40b9      	lsls	r1, r7
    14d0:	ab02      	add	r3, sp, #8
    14d2:	1dda      	adds	r2, r3, #7
    14d4:	7813      	ldrb	r3, [r2, #0]
    14d6:	438b      	bics	r3, r1
    14d8:	b25b      	sxtb	r3, r3
    status |= (logic_level << pin);
    14da:	9e01      	ldr	r6, [sp, #4]
    14dc:	40be      	lsls	r6, r7
    14de:	431e      	orrs	r6, r3
    14e0:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    14e2:	2301      	movs	r3, #1
    14e4:	210a      	movs	r1, #10
    14e6:	0020      	movs	r0, r4
    14e8:	4e09      	ldr	r6, [pc, #36]	; (1510 <mcp23008_pin_write+0x78>)
    14ea:	47b0      	blx	r6
    if (err != 0) {
    14ec:	2800      	cmp	r0, #0
    14ee:	d0e1      	beq.n	14b4 <mcp23008_pin_write+0x1c>
        a_mcp23008_print_error_msg(pHandle, "write pin");
    14f0:	4908      	ldr	r1, [pc, #32]	; (1514 <mcp23008_pin_write+0x7c>)
    14f2:	0020      	movs	r0, r4
    14f4:	4b08      	ldr	r3, [pc, #32]	; (1518 <mcp23008_pin_write+0x80>)
    14f6:	4798      	blx	r3
        return 1;
    14f8:	0028      	movs	r0, r5
    14fa:	e7db      	b.n	14b4 <mcp23008_pin_write+0x1c>
        a_mcp23008_print_error_msg(pHandle,"read latch register");
    14fc:	4907      	ldr	r1, [pc, #28]	; (151c <mcp23008_pin_write+0x84>)
    14fe:	0020      	movs	r0, r4
    1500:	4b05      	ldr	r3, [pc, #20]	; (1518 <mcp23008_pin_write+0x80>)
    1502:	4798      	blx	r3
        return 1;
    1504:	0028      	movs	r0, r5
    1506:	e7d5      	b.n	14b4 <mcp23008_pin_write+0x1c>
        return 2; /**< return error */
    1508:	2002      	movs	r0, #2
    150a:	e7d3      	b.n	14b4 <mcp23008_pin_write+0x1c>
    150c:	00001305 	.word	0x00001305
    1510:	000012c5 	.word	0x000012c5
    1514:	00003514 	.word	0x00003514
    1518:	00001341 	.word	0x00001341
    151c:	00003500 	.word	0x00003500

00001520 <mcp23008_pin_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed read pin
 * @note    none
 */
uint8_t mcp23008_pin_read(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_logic_level_t *logic_level) {
    1520:	b5f0      	push	{r4, r5, r6, r7, lr}
    1522:	46c6      	mov	lr, r8
    1524:	b500      	push	{lr}
    1526:	b084      	sub	sp, #16
    1528:	0004      	movs	r4, r0
    152a:	000d      	movs	r5, r1
    152c:	9201      	str	r2, [sp, #4]
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    152e:	2800      	cmp	r0, #0
    1530:	d020      	beq.n	1574 <mcp23008_pin_read+0x54>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1532:	235d      	movs	r3, #93	; 0x5d
    1534:	5cc7      	ldrb	r7, [r0, r3]
    1536:	2f01      	cmp	r7, #1
    1538:	d004      	beq.n	1544 <mcp23008_pin_read+0x24>
        return 3; /**< return error */
    153a:	2003      	movs	r0, #3
        a_mcp23008_print_error_msg(pHandle, "read latch register");
        return 1;
    }
    *logic_level = (mcp23008_port_logic_level_t) ((status & pinMask[pin]) >> pin);
    return 0;
}
    153c:	b004      	add	sp, #16
    153e:	bc04      	pop	{r2}
    1540:	4690      	mov	r8, r2
    1542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_GENERAL_PURPOSE_REG, (uint8_t *) &status, 1);
    1544:	3b5c      	subs	r3, #92	; 0x5c
    1546:	aa02      	add	r2, sp, #8
    1548:	3207      	adds	r2, #7
    154a:	2109      	movs	r1, #9
    154c:	4e0a      	ldr	r6, [pc, #40]	; (1578 <mcp23008_pin_read+0x58>)
    154e:	47b0      	blx	r6
    if (err != 0) {
    1550:	2800      	cmp	r0, #0
    1552:	d109      	bne.n	1568 <mcp23008_pin_read+0x48>
    *logic_level = (mcp23008_port_logic_level_t) ((status & pinMask[pin]) >> pin);
    1554:	4b09      	ldr	r3, [pc, #36]	; (157c <mcp23008_pin_read+0x5c>)
    1556:	5d5a      	ldrb	r2, [r3, r5]
    1558:	ab02      	add	r3, sp, #8
    155a:	3307      	adds	r3, #7
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	4013      	ands	r3, r2
    1560:	412b      	asrs	r3, r5
    1562:	9a01      	ldr	r2, [sp, #4]
    1564:	7013      	strb	r3, [r2, #0]
    return 0;
    1566:	e7e9      	b.n	153c <mcp23008_pin_read+0x1c>
        a_mcp23008_print_error_msg(pHandle, "read latch register");
    1568:	4905      	ldr	r1, [pc, #20]	; (1580 <mcp23008_pin_read+0x60>)
    156a:	0020      	movs	r0, r4
    156c:	4b05      	ldr	r3, [pc, #20]	; (1584 <mcp23008_pin_read+0x64>)
    156e:	4798      	blx	r3
        return 1;
    1570:	0038      	movs	r0, r7
    1572:	e7e3      	b.n	153c <mcp23008_pin_read+0x1c>
        return 2; /**< return error */
    1574:	2002      	movs	r0, #2
    1576:	e7e1      	b.n	153c <mcp23008_pin_read+0x1c>
    1578:	00001305 	.word	0x00001305
    157c:	000033ac 	.word	0x000033ac
    1580:	00003500 	.word	0x00003500
    1584:	00001341 	.word	0x00001341

00001588 <mcp23008_set_pin_pullup_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set pull-up mode
 * @note    none
 */
uint8_t mcp23008_set_pin_pullup_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
    1588:	b5f0      	push	{r4, r5, r6, r7, lr}
    158a:	46c6      	mov	lr, r8
    158c:	b500      	push	{lr}
    158e:	b084      	sub	sp, #16
    1590:	0004      	movs	r4, r0
    1592:	000f      	movs	r7, r1
    1594:	9201      	str	r2, [sp, #4]
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1596:	2800      	cmp	r0, #0
    1598:	d02e      	beq.n	15f8 <mcp23008_set_pin_pullup_mode+0x70>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    159a:	235d      	movs	r3, #93	; 0x5d
    159c:	5cc5      	ldrb	r5, [r0, r3]
    159e:	2d01      	cmp	r5, #1
    15a0:	d004      	beq.n	15ac <mcp23008_set_pin_pullup_mode+0x24>
        return 3; /**< return error */
    15a2:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
        return 1;
    }
    return 0;
}
    15a4:	b004      	add	sp, #16
    15a6:	bc04      	pop	{r2}
    15a8:	4690      	mov	r8, r2
    15aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *)&status, 1);
    15ac:	3b5c      	subs	r3, #92	; 0x5c
    15ae:	aa02      	add	r2, sp, #8
    15b0:	3207      	adds	r2, #7
    15b2:	2106      	movs	r1, #6
    15b4:	4e11      	ldr	r6, [pc, #68]	; (15fc <mcp23008_set_pin_pullup_mode+0x74>)
    15b6:	47b0      	blx	r6
    if (err != 0) {
    15b8:	2800      	cmp	r0, #0
    15ba:	d117      	bne.n	15ec <mcp23008_set_pin_pullup_mode+0x64>
    status &= ~(1 << pin);
    15bc:	2101      	movs	r1, #1
    15be:	40b9      	lsls	r1, r7
    15c0:	ab02      	add	r3, sp, #8
    15c2:	1dda      	adds	r2, r3, #7
    15c4:	7813      	ldrb	r3, [r2, #0]
    15c6:	438b      	bics	r3, r1
    15c8:	b25b      	sxtb	r3, r3
    status |= (enable << pin);
    15ca:	9e01      	ldr	r6, [sp, #4]
    15cc:	40be      	lsls	r6, r7
    15ce:	431e      	orrs	r6, r3
    15d0:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *) &status, 1);
    15d2:	2301      	movs	r3, #1
    15d4:	2106      	movs	r1, #6
    15d6:	0020      	movs	r0, r4
    15d8:	4e09      	ldr	r6, [pc, #36]	; (1600 <mcp23008_set_pin_pullup_mode+0x78>)
    15da:	47b0      	blx	r6
    if (err != 0) {
    15dc:	2800      	cmp	r0, #0
    15de:	d0e1      	beq.n	15a4 <mcp23008_set_pin_pullup_mode+0x1c>
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
    15e0:	4908      	ldr	r1, [pc, #32]	; (1604 <mcp23008_set_pin_pullup_mode+0x7c>)
    15e2:	0020      	movs	r0, r4
    15e4:	4b08      	ldr	r3, [pc, #32]	; (1608 <mcp23008_set_pin_pullup_mode+0x80>)
    15e6:	4798      	blx	r3
        return 1;
    15e8:	0028      	movs	r0, r5
    15ea:	e7db      	b.n	15a4 <mcp23008_set_pin_pullup_mode+0x1c>
        a_mcp23008_print_error_msg(pHandle, "read pull-up register");
    15ec:	4907      	ldr	r1, [pc, #28]	; (160c <mcp23008_set_pin_pullup_mode+0x84>)
    15ee:	0020      	movs	r0, r4
    15f0:	4b05      	ldr	r3, [pc, #20]	; (1608 <mcp23008_set_pin_pullup_mode+0x80>)
    15f2:	4798      	blx	r3
        return 1;
    15f4:	0028      	movs	r0, r5
    15f6:	e7d5      	b.n	15a4 <mcp23008_set_pin_pullup_mode+0x1c>
        return 2; /**< return error */
    15f8:	2002      	movs	r0, #2
    15fa:	e7d3      	b.n	15a4 <mcp23008_set_pin_pullup_mode+0x1c>
    15fc:	00001305 	.word	0x00001305
    1600:	000012c5 	.word	0x000012c5
    1604:	00003538 	.word	0x00003538
    1608:	00001341 	.word	0x00001341
    160c:	00003520 	.word	0x00003520

00001610 <mcp23008_set_pin_input_polarity_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set polarity
 * @note    none
 */
uint8_t mcp23008_set_pin_input_polarity_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_polarity_t polarity) {
    1610:	b5f0      	push	{r4, r5, r6, r7, lr}
    1612:	46c6      	mov	lr, r8
    1614:	b500      	push	{lr}
    1616:	b084      	sub	sp, #16
    1618:	0004      	movs	r4, r0
    161a:	000f      	movs	r7, r1
    161c:	9201      	str	r2, [sp, #4]
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    161e:	2800      	cmp	r0, #0
    1620:	d02e      	beq.n	1680 <mcp23008_set_pin_input_polarity_mode+0x70>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1622:	235d      	movs	r3, #93	; 0x5d
    1624:	5cc5      	ldrb	r5, [r0, r3]
    1626:	2d01      	cmp	r5, #1
    1628:	d004      	beq.n	1634 <mcp23008_set_pin_input_polarity_mode+0x24>
        return 3; /**< return error */
    162a:	2003      	movs	r0, #3
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
        return 1;
    }
    return 0;
}
    162c:	b004      	add	sp, #16
    162e:	bc04      	pop	{r2}
    1630:	4690      	mov	r8, r2
    1632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
    1634:	3b5c      	subs	r3, #92	; 0x5c
    1636:	aa02      	add	r2, sp, #8
    1638:	3207      	adds	r2, #7
    163a:	2101      	movs	r1, #1
    163c:	4e11      	ldr	r6, [pc, #68]	; (1684 <mcp23008_set_pin_input_polarity_mode+0x74>)
    163e:	47b0      	blx	r6
    if (err != 0) {
    1640:	2800      	cmp	r0, #0
    1642:	d117      	bne.n	1674 <mcp23008_set_pin_input_polarity_mode+0x64>
    status &= ~(1 << pin);
    1644:	2101      	movs	r1, #1
    1646:	40b9      	lsls	r1, r7
    1648:	ab02      	add	r3, sp, #8
    164a:	1dda      	adds	r2, r3, #7
    164c:	7813      	ldrb	r3, [r2, #0]
    164e:	438b      	bics	r3, r1
    1650:	b25b      	sxtb	r3, r3
    status |= (polarity << pin);
    1652:	9e01      	ldr	r6, [sp, #4]
    1654:	40be      	lsls	r6, r7
    1656:	431e      	orrs	r6, r3
    1658:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
    165a:	2301      	movs	r3, #1
    165c:	2101      	movs	r1, #1
    165e:	0020      	movs	r0, r4
    1660:	4e09      	ldr	r6, [pc, #36]	; (1688 <mcp23008_set_pin_input_polarity_mode+0x78>)
    1662:	47b0      	blx	r6
    if (err != 0) {
    1664:	2800      	cmp	r0, #0
    1666:	d0e1      	beq.n	162c <mcp23008_set_pin_input_polarity_mode+0x1c>
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
    1668:	4908      	ldr	r1, [pc, #32]	; (168c <mcp23008_set_pin_input_polarity_mode+0x7c>)
    166a:	0020      	movs	r0, r4
    166c:	4b08      	ldr	r3, [pc, #32]	; (1690 <mcp23008_set_pin_input_polarity_mode+0x80>)
    166e:	4798      	blx	r3
        return 1;
    1670:	0028      	movs	r0, r5
    1672:	e7db      	b.n	162c <mcp23008_set_pin_input_polarity_mode+0x1c>
        a_mcp23008_print_error_msg(pHandle, "read input polarity");
    1674:	4907      	ldr	r1, [pc, #28]	; (1694 <mcp23008_set_pin_input_polarity_mode+0x84>)
    1676:	0020      	movs	r0, r4
    1678:	4b05      	ldr	r3, [pc, #20]	; (1690 <mcp23008_set_pin_input_polarity_mode+0x80>)
    167a:	4798      	blx	r3
        return 1;
    167c:	0028      	movs	r0, r5
    167e:	e7d5      	b.n	162c <mcp23008_set_pin_input_polarity_mode+0x1c>
        return 2; /**< return error */
    1680:	2002      	movs	r0, #2
    1682:	e7d3      	b.n	162c <mcp23008_set_pin_input_polarity_mode+0x1c>
    1684:	00001305 	.word	0x00001305
    1688:	000012c5 	.word	0x000012c5
    168c:	0000355c 	.word	0x0000355c
    1690:	00001341 	.word	0x00001341
    1694:	00003548 	.word	0x00003548

00001698 <mcp23008_set_pin_interrupt>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set interrupt
 * @note    none
 */
uint8_t mcp23008_set_pin_interrupt(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
    1698:	b5f0      	push	{r4, r5, r6, r7, lr}
    169a:	46c6      	mov	lr, r8
    169c:	b500      	push	{lr}
    169e:	b084      	sub	sp, #16
    16a0:	0004      	movs	r4, r0
    16a2:	000f      	movs	r7, r1
    16a4:	9201      	str	r2, [sp, #4]
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    16a6:	2800      	cmp	r0, #0
    16a8:	d02e      	beq.n	1708 <mcp23008_set_pin_interrupt+0x70>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    16aa:	235d      	movs	r3, #93	; 0x5d
    16ac:	5cc5      	ldrb	r5, [r0, r3]
    16ae:	2d01      	cmp	r5, #1
    16b0:	d004      	beq.n	16bc <mcp23008_set_pin_interrupt+0x24>
        return 3; /**< return error */
    16b2:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
        return 1;
    }
    return 0;
}
    16b4:	b004      	add	sp, #16
    16b6:	bc04      	pop	{r2}
    16b8:	4690      	mov	r8, r2
    16ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
    16bc:	3b5c      	subs	r3, #92	; 0x5c
    16be:	aa02      	add	r2, sp, #8
    16c0:	3207      	adds	r2, #7
    16c2:	2102      	movs	r1, #2
    16c4:	4e11      	ldr	r6, [pc, #68]	; (170c <mcp23008_set_pin_interrupt+0x74>)
    16c6:	47b0      	blx	r6
    if (err != 0) {
    16c8:	2800      	cmp	r0, #0
    16ca:	d117      	bne.n	16fc <mcp23008_set_pin_interrupt+0x64>
    status &= ~(1 << pin);
    16cc:	2101      	movs	r1, #1
    16ce:	40b9      	lsls	r1, r7
    16d0:	ab02      	add	r3, sp, #8
    16d2:	1dda      	adds	r2, r3, #7
    16d4:	7813      	ldrb	r3, [r2, #0]
    16d6:	438b      	bics	r3, r1
    16d8:	b25b      	sxtb	r3, r3
    status |= (enable << pin);
    16da:	9e01      	ldr	r6, [sp, #4]
    16dc:	40be      	lsls	r6, r7
    16de:	431e      	orrs	r6, r3
    16e0:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
    16e2:	2301      	movs	r3, #1
    16e4:	2102      	movs	r1, #2
    16e6:	0020      	movs	r0, r4
    16e8:	4e09      	ldr	r6, [pc, #36]	; (1710 <mcp23008_set_pin_interrupt+0x78>)
    16ea:	47b0      	blx	r6
    if (err != 0) {
    16ec:	2800      	cmp	r0, #0
    16ee:	d0e1      	beq.n	16b4 <mcp23008_set_pin_interrupt+0x1c>
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
    16f0:	4908      	ldr	r1, [pc, #32]	; (1714 <mcp23008_set_pin_interrupt+0x7c>)
    16f2:	0020      	movs	r0, r4
    16f4:	4b08      	ldr	r3, [pc, #32]	; (1718 <mcp23008_set_pin_interrupt+0x80>)
    16f6:	4798      	blx	r3
        return 1;
    16f8:	0028      	movs	r0, r5
    16fa:	e7db      	b.n	16b4 <mcp23008_set_pin_interrupt+0x1c>
        a_mcp23008_print_error_msg(pHandle, "read interrupt");
    16fc:	4907      	ldr	r1, [pc, #28]	; (171c <mcp23008_set_pin_interrupt+0x84>)
    16fe:	0020      	movs	r0, r4
    1700:	4b05      	ldr	r3, [pc, #20]	; (1718 <mcp23008_set_pin_interrupt+0x80>)
    1702:	4798      	blx	r3
        return 1;
    1704:	0028      	movs	r0, r5
    1706:	e7d5      	b.n	16b4 <mcp23008_set_pin_interrupt+0x1c>
        return 2; /**< return error */
    1708:	2002      	movs	r0, #2
    170a:	e7d3      	b.n	16b4 <mcp23008_set_pin_interrupt+0x1c>
    170c:	00001305 	.word	0x00001305
    1710:	000012c5 	.word	0x000012c5
    1714:	00003598 	.word	0x00003598
    1718:	00001341 	.word	0x00001341
    171c:	00003588 	.word	0x00003588

00001720 <mcp23008_clear_interrupt_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed to get interrupt flag status
 * @note    none
 */
uint8_t mcp23008_clear_interrupt_flag(mcp23008_handle_t *const pHandle/*, mcp23008_gpio_port_t pin, mcp23008_int_flag_t flag*/) {
    1720:	b570      	push	{r4, r5, r6, lr}
    1722:	b082      	sub	sp, #8
    1724:	1e04      	subs	r4, r0, #0
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1726:	d01a      	beq.n	175e <mcp23008_clear_interrupt_flag+0x3e>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1728:	235d      	movs	r3, #93	; 0x5d
    172a:	5cc5      	ldrb	r5, [r0, r3]
    172c:	2d01      	cmp	r5, #1
    172e:	d002      	beq.n	1736 <mcp23008_clear_interrupt_flag+0x16>
        return 3; /**< return error */
    1730:	2003      	movs	r0, #3
    {
        pHandle->debug_print("mcp23008: failed to clear pin interrupt flag\n\r");
        return 1;
    }*/
    return 0;
}
    1732:	b002      	add	sp, #8
    1734:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_FLAG_REG, (uint8_t *) &status, 1);
    1736:	3b5c      	subs	r3, #92	; 0x5c
    1738:	466a      	mov	r2, sp
    173a:	3207      	adds	r2, #7
    173c:	2107      	movs	r1, #7
    173e:	4e09      	ldr	r6, [pc, #36]	; (1764 <mcp23008_clear_interrupt_flag+0x44>)
    1740:	47b0      	blx	r6
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_CAPTURED_REG, (uint8_t *) &status, 1);
    1742:	2301      	movs	r3, #1
    1744:	466a      	mov	r2, sp
    1746:	3207      	adds	r2, #7
    1748:	2108      	movs	r1, #8
    174a:	0020      	movs	r0, r4
    174c:	47b0      	blx	r6
    if (err != 0) {
    174e:	2800      	cmp	r0, #0
    1750:	d0ef      	beq.n	1732 <mcp23008_clear_interrupt_flag+0x12>
        a_mcp23008_print_error_msg(pHandle, "read interrupt flag");
    1752:	4905      	ldr	r1, [pc, #20]	; (1768 <mcp23008_clear_interrupt_flag+0x48>)
    1754:	0020      	movs	r0, r4
    1756:	4b05      	ldr	r3, [pc, #20]	; (176c <mcp23008_clear_interrupt_flag+0x4c>)
    1758:	4798      	blx	r3
        return 1;
    175a:	0028      	movs	r0, r5
    175c:	e7e9      	b.n	1732 <mcp23008_clear_interrupt_flag+0x12>
        return 2; /**< return error */
    175e:	2002      	movs	r0, #2
    1760:	e7e7      	b.n	1732 <mcp23008_clear_interrupt_flag+0x12>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	00001305 	.word	0x00001305
    1768:	000035c8 	.word	0x000035c8
    176c:	00001341 	.word	0x00001341

00001770 <mcp23008_set_intrrupt_pin_output_level>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set interrupt logic output logic level
 * @note    none
 */
uint8_t mcp23008_set_intrrupt_pin_output_level(mcp23008_handle_t *const pHandle, mcp23008_int_polarity_t logic_level) {
    1770:	b5f0      	push	{r4, r5, r6, r7, lr}
    1772:	b083      	sub	sp, #12
    1774:	0004      	movs	r4, r0
    1776:	000e      	movs	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1778:	2800      	cmp	r0, #0
    177a:	d029      	beq.n	17d0 <mcp23008_set_intrrupt_pin_output_level+0x60>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    177c:	235d      	movs	r3, #93	; 0x5d
    177e:	5cc5      	ldrb	r5, [r0, r3]
    1780:	2d01      	cmp	r5, #1
    1782:	d002      	beq.n	178a <mcp23008_set_intrrupt_pin_output_level+0x1a>
        return 3; /**< return error */
    1784:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
        return 1;
    }
    return 0;
}
    1786:	b003      	add	sp, #12
    1788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    178a:	3b5c      	subs	r3, #92	; 0x5c
    178c:	466a      	mov	r2, sp
    178e:	3207      	adds	r2, #7
    1790:	2105      	movs	r1, #5
    1792:	4f10      	ldr	r7, [pc, #64]	; (17d4 <mcp23008_set_intrrupt_pin_output_level+0x64>)
    1794:	47b8      	blx	r7
    if (err != 0) {
    1796:	2800      	cmp	r0, #0
    1798:	d114      	bne.n	17c4 <mcp23008_set_intrrupt_pin_output_level+0x54>
    status &= ~(1 << 1);
    179a:	466b      	mov	r3, sp
    179c:	1dda      	adds	r2, r3, #7
    179e:	7813      	ldrb	r3, [r2, #0]
    17a0:	2102      	movs	r1, #2
    17a2:	438b      	bics	r3, r1
    status |= (logic_level << 1);
    17a4:	0076      	lsls	r6, r6, #1
    17a6:	431e      	orrs	r6, r3
    17a8:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    17aa:	2301      	movs	r3, #1
    17ac:	3103      	adds	r1, #3
    17ae:	0020      	movs	r0, r4
    17b0:	4e09      	ldr	r6, [pc, #36]	; (17d8 <mcp23008_set_intrrupt_pin_output_level+0x68>)
    17b2:	47b0      	blx	r6
    if (err != 0) {
    17b4:	2800      	cmp	r0, #0
    17b6:	d0e6      	beq.n	1786 <mcp23008_set_intrrupt_pin_output_level+0x16>
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
    17b8:	4908      	ldr	r1, [pc, #32]	; (17dc <mcp23008_set_intrrupt_pin_output_level+0x6c>)
    17ba:	0020      	movs	r0, r4
    17bc:	4b08      	ldr	r3, [pc, #32]	; (17e0 <mcp23008_set_intrrupt_pin_output_level+0x70>)
    17be:	4798      	blx	r3
        return 1;
    17c0:	0028      	movs	r0, r5
    17c2:	e7e0      	b.n	1786 <mcp23008_set_intrrupt_pin_output_level+0x16>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    17c4:	4907      	ldr	r1, [pc, #28]	; (17e4 <mcp23008_set_intrrupt_pin_output_level+0x74>)
    17c6:	0020      	movs	r0, r4
    17c8:	4b05      	ldr	r3, [pc, #20]	; (17e0 <mcp23008_set_intrrupt_pin_output_level+0x70>)
    17ca:	4798      	blx	r3
        return 1;
    17cc:	0028      	movs	r0, r5
    17ce:	e7da      	b.n	1786 <mcp23008_set_intrrupt_pin_output_level+0x16>
        return 2; /**< return error */
    17d0:	2002      	movs	r0, #2
    17d2:	e7d8      	b.n	1786 <mcp23008_set_intrrupt_pin_output_level+0x16>
    17d4:	00001305 	.word	0x00001305
    17d8:	000012c5 	.word	0x000012c5
    17dc:	000035f0 	.word	0x000035f0
    17e0:	00001341 	.word	0x00001341
    17e4:	000035dc 	.word	0x000035dc

000017e8 <mcp23008_set_interrupt_pin_output_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt putput mode
 * @note    none
 */
uint8_t mcp23008_set_interrupt_pin_output_mode(mcp23008_handle_t *const pHandle, mcp23008_int_open_drain_mode_t mode) {
    17e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ea:	b083      	sub	sp, #12
    17ec:	0004      	movs	r4, r0
    17ee:	000e      	movs	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    17f0:	2800      	cmp	r0, #0
    17f2:	d029      	beq.n	1848 <mcp23008_set_interrupt_pin_output_mode+0x60>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    17f4:	235d      	movs	r3, #93	; 0x5d
    17f6:	5cc5      	ldrb	r5, [r0, r3]
    17f8:	2d01      	cmp	r5, #1
    17fa:	d002      	beq.n	1802 <mcp23008_set_interrupt_pin_output_mode+0x1a>
        return 3; /**< return error */
    17fc:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
        return 1;
    }
    return 0;
}
    17fe:	b003      	add	sp, #12
    1800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1802:	3b5c      	subs	r3, #92	; 0x5c
    1804:	466a      	mov	r2, sp
    1806:	3207      	adds	r2, #7
    1808:	2105      	movs	r1, #5
    180a:	4f10      	ldr	r7, [pc, #64]	; (184c <mcp23008_set_interrupt_pin_output_mode+0x64>)
    180c:	47b8      	blx	r7
    if (err != 0) {
    180e:	2800      	cmp	r0, #0
    1810:	d114      	bne.n	183c <mcp23008_set_interrupt_pin_output_mode+0x54>
    status &= ~(1 << 2);
    1812:	466b      	mov	r3, sp
    1814:	1dda      	adds	r2, r3, #7
    1816:	7813      	ldrb	r3, [r2, #0]
    1818:	2104      	movs	r1, #4
    181a:	438b      	bics	r3, r1
    status |= (mode << 2);
    181c:	00b6      	lsls	r6, r6, #2
    181e:	431e      	orrs	r6, r3
    1820:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1822:	2301      	movs	r3, #1
    1824:	3101      	adds	r1, #1
    1826:	0020      	movs	r0, r4
    1828:	4e09      	ldr	r6, [pc, #36]	; (1850 <mcp23008_set_interrupt_pin_output_mode+0x68>)
    182a:	47b0      	blx	r6
    if (err != 0) {
    182c:	2800      	cmp	r0, #0
    182e:	d0e6      	beq.n	17fe <mcp23008_set_interrupt_pin_output_mode+0x16>
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
    1830:	4908      	ldr	r1, [pc, #32]	; (1854 <mcp23008_set_interrupt_pin_output_mode+0x6c>)
    1832:	0020      	movs	r0, r4
    1834:	4b08      	ldr	r3, [pc, #32]	; (1858 <mcp23008_set_interrupt_pin_output_mode+0x70>)
    1836:	4798      	blx	r3
        return 1;
    1838:	0028      	movs	r0, r5
    183a:	e7e0      	b.n	17fe <mcp23008_set_interrupt_pin_output_mode+0x16>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    183c:	4907      	ldr	r1, [pc, #28]	; (185c <mcp23008_set_interrupt_pin_output_mode+0x74>)
    183e:	0020      	movs	r0, r4
    1840:	4b05      	ldr	r3, [pc, #20]	; (1858 <mcp23008_set_interrupt_pin_output_mode+0x70>)
    1842:	4798      	blx	r3
        return 1;
    1844:	0028      	movs	r0, r5
    1846:	e7da      	b.n	17fe <mcp23008_set_interrupt_pin_output_mode+0x16>
        return 2; /**< return error */
    1848:	2002      	movs	r0, #2
    184a:	e7d8      	b.n	17fe <mcp23008_set_interrupt_pin_output_mode+0x16>
    184c:	00001305 	.word	0x00001305
    1850:	000012c5 	.word	0x000012c5
    1854:	0000362c 	.word	0x0000362c
    1858:	00001341 	.word	0x00001341
    185c:	000035dc 	.word	0x000035dc

00001860 <mcp23008_set_ineterrupt_compare_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt compare mode
 * @note    none
 */
uint8_t mcp23008_set_ineterrupt_compare_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_int_compare_value_t mode) {
    1860:	b5f0      	push	{r4, r5, r6, r7, lr}
    1862:	46c6      	mov	lr, r8
    1864:	b500      	push	{lr}
    1866:	b084      	sub	sp, #16
    1868:	0004      	movs	r4, r0
    186a:	000f      	movs	r7, r1
    186c:	9201      	str	r2, [sp, #4]
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    186e:	2800      	cmp	r0, #0
    1870:	d02e      	beq.n	18d0 <mcp23008_set_ineterrupt_compare_mode+0x70>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1872:	235d      	movs	r3, #93	; 0x5d
    1874:	5cc5      	ldrb	r5, [r0, r3]
    1876:	2d01      	cmp	r5, #1
    1878:	d004      	beq.n	1884 <mcp23008_set_ineterrupt_compare_mode+0x24>
        return 3; /**< return error */
    187a:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
        return 1;
    }
    return 0;
}
    187c:	b004      	add	sp, #16
    187e:	bc04      	pop	{r2}
    1880:	4690      	mov	r8, r2
    1882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
    1884:	3b5c      	subs	r3, #92	; 0x5c
    1886:	aa02      	add	r2, sp, #8
    1888:	3207      	adds	r2, #7
    188a:	2104      	movs	r1, #4
    188c:	4e11      	ldr	r6, [pc, #68]	; (18d4 <mcp23008_set_ineterrupt_compare_mode+0x74>)
    188e:	47b0      	blx	r6
    if (err != 0) {
    1890:	2800      	cmp	r0, #0
    1892:	d117      	bne.n	18c4 <mcp23008_set_ineterrupt_compare_mode+0x64>
    status &= ~(1 << pin);
    1894:	2101      	movs	r1, #1
    1896:	40b9      	lsls	r1, r7
    1898:	ab02      	add	r3, sp, #8
    189a:	1dda      	adds	r2, r3, #7
    189c:	7813      	ldrb	r3, [r2, #0]
    189e:	438b      	bics	r3, r1
    18a0:	b25b      	sxtb	r3, r3
    status |= (mode << pin);
    18a2:	9e01      	ldr	r6, [sp, #4]
    18a4:	40be      	lsls	r6, r7
    18a6:	431e      	orrs	r6, r3
    18a8:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
    18aa:	2301      	movs	r3, #1
    18ac:	2104      	movs	r1, #4
    18ae:	0020      	movs	r0, r4
    18b0:	4e09      	ldr	r6, [pc, #36]	; (18d8 <mcp23008_set_ineterrupt_compare_mode+0x78>)
    18b2:	47b0      	blx	r6
    if (err != 0) {
    18b4:	2800      	cmp	r0, #0
    18b6:	d0e1      	beq.n	187c <mcp23008_set_ineterrupt_compare_mode+0x1c>
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
    18b8:	4908      	ldr	r1, [pc, #32]	; (18dc <mcp23008_set_ineterrupt_compare_mode+0x7c>)
    18ba:	0020      	movs	r0, r4
    18bc:	4b08      	ldr	r3, [pc, #32]	; (18e0 <mcp23008_set_ineterrupt_compare_mode+0x80>)
    18be:	4798      	blx	r3
        return 1;
    18c0:	0028      	movs	r0, r5
    18c2:	e7db      	b.n	187c <mcp23008_set_ineterrupt_compare_mode+0x1c>
        a_mcp23008_print_error_msg(pHandle, "read interrupt on change control reg");
    18c4:	4907      	ldr	r1, [pc, #28]	; (18e4 <mcp23008_set_ineterrupt_compare_mode+0x84>)
    18c6:	0020      	movs	r0, r4
    18c8:	4b05      	ldr	r3, [pc, #20]	; (18e0 <mcp23008_set_ineterrupt_compare_mode+0x80>)
    18ca:	4798      	blx	r3
        return 1;
    18cc:	0028      	movs	r0, r5
    18ce:	e7d5      	b.n	187c <mcp23008_set_ineterrupt_compare_mode+0x1c>
        return 2; /**< return error */
    18d0:	2002      	movs	r0, #2
    18d2:	e7d3      	b.n	187c <mcp23008_set_ineterrupt_compare_mode+0x1c>
    18d4:	00001305 	.word	0x00001305
    18d8:	000012c5 	.word	0x000012c5
    18dc:	00003674 	.word	0x00003674
    18e0:	00001341 	.word	0x00001341
    18e4:	0000364c 	.word	0x0000364c

000018e8 <mcp23008_set_slew_rate>:
 * @return status code
 *          - 0 success
 *          - 1 failed set slew rate
 * @note    none
 */
uint8_t mcp23008_set_slew_rate(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
    18e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ea:	b083      	sub	sp, #12
    18ec:	0005      	movs	r5, r0
    uint8_t err;
    uint8_t status;

    enable = !enable;
    18ee:	424b      	negs	r3, r1
    18f0:	4159      	adcs	r1, r3
    18f2:	b2cc      	uxtb	r4, r1

    if (pHandle == NULL) /**< check handle */
    18f4:	2800      	cmp	r0, #0
    18f6:	d02a      	beq.n	194e <mcp23008_set_slew_rate+0x66>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    18f8:	235d      	movs	r3, #93	; 0x5d
    18fa:	5cc6      	ldrb	r6, [r0, r3]
    18fc:	2e01      	cmp	r6, #1
    18fe:	d002      	beq.n	1906 <mcp23008_set_slew_rate+0x1e>
        return 3; /**< return error */
    1900:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
        return 1;
    }
    return 0;
}
    1902:	b003      	add	sp, #12
    1904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1906:	3b5c      	subs	r3, #92	; 0x5c
    1908:	466a      	mov	r2, sp
    190a:	3207      	adds	r2, #7
    190c:	2105      	movs	r1, #5
    190e:	4f11      	ldr	r7, [pc, #68]	; (1954 <mcp23008_set_slew_rate+0x6c>)
    1910:	47b8      	blx	r7
    if (err != 0) {
    1912:	2800      	cmp	r0, #0
    1914:	d115      	bne.n	1942 <mcp23008_set_slew_rate+0x5a>
    status &= ~(1 << 4);
    1916:	466b      	mov	r3, sp
    1918:	1dda      	adds	r2, r3, #7
    191a:	7811      	ldrb	r1, [r2, #0]
    191c:	2310      	movs	r3, #16
    191e:	4399      	bics	r1, r3
    1920:	000b      	movs	r3, r1
    status |= (enable << 4);
    1922:	0121      	lsls	r1, r4, #4
    1924:	4319      	orrs	r1, r3
    1926:	7011      	strb	r1, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1928:	2301      	movs	r3, #1
    192a:	2105      	movs	r1, #5
    192c:	0028      	movs	r0, r5
    192e:	4c0a      	ldr	r4, [pc, #40]	; (1958 <mcp23008_set_slew_rate+0x70>)
    1930:	47a0      	blx	r4
    if (err != 0) {
    1932:	2800      	cmp	r0, #0
    1934:	d0e5      	beq.n	1902 <mcp23008_set_slew_rate+0x1a>
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
    1936:	4909      	ldr	r1, [pc, #36]	; (195c <mcp23008_set_slew_rate+0x74>)
    1938:	0028      	movs	r0, r5
    193a:	4b09      	ldr	r3, [pc, #36]	; (1960 <mcp23008_set_slew_rate+0x78>)
    193c:	4798      	blx	r3
        return 1;
    193e:	0030      	movs	r0, r6
    1940:	e7df      	b.n	1902 <mcp23008_set_slew_rate+0x1a>
        a_mcp23008_print_error_msg(pHandle,"read expander reg");
    1942:	4908      	ldr	r1, [pc, #32]	; (1964 <mcp23008_set_slew_rate+0x7c>)
    1944:	0028      	movs	r0, r5
    1946:	4b06      	ldr	r3, [pc, #24]	; (1960 <mcp23008_set_slew_rate+0x78>)
    1948:	4798      	blx	r3
        return 1;
    194a:	0030      	movs	r0, r6
    194c:	e7d9      	b.n	1902 <mcp23008_set_slew_rate+0x1a>
        return 2; /**< return error */
    194e:	2002      	movs	r0, #2
    1950:	e7d7      	b.n	1902 <mcp23008_set_slew_rate+0x1a>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	00001305 	.word	0x00001305
    1958:	000012c5 	.word	0x000012c5
    195c:	000036f8 	.word	0x000036f8
    1960:	00001341 	.word	0x00001341
    1964:	000035dc 	.word	0x000035dc

00001968 <mcp23008_set_sequencial_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set sequential operation mode
 * @note    none
 */
uint8_t mcp23008_set_sequencial_mode(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
    1968:	b5f0      	push	{r4, r5, r6, r7, lr}
    196a:	b083      	sub	sp, #12
    196c:	0005      	movs	r5, r0
    uint8_t err;
    uint8_t status;

    enable = !enable;
    196e:	424b      	negs	r3, r1
    1970:	4159      	adcs	r1, r3
    1972:	b2cc      	uxtb	r4, r1

    if (pHandle == NULL) /**< check handle */
    1974:	2800      	cmp	r0, #0
    1976:	d02a      	beq.n	19ce <mcp23008_set_sequencial_mode+0x66>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1978:	235d      	movs	r3, #93	; 0x5d
    197a:	5cc6      	ldrb	r6, [r0, r3]
    197c:	2e01      	cmp	r6, #1
    197e:	d002      	beq.n	1986 <mcp23008_set_sequencial_mode+0x1e>
        return 3; /**< return error */
    1980:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
        return 1;
    }
    return 0;
}
    1982:	b003      	add	sp, #12
    1984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1986:	3b5c      	subs	r3, #92	; 0x5c
    1988:	466a      	mov	r2, sp
    198a:	3207      	adds	r2, #7
    198c:	2105      	movs	r1, #5
    198e:	4f11      	ldr	r7, [pc, #68]	; (19d4 <mcp23008_set_sequencial_mode+0x6c>)
    1990:	47b8      	blx	r7
    if (err != 0) {
    1992:	2800      	cmp	r0, #0
    1994:	d115      	bne.n	19c2 <mcp23008_set_sequencial_mode+0x5a>
    status &= ~(1 << 5);
    1996:	466b      	mov	r3, sp
    1998:	1dda      	adds	r2, r3, #7
    199a:	7811      	ldrb	r1, [r2, #0]
    199c:	2320      	movs	r3, #32
    199e:	4399      	bics	r1, r3
    19a0:	000b      	movs	r3, r1
    status |= (enable << 5);
    19a2:	0161      	lsls	r1, r4, #5
    19a4:	4319      	orrs	r1, r3
    19a6:	7011      	strb	r1, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    19a8:	2301      	movs	r3, #1
    19aa:	2105      	movs	r1, #5
    19ac:	0028      	movs	r0, r5
    19ae:	4c0a      	ldr	r4, [pc, #40]	; (19d8 <mcp23008_set_sequencial_mode+0x70>)
    19b0:	47a0      	blx	r4
    if (err != 0) {
    19b2:	2800      	cmp	r0, #0
    19b4:	d0e5      	beq.n	1982 <mcp23008_set_sequencial_mode+0x1a>
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
    19b6:	4909      	ldr	r1, [pc, #36]	; (19dc <mcp23008_set_sequencial_mode+0x74>)
    19b8:	0028      	movs	r0, r5
    19ba:	4b09      	ldr	r3, [pc, #36]	; (19e0 <mcp23008_set_sequencial_mode+0x78>)
    19bc:	4798      	blx	r3
        return 1;
    19be:	0030      	movs	r0, r6
    19c0:	e7df      	b.n	1982 <mcp23008_set_sequencial_mode+0x1a>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    19c2:	4908      	ldr	r1, [pc, #32]	; (19e4 <mcp23008_set_sequencial_mode+0x7c>)
    19c4:	0028      	movs	r0, r5
    19c6:	4b06      	ldr	r3, [pc, #24]	; (19e0 <mcp23008_set_sequencial_mode+0x78>)
    19c8:	4798      	blx	r3
        return 1;
    19ca:	0030      	movs	r0, r6
    19cc:	e7d9      	b.n	1982 <mcp23008_set_sequencial_mode+0x1a>
        return 2; /**< return error */
    19ce:	2002      	movs	r0, #2
    19d0:	e7d7      	b.n	1982 <mcp23008_set_sequencial_mode+0x1a>
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	00001305 	.word	0x00001305
    19d8:	000012c5 	.word	0x000012c5
    19dc:	00003720 	.word	0x00003720
    19e0:	00001341 	.word	0x00001341
    19e4:	000035dc 	.word	0x000035dc

000019e8 <mcp23008_info>:
 * @return     status code
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */
uint8_t mcp23008_info(mcp23008_handle_t *const pHandle) {
    19e8:	b570      	push	{r4, r5, r6, lr}
    19ea:	0004      	movs	r4, r0

    strncpy(pHandle->info.chip_name, CHIP_NAME, 10); /**< copy chip name */
    19ec:	301c      	adds	r0, #28
    19ee:	220a      	movs	r2, #10
    19f0:	490d      	ldr	r1, [pc, #52]	; (1a28 <mcp23008_info+0x40>)
    19f2:	4d0e      	ldr	r5, [pc, #56]	; (1a2c <mcp23008_info+0x44>)
    19f4:	47a8      	blx	r5
    strncpy(pHandle->info.interface, INTERFACE, 5); /**< copy interface name */
    19f6:	0020      	movs	r0, r4
    19f8:	303f      	adds	r0, #63	; 0x3f
    19fa:	2205      	movs	r2, #5
    19fc:	490c      	ldr	r1, [pc, #48]	; (1a30 <mcp23008_info+0x48>)
    19fe:	47a8      	blx	r5
    strncpy(pHandle->info.manufacturer_name, MANUFACTURER_NAME, 25); /**< copy manufacturer name */
    1a00:	0020      	movs	r0, r4
    1a02:	3026      	adds	r0, #38	; 0x26
    1a04:	2219      	movs	r2, #25
    1a06:	490b      	ldr	r1, [pc, #44]	; (1a34 <mcp23008_info+0x4c>)
    1a08:	47a8      	blx	r5
    pHandle->info.supply_voltage_max_v = SUPPLY_VOLTAGE_MAX; /**< set minimal supply voltage */
    1a0a:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <mcp23008_info+0x50>)
    1a0c:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->info.supply_voltage_min_v = SUPPLY_VOLTAGE_MIN; /**< set maximum supply voltage */
    1a0e:	4b0b      	ldr	r3, [pc, #44]	; (1a3c <mcp23008_info+0x54>)
    1a10:	6463      	str	r3, [r4, #68]	; 0x44
    pHandle->info.max_current_ma = MAX_CURRENT; /**< set maximum current */
    1a12:	4b0b      	ldr	r3, [pc, #44]	; (1a40 <mcp23008_info+0x58>)
    1a14:	64e3      	str	r3, [r4, #76]	; 0x4c
    pHandle->info.temperature_max = TEMPERATURE_MAX; /**< set minimal temperature */
    1a16:	4b0b      	ldr	r3, [pc, #44]	; (1a44 <mcp23008_info+0x5c>)
    1a18:	6563      	str	r3, [r4, #84]	; 0x54
    pHandle->info.temperature_min = TEMPERATURE_MIN; /**< set maximum temperature */
    1a1a:	4b0b      	ldr	r3, [pc, #44]	; (1a48 <mcp23008_info+0x60>)
    1a1c:	6523      	str	r3, [r4, #80]	; 0x50
    pHandle->info.driver_version = DRIVER_VERSION; /**< set driver version */
    1a1e:	4b0b      	ldr	r3, [pc, #44]	; (1a4c <mcp23008_info+0x64>)
    1a20:	65a3      	str	r3, [r4, #88]	; 0x58

    return 0; /**< success */
}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	00003768 	.word	0x00003768
    1a2c:	0000296f 	.word	0x0000296f
    1a30:	00003774 	.word	0x00003774
    1a34:	00003778 	.word	0x00003778
    1a38:	40b00000 	.word	0x40b00000
    1a3c:	3e99999a 	.word	0x3e99999a
    1a40:	43160000 	.word	0x43160000
    1a44:	42fa0000 	.word	0x42fa0000
    1a48:	c2200000 	.word	0xc2200000
    1a4c:	44a28000 	.word	0x44a28000

00001a50 <mcp23008_basic_initialize>:
 * @return status code
 *          - 0 success
 *          - 1 initialize failed
 * @note    none
 */
uint8_t mcp23008_basic_initialize(mcp23008_address_pin_t addr_pin) {
    1a50:	b530      	push	{r4, r5, lr}
    1a52:	b083      	sub	sp, #12
    1a54:	0005      	movs	r5, r0

    volatile uint8_t err;
    volatile uint8_t index;

    /*link function*/
    DRIVER_MCP23008_LINK_INIT(&mcp23008_handle, mcp23008_handle_t);
    1a56:	4c8a      	ldr	r4, [pc, #552]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1a58:	2260      	movs	r2, #96	; 0x60
    1a5a:	2100      	movs	r1, #0
    1a5c:	0020      	movs	r0, r4
    1a5e:	4b89      	ldr	r3, [pc, #548]	; (1c84 <mcp23008_basic_initialize+0x234>)
    1a60:	4798      	blx	r3
    DRIVER_MCP23008_LINK_I2C_INIT(&mcp23008_handle, mcp23008_interface_i2c_init);
    1a62:	4b89      	ldr	r3, [pc, #548]	; (1c88 <mcp23008_basic_initialize+0x238>)
    1a64:	6023      	str	r3, [r4, #0]
    DRIVER_MCP23008_LINK_I2C_DEINIT(&mcp23008_handle, mcp23008_interface_i2c_deinit);
    1a66:	4b89      	ldr	r3, [pc, #548]	; (1c8c <mcp23008_basic_initialize+0x23c>)
    1a68:	6063      	str	r3, [r4, #4]
    DRIVER_MCP23008_LINK_I2C_READ(&mcp23008_handle, mcp23008_interface_i2c_read);
    1a6a:	4b89      	ldr	r3, [pc, #548]	; (1c90 <mcp23008_basic_initialize+0x240>)
    1a6c:	60e3      	str	r3, [r4, #12]
    DRIVER_MCP23008_LINK_I2C_WRITE(&mcp23008_handle, mcp23008_interface_i2c_write);
    1a6e:	4b89      	ldr	r3, [pc, #548]	; (1c94 <mcp23008_basic_initialize+0x244>)
    1a70:	60a3      	str	r3, [r4, #8]
    DRIVER_MCP23008_LINK_DELAY_MS(&mcp23008_handle, mcp23008_interface_delay_ms);
    1a72:	4b89      	ldr	r3, [pc, #548]	; (1c98 <mcp23008_basic_initialize+0x248>)
    1a74:	6123      	str	r3, [r4, #16]
    DRIVER_MCP23008_LINK_DEBUG_PRINT(&mcp23008_handle, mcp23008_interface_debug_print);
    1a76:	4b89      	ldr	r3, [pc, #548]	; (1c9c <mcp23008_basic_initialize+0x24c>)
    1a78:	6163      	str	r3, [r4, #20]
    DRIVER_MCP23008_LINK_RECEIVE_CALLBACK(&mcp23008_handle, mcp23008_interface_receive_callback);
    1a7a:	4b89      	ldr	r3, [pc, #548]	; (1ca0 <mcp23008_basic_initialize+0x250>)
    1a7c:	61a3      	str	r3, [r4, #24]

    /*mcp23008 initialize*/
    err = mcp23008_init(&mcp23008_handle);
    1a7e:	0020      	movs	r0, r4
    1a80:	4b88      	ldr	r3, [pc, #544]	; (1ca4 <mcp23008_basic_initialize+0x254>)
    1a82:	4798      	blx	r3
    1a84:	466b      	mov	r3, sp
    1a86:	71d8      	strb	r0, [r3, #7]
    1a88:	3307      	adds	r3, #7
    if (err) {
    1a8a:	781b      	ldrb	r3, [r3, #0]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d004      	beq.n	1a9a <mcp23008_basic_initialize+0x4a>
        return err;
    1a90:	466b      	mov	r3, sp
    1a92:	79d8      	ldrb	r0, [r3, #7]
    1a94:	b2c0      	uxtb	r0, r0

    /* wait 10 ms */
    mcp23008_interface_delay_ms(10);

    return 0; /**< Initialize success */
}
    1a96:	b003      	add	sp, #12
    1a98:	bd30      	pop	{r4, r5, pc}
    err = mcp23008_set_addr_pin(&mcp23008_handle, addr_pin);
    1a9a:	0029      	movs	r1, r5
    1a9c:	4878      	ldr	r0, [pc, #480]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1a9e:	4b82      	ldr	r3, [pc, #520]	; (1ca8 <mcp23008_basic_initialize+0x258>)
    1aa0:	4798      	blx	r3
    1aa2:	466b      	mov	r3, sp
    1aa4:	71d8      	strb	r0, [r3, #7]
    1aa6:	3307      	adds	r3, #7
    if (err) {
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d003      	beq.n	1ab6 <mcp23008_basic_initialize+0x66>
        return err;
    1aae:	466b      	mov	r3, sp
    1ab0:	79d8      	ldrb	r0, [r3, #7]
    1ab2:	b2c0      	uxtb	r0, r0
    1ab4:	e7ef      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    err = mcp23008_set_intrrupt_pin_output_level(&mcp23008_handle, MCP23008_INT_ACTIVE_LOW);
    1ab6:	2100      	movs	r1, #0
    1ab8:	4871      	ldr	r0, [pc, #452]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1aba:	4b7c      	ldr	r3, [pc, #496]	; (1cac <mcp23008_basic_initialize+0x25c>)
    1abc:	4798      	blx	r3
    1abe:	466b      	mov	r3, sp
    1ac0:	71d8      	strb	r0, [r3, #7]
    1ac2:	3307      	adds	r3, #7
    if (err) {
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d003      	beq.n	1ad2 <mcp23008_basic_initialize+0x82>
        return err;
    1aca:	466b      	mov	r3, sp
    1acc:	79d8      	ldrb	r0, [r3, #7]
    1ace:	b2c0      	uxtb	r0, r0
    1ad0:	e7e1      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    err = mcp23008_set_interrupt_pin_output_mode(&mcp23008_handle, MCP23008_INT_OPEN_DRAIN_OUTPUT);
    1ad2:	2101      	movs	r1, #1
    1ad4:	486a      	ldr	r0, [pc, #424]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1ad6:	4b76      	ldr	r3, [pc, #472]	; (1cb0 <mcp23008_basic_initialize+0x260>)
    1ad8:	4798      	blx	r3
    1ada:	466b      	mov	r3, sp
    1adc:	71d8      	strb	r0, [r3, #7]
    1ade:	3307      	adds	r3, #7
    if (err) {
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d003      	beq.n	1aee <mcp23008_basic_initialize+0x9e>
        return err;
    1ae6:	466b      	mov	r3, sp
    1ae8:	79d8      	ldrb	r0, [r3, #7]
    1aea:	b2c0      	uxtb	r0, r0
    1aec:	e7d3      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    err = mcp23008_set_slew_rate(&mcp23008_handle, MCP23008_BOOL_FALSE);
    1aee:	2100      	movs	r1, #0
    1af0:	4863      	ldr	r0, [pc, #396]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1af2:	4b70      	ldr	r3, [pc, #448]	; (1cb4 <mcp23008_basic_initialize+0x264>)
    1af4:	4798      	blx	r3
    1af6:	466b      	mov	r3, sp
    1af8:	71d8      	strb	r0, [r3, #7]
    1afa:	3307      	adds	r3, #7
    if (err) {
    1afc:	781b      	ldrb	r3, [r3, #0]
    1afe:	2b00      	cmp	r3, #0
    1b00:	d003      	beq.n	1b0a <mcp23008_basic_initialize+0xba>
        return err;
    1b02:	466b      	mov	r3, sp
    1b04:	79d8      	ldrb	r0, [r3, #7]
    1b06:	b2c0      	uxtb	r0, r0
    1b08:	e7c5      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    err = mcp23008_set_sequencial_mode(&mcp23008_handle, MCP23008_BOOL_TRUE);
    1b0a:	2101      	movs	r1, #1
    1b0c:	485c      	ldr	r0, [pc, #368]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1b0e:	4b6a      	ldr	r3, [pc, #424]	; (1cb8 <mcp23008_basic_initialize+0x268>)
    1b10:	4798      	blx	r3
    1b12:	466b      	mov	r3, sp
    1b14:	71d8      	strb	r0, [r3, #7]
    1b16:	3307      	adds	r3, #7
    if (err) {
    1b18:	781b      	ldrb	r3, [r3, #0]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d11c      	bne.n	1b58 <mcp23008_basic_initialize+0x108>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1b1e:	2200      	movs	r2, #0
    1b20:	466b      	mov	r3, sp
    1b22:	719a      	strb	r2, [r3, #6]
    1b24:	466b      	mov	r3, sp
    1b26:	3306      	adds	r3, #6
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	b2db      	uxtb	r3, r3
    1b2c:	2b07      	cmp	r3, #7
    1b2e:	d81b      	bhi.n	1b68 <mcp23008_basic_initialize+0x118>
        err = mcp23008_set_ineterrupt_compare_mode(&mcp23008_handle, index, MCP23008_INT_COMP_TO_DEFAULT_VALUE);
    1b30:	466b      	mov	r3, sp
    1b32:	7999      	ldrb	r1, [r3, #6]
    1b34:	b2c9      	uxtb	r1, r1
    1b36:	2201      	movs	r2, #1
    1b38:	4851      	ldr	r0, [pc, #324]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1b3a:	4b60      	ldr	r3, [pc, #384]	; (1cbc <mcp23008_basic_initialize+0x26c>)
    1b3c:	4798      	blx	r3
    1b3e:	466b      	mov	r3, sp
    1b40:	71d8      	strb	r0, [r3, #7]
    1b42:	3307      	adds	r3, #7
        if (err) {
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d10a      	bne.n	1b60 <mcp23008_basic_initialize+0x110>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1b4a:	466b      	mov	r3, sp
    1b4c:	1d9a      	adds	r2, r3, #6
    1b4e:	799b      	ldrb	r3, [r3, #6]
    1b50:	3301      	adds	r3, #1
    1b52:	b2db      	uxtb	r3, r3
    1b54:	7013      	strb	r3, [r2, #0]
    1b56:	e7e5      	b.n	1b24 <mcp23008_basic_initialize+0xd4>
        return err;
    1b58:	466b      	mov	r3, sp
    1b5a:	79d8      	ldrb	r0, [r3, #7]
    1b5c:	b2c0      	uxtb	r0, r0
    1b5e:	e79a      	b.n	1a96 <mcp23008_basic_initialize+0x46>
            return err;
    1b60:	466b      	mov	r3, sp
    1b62:	79d8      	ldrb	r0, [r3, #7]
    1b64:	b2c0      	uxtb	r0, r0
    1b66:	e796      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1b68:	2200      	movs	r2, #0
    1b6a:	466b      	mov	r3, sp
    1b6c:	719a      	strb	r2, [r3, #6]
    1b6e:	466b      	mov	r3, sp
    1b70:	3306      	adds	r3, #6
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	b2db      	uxtb	r3, r3
    1b76:	2b07      	cmp	r3, #7
    1b78:	d817      	bhi.n	1baa <mcp23008_basic_initialize+0x15a>
        err = mcp23008_set_pin_input_polarity_mode(&mcp23008_handle, index, MCP23008_POLARITY_SAME_LOGIC_STATE);
    1b7a:	466b      	mov	r3, sp
    1b7c:	7999      	ldrb	r1, [r3, #6]
    1b7e:	b2c9      	uxtb	r1, r1
    1b80:	2200      	movs	r2, #0
    1b82:	483f      	ldr	r0, [pc, #252]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1b84:	4b4e      	ldr	r3, [pc, #312]	; (1cc0 <mcp23008_basic_initialize+0x270>)
    1b86:	4798      	blx	r3
    1b88:	466b      	mov	r3, sp
    1b8a:	71d8      	strb	r0, [r3, #7]
    1b8c:	3307      	adds	r3, #7
        if (err) {
    1b8e:	781b      	ldrb	r3, [r3, #0]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d106      	bne.n	1ba2 <mcp23008_basic_initialize+0x152>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1b94:	466b      	mov	r3, sp
    1b96:	1d9a      	adds	r2, r3, #6
    1b98:	799b      	ldrb	r3, [r3, #6]
    1b9a:	3301      	adds	r3, #1
    1b9c:	b2db      	uxtb	r3, r3
    1b9e:	7013      	strb	r3, [r2, #0]
    1ba0:	e7e5      	b.n	1b6e <mcp23008_basic_initialize+0x11e>
            return err;
    1ba2:	466b      	mov	r3, sp
    1ba4:	79d8      	ldrb	r0, [r3, #7]
    1ba6:	b2c0      	uxtb	r0, r0
    1ba8:	e775      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1baa:	2200      	movs	r2, #0
    1bac:	466b      	mov	r3, sp
    1bae:	719a      	strb	r2, [r3, #6]
    1bb0:	466b      	mov	r3, sp
    1bb2:	3306      	adds	r3, #6
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	b2db      	uxtb	r3, r3
    1bb8:	2b07      	cmp	r3, #7
    1bba:	d819      	bhi.n	1bf0 <mcp23008_basic_initialize+0x1a0>
        err = (mcp23008_set_pin_pullup_mode(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
    1bbc:	466b      	mov	r3, sp
    1bbe:	7999      	ldrb	r1, [r3, #6]
    1bc0:	b2c9      	uxtb	r1, r1
    1bc2:	2200      	movs	r2, #0
    1bc4:	482e      	ldr	r0, [pc, #184]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1bc6:	4b3f      	ldr	r3, [pc, #252]	; (1cc4 <mcp23008_basic_initialize+0x274>)
    1bc8:	4798      	blx	r3
    1bca:	1e43      	subs	r3, r0, #1
    1bcc:	4198      	sbcs	r0, r3
    1bce:	b2c0      	uxtb	r0, r0
    1bd0:	466b      	mov	r3, sp
    1bd2:	1dda      	adds	r2, r3, #7
    1bd4:	71d8      	strb	r0, [r3, #7]
        if (err) {
    1bd6:	79db      	ldrb	r3, [r3, #7]
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d106      	bne.n	1bea <mcp23008_basic_initialize+0x19a>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1bdc:	466b      	mov	r3, sp
    1bde:	1d9a      	adds	r2, r3, #6
    1be0:	799b      	ldrb	r3, [r3, #6]
    1be2:	3301      	adds	r3, #1
    1be4:	b2db      	uxtb	r3, r3
    1be6:	7013      	strb	r3, [r2, #0]
    1be8:	e7e2      	b.n	1bb0 <mcp23008_basic_initialize+0x160>
            return err;
    1bea:	7810      	ldrb	r0, [r2, #0]
    1bec:	b2c0      	uxtb	r0, r0
    1bee:	e752      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1bf0:	2200      	movs	r2, #0
    1bf2:	466b      	mov	r3, sp
    1bf4:	719a      	strb	r2, [r3, #6]
    1bf6:	466b      	mov	r3, sp
    1bf8:	3306      	adds	r3, #6
    1bfa:	781b      	ldrb	r3, [r3, #0]
    1bfc:	b2db      	uxtb	r3, r3
    1bfe:	2b07      	cmp	r3, #7
    1c00:	d819      	bhi.n	1c36 <mcp23008_basic_initialize+0x1e6>
        err = (mcp23008_set_pin_interrupt(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
    1c02:	466b      	mov	r3, sp
    1c04:	7999      	ldrb	r1, [r3, #6]
    1c06:	b2c9      	uxtb	r1, r1
    1c08:	2200      	movs	r2, #0
    1c0a:	481d      	ldr	r0, [pc, #116]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1c0c:	4b2e      	ldr	r3, [pc, #184]	; (1cc8 <mcp23008_basic_initialize+0x278>)
    1c0e:	4798      	blx	r3
    1c10:	1e43      	subs	r3, r0, #1
    1c12:	4198      	sbcs	r0, r3
    1c14:	b2c0      	uxtb	r0, r0
    1c16:	466b      	mov	r3, sp
    1c18:	1dda      	adds	r2, r3, #7
    1c1a:	71d8      	strb	r0, [r3, #7]
        if (err) {
    1c1c:	79db      	ldrb	r3, [r3, #7]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d106      	bne.n	1c30 <mcp23008_basic_initialize+0x1e0>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1c22:	466b      	mov	r3, sp
    1c24:	1d9a      	adds	r2, r3, #6
    1c26:	799b      	ldrb	r3, [r3, #6]
    1c28:	3301      	adds	r3, #1
    1c2a:	b2db      	uxtb	r3, r3
    1c2c:	7013      	strb	r3, [r2, #0]
    1c2e:	e7e2      	b.n	1bf6 <mcp23008_basic_initialize+0x1a6>
            return err;
    1c30:	7810      	ldrb	r0, [r2, #0]
    1c32:	b2c0      	uxtb	r0, r0
    1c34:	e72f      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1c36:	2200      	movs	r2, #0
    1c38:	466b      	mov	r3, sp
    1c3a:	719a      	strb	r2, [r3, #6]
    1c3c:	466b      	mov	r3, sp
    1c3e:	3306      	adds	r3, #6
    1c40:	781b      	ldrb	r3, [r3, #0]
    1c42:	b2db      	uxtb	r3, r3
    1c44:	2b07      	cmp	r3, #7
    1c46:	d815      	bhi.n	1c74 <mcp23008_basic_initialize+0x224>
        err = (mcp23008_clear_interrupt_flag(&mcp23008_handle/*, index, MCP23008_BOOL_FALSE*/) != 0);
    1c48:	480d      	ldr	r0, [pc, #52]	; (1c80 <mcp23008_basic_initialize+0x230>)
    1c4a:	4b20      	ldr	r3, [pc, #128]	; (1ccc <mcp23008_basic_initialize+0x27c>)
    1c4c:	4798      	blx	r3
    1c4e:	1e43      	subs	r3, r0, #1
    1c50:	4198      	sbcs	r0, r3
    1c52:	b2c0      	uxtb	r0, r0
    1c54:	466b      	mov	r3, sp
    1c56:	1dda      	adds	r2, r3, #7
    1c58:	71d8      	strb	r0, [r3, #7]
        if (err) {
    1c5a:	79db      	ldrb	r3, [r3, #7]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d106      	bne.n	1c6e <mcp23008_basic_initialize+0x21e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1c60:	466b      	mov	r3, sp
    1c62:	1d9a      	adds	r2, r3, #6
    1c64:	799b      	ldrb	r3, [r3, #6]
    1c66:	3301      	adds	r3, #1
    1c68:	b2db      	uxtb	r3, r3
    1c6a:	7013      	strb	r3, [r2, #0]
    1c6c:	e7e6      	b.n	1c3c <mcp23008_basic_initialize+0x1ec>
            return err;
    1c6e:	7810      	ldrb	r0, [r2, #0]
    1c70:	b2c0      	uxtb	r0, r0
    1c72:	e710      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    mcp23008_interface_delay_ms(10);
    1c74:	200a      	movs	r0, #10
    1c76:	4b08      	ldr	r3, [pc, #32]	; (1c98 <mcp23008_basic_initialize+0x248>)
    1c78:	4798      	blx	r3
    return 0; /**< Initialize success */
    1c7a:	2000      	movs	r0, #0
    1c7c:	e70b      	b.n	1a96 <mcp23008_basic_initialize+0x46>
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	200000e8 	.word	0x200000e8
    1c84:	00002951 	.word	0x00002951
    1c88:	00001da9 	.word	0x00001da9
    1c8c:	00001dad 	.word	0x00001dad
    1c90:	00001e15 	.word	0x00001e15
    1c94:	00001e39 	.word	0x00001e39
    1c98:	00001db1 	.word	0x00001db1
    1c9c:	00001dbd 	.word	0x00001dbd
    1ca0:	00001e5d 	.word	0x00001e5d
    1ca4:	00001351 	.word	0x00001351
    1ca8:	000013f5 	.word	0x000013f5
    1cac:	00001771 	.word	0x00001771
    1cb0:	000017e9 	.word	0x000017e9
    1cb4:	000018e9 	.word	0x000018e9
    1cb8:	00001969 	.word	0x00001969
    1cbc:	00001861 	.word	0x00001861
    1cc0:	00001611 	.word	0x00001611
    1cc4:	00001589 	.word	0x00001589
    1cc8:	00001699 	.word	0x00001699
    1ccc:	00001721 	.word	0x00001721

00001cd0 <mcp23008_basic_gpio_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_gpio_write(mcp23008_gpio_port_t GPIOx, mcp23008_port_logic_level_t level) {
    1cd0:	b510      	push	{r4, lr}
    1cd2:	000a      	movs	r2, r1

    err = mcp23008_pin_write(&mcp23008_handle, GPIOx, level) != 0;
    1cd4:	0001      	movs	r1, r0
    1cd6:	4803      	ldr	r0, [pc, #12]	; (1ce4 <mcp23008_basic_gpio_write+0x14>)
    1cd8:	4b03      	ldr	r3, [pc, #12]	; (1ce8 <mcp23008_basic_gpio_write+0x18>)
    1cda:	4798      	blx	r3
    1cdc:	1e43      	subs	r3, r0, #1
    1cde:	4198      	sbcs	r0, r3
    1ce0:	b2c0      	uxtb	r0, r0
    if(err)
    {
        return err; /**< failed to execute routine */
    }
    return 0; /**< success */
}
    1ce2:	bd10      	pop	{r4, pc}
    1ce4:	200000e8 	.word	0x200000e8
    1ce8:	00001499 	.word	0x00001499

00001cec <mcp23008_basic_gpio_set_direction>:
uint8_t mcp23008_basic_gpio_set_direction(mcp23008_gpio_port_t GPIOx, mcp23008_port_mode_t direction) {
    1cec:	b510      	push	{r4, lr}
    1cee:	0004      	movs	r4, r0
    if (direction == MCP23008_INPUT_PULLUP) {
    1cf0:	2910      	cmp	r1, #16
    1cf2:	d008      	beq.n	1d06 <mcp23008_basic_gpio_set_direction+0x1a>
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, direction) != 0) {
    1cf4:	000a      	movs	r2, r1
    1cf6:	0001      	movs	r1, r0
    1cf8:	4812      	ldr	r0, [pc, #72]	; (1d44 <mcp23008_basic_gpio_set_direction+0x58>)
    1cfa:	4b13      	ldr	r3, [pc, #76]	; (1d48 <mcp23008_basic_gpio_set_direction+0x5c>)
    1cfc:	4798      	blx	r3
    1cfe:	1e04      	subs	r4, r0, #0
    1d00:	d019      	beq.n	1d36 <mcp23008_basic_gpio_set_direction+0x4a>
            return 1; /**< failed to execute routine */
    1d02:	2001      	movs	r0, #1
    1d04:	e01d      	b.n	1d42 <mcp23008_basic_gpio_set_direction+0x56>
        if (mcp23008_set_pin_pullup_mode(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE) != 0) {
    1d06:	2201      	movs	r2, #1
    1d08:	0001      	movs	r1, r0
    1d0a:	480e      	ldr	r0, [pc, #56]	; (1d44 <mcp23008_basic_gpio_set_direction+0x58>)
    1d0c:	4b0f      	ldr	r3, [pc, #60]	; (1d4c <mcp23008_basic_gpio_set_direction+0x60>)
    1d0e:	4798      	blx	r3
    1d10:	2800      	cmp	r0, #0
    1d12:	d001      	beq.n	1d18 <mcp23008_basic_gpio_set_direction+0x2c>
            return 1; /**< failed to execute routine */
    1d14:	2001      	movs	r0, #1
    1d16:	e014      	b.n	1d42 <mcp23008_basic_gpio_set_direction+0x56>
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, MCP23008_INPUT) != 0) {
    1d18:	2201      	movs	r2, #1
    1d1a:	0021      	movs	r1, r4
    1d1c:	4809      	ldr	r0, [pc, #36]	; (1d44 <mcp23008_basic_gpio_set_direction+0x58>)
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <mcp23008_basic_gpio_set_direction+0x5c>)
    1d20:	4798      	blx	r3
    1d22:	2800      	cmp	r0, #0
    1d24:	d009      	beq.n	1d3a <mcp23008_basic_gpio_set_direction+0x4e>
            return 1; /**< failed to execute routine */
    1d26:	2001      	movs	r0, #1
    1d28:	e00b      	b.n	1d42 <mcp23008_basic_gpio_set_direction+0x56>
            mcp23008_basic_gpio_write(index, MCP23008_GPIO_LOW);
    1d2a:	2100      	movs	r1, #0
    1d2c:	0020      	movs	r0, r4
    1d2e:	4b08      	ldr	r3, [pc, #32]	; (1d50 <mcp23008_basic_gpio_set_direction+0x64>)
    1d30:	4798      	blx	r3
        for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) /**< clear port after setting the direction */
    1d32:	3401      	adds	r4, #1
    1d34:	b2e4      	uxtb	r4, r4
    1d36:	2c07      	cmp	r4, #7
    1d38:	d9f7      	bls.n	1d2a <mcp23008_basic_gpio_set_direction+0x3e>
    mcp23008_interface_delay_ms(50);
    1d3a:	2032      	movs	r0, #50	; 0x32
    1d3c:	4b05      	ldr	r3, [pc, #20]	; (1d54 <mcp23008_basic_gpio_set_direction+0x68>)
    1d3e:	4798      	blx	r3
    return 0; /**< success */
    1d40:	2000      	movs	r0, #0
}
    1d42:	bd10      	pop	{r4, pc}
    1d44:	200000e8 	.word	0x200000e8
    1d48:	00001415 	.word	0x00001415
    1d4c:	00001589 	.word	0x00001589
    1d50:	00001cd1 	.word	0x00001cd1
    1d54:	00001db1 	.word	0x00001db1

00001d58 <mcp23008_basic_gpio_read>:
 * @brief basic example to read gpio port
 * @param[in] GPIOx is the gpio port to read
 * @return GPIO read status (pin level)
 * @note    none
 */
uint8_t mcp23008_basic_gpio_read(mcp23008_gpio_port_t GPIOx) {
    1d58:	b500      	push	{lr}
    1d5a:	b083      	sub	sp, #12
    1d5c:	0001      	movs	r1, r0

    volatile uint8_t status;
    err = mcp23008_pin_read(&mcp23008_handle, GPIOx, (int *) &status) != 0;
    1d5e:	466b      	mov	r3, sp
    1d60:	1dda      	adds	r2, r3, #7
    1d62:	4806      	ldr	r0, [pc, #24]	; (1d7c <mcp23008_basic_gpio_read+0x24>)
    1d64:	4b06      	ldr	r3, [pc, #24]	; (1d80 <mcp23008_basic_gpio_read+0x28>)
    1d66:	4798      	blx	r3
    1d68:	1e43      	subs	r3, r0, #1
    1d6a:	4198      	sbcs	r0, r3
    1d6c:	b2c0      	uxtb	r0, r0
    if(err)
    1d6e:	2800      	cmp	r0, #0
    1d70:	d102      	bne.n	1d78 <mcp23008_basic_gpio_read+0x20>
    {
       return err;
    }
    return status; /**< success */
    1d72:	466b      	mov	r3, sp
    1d74:	79d8      	ldrb	r0, [r3, #7]
    1d76:	b2c0      	uxtb	r0, r0
}
    1d78:	b003      	add	sp, #12
    1d7a:	bd00      	pop	{pc}
    1d7c:	200000e8 	.word	0x200000e8
    1d80:	00001521 	.word	0x00001521

00001d84 <mcp23008_basic_gpio_toggle>:
 * @return status code
 *          - 0 success
 *          - 1 failed to toggle
 * @note    none
 */
uint8_t mcp23008_basic_gpio_toggle(mcp23008_gpio_port_t GPIOx) {
    1d84:	b510      	push	{r4, lr}
    1d86:	0004      	movs	r4, r0

   err = mcp23008_basic_gpio_write(GPIOx, !mcp23008_basic_gpio_read(GPIOx)) != 0;
    1d88:	4b05      	ldr	r3, [pc, #20]	; (1da0 <mcp23008_basic_gpio_toggle+0x1c>)
    1d8a:	4798      	blx	r3
    1d8c:	4241      	negs	r1, r0
    1d8e:	4141      	adcs	r1, r0
    1d90:	b2c9      	uxtb	r1, r1
    1d92:	0020      	movs	r0, r4
    1d94:	4b03      	ldr	r3, [pc, #12]	; (1da4 <mcp23008_basic_gpio_toggle+0x20>)
    1d96:	4798      	blx	r3
    1d98:	1e43      	subs	r3, r0, #1
    1d9a:	4198      	sbcs	r0, r3
    1d9c:	b2c0      	uxtb	r0, r0
    {
        return err; /**< failed to execute routine */
    }
    return 0;
    /**< success */;
}
    1d9e:	bd10      	pop	{r4, pc}
    1da0:	00001d59 	.word	0x00001d59
    1da4:	00001cd1 	.word	0x00001cd1

00001da8 <mcp23008_interface_i2c_init>:
    /*call your i2c initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
    1da8:	2000      	movs	r0, #0
    1daa:	4770      	bx	lr

00001dac <mcp23008_interface_i2c_deinit>:
    /*call your i2c de-initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
    1dac:	2000      	movs	r0, #0
    1dae:	4770      	bx	lr

00001db0 <mcp23008_interface_delay_ms>:
/**
 * @brief     interface delay ms
 * @param[in] U32Ms
 * @note      none
 */
void mcp23008_interface_delay_ms(uint32_t U32Ms){
    1db0:	b510      	push	{r4, lr}
    /*call your delay function here*/
    /*user code begin */
	delay_ms(U32Ms);
    1db2:	4b01      	ldr	r3, [pc, #4]	; (1db8 <mcp23008_interface_delay_ms+0x8>)
    1db4:	4798      	blx	r3
    /*user code end*/
}
    1db6:	bd10      	pop	{r4, pc}
    1db8:	00000391 	.word	0x00000391

00001dbc <mcp23008_interface_debug_print>:
/**
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp23008_interface_debug_print(const char *const fmt, ...) {
    1dbc:	b40f      	push	{r0, r1, r2, r3}
    1dbe:	b570      	push	{r4, r5, r6, lr}
    1dc0:	b0c2      	sub	sp, #264	; 0x108
    1dc2:	ac46      	add	r4, sp, #280	; 0x118
    1dc4:	cc40      	ldmia	r4!, {r6}
#ifdef MCP23008_DEBUG_MODE
    volatile char str[256];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char)*256);
    1dc6:	2580      	movs	r5, #128	; 0x80
    1dc8:	006d      	lsls	r5, r5, #1
    1dca:	002a      	movs	r2, r5
    1dcc:	2100      	movs	r1, #0
    1dce:	a802      	add	r0, sp, #8
    1dd0:	4b0c      	ldr	r3, [pc, #48]	; (1e04 <mcp23008_interface_debug_print+0x48>)
    1dd2:	4798      	blx	r3
    va_start(args, fmt);
    1dd4:	9400      	str	r4, [sp, #0]
    vsnprintf((char *) str, 256, (char const *) fmt, args);
    1dd6:	0023      	movs	r3, r4
    1dd8:	0032      	movs	r2, r6
    1dda:	0029      	movs	r1, r5
    1ddc:	a802      	add	r0, sp, #8
    1dde:	4c0a      	ldr	r4, [pc, #40]	; (1e08 <mcp23008_interface_debug_print+0x4c>)
    1de0:	47a0      	blx	r4
    va_end(args);

    len = strlen((char *) str);
    1de2:	a802      	add	r0, sp, #8
    1de4:	4b09      	ldr	r3, [pc, #36]	; (1e0c <mcp23008_interface_debug_print+0x50>)
    1de6:	4798      	blx	r3
    1de8:	b2c0      	uxtb	r0, r0
    1dea:	466b      	mov	r3, sp
    1dec:	71d8      	strb	r0, [r3, #7]
//    EUSART1_Write_Text((const char *) str, len);
    (void)print((uint8_t *)str, len);
    1dee:	79d9      	ldrb	r1, [r3, #7]
    1df0:	b2c9      	uxtb	r1, r1
    1df2:	a802      	add	r0, sp, #8
    1df4:	4b06      	ldr	r3, [pc, #24]	; (1e10 <mcp23008_interface_debug_print+0x54>)
    1df6:	4798      	blx	r3

    /*user code end*/
#endif
}
    1df8:	b042      	add	sp, #264	; 0x108
    1dfa:	bc70      	pop	{r4, r5, r6}
    1dfc:	bc08      	pop	{r3}
    1dfe:	b004      	add	sp, #16
    1e00:	4718      	bx	r3
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	00002951 	.word	0x00002951
    1e08:	000029f1 	.word	0x000029f1
    1e0c:	00002961 	.word	0x00002961
    1e10:	000011f5 	.word	0x000011f5

00001e14 <mcp23008_interface_i2c_read>:
uint8_t mcp23008_interface_i2c_read(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
    1e14:	b510      	push	{r4, lr}
 if(i2c_read(u8Addr, pBuf, u8Length) !=  0)
    1e16:	4b05      	ldr	r3, [pc, #20]	; (1e2c <mcp23008_interface_i2c_read+0x18>)
    1e18:	4798      	blx	r3
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d100      	bne.n	1e20 <mcp23008_interface_i2c_read+0xc>
}
    1e1e:	bd10      	pop	{r4, pc}
	 mcp23008_interface_debug_print("i2c write failed, check the i2c address or wiring\n");
    1e20:	4803      	ldr	r0, [pc, #12]	; (1e30 <mcp23008_interface_i2c_read+0x1c>)
    1e22:	4b04      	ldr	r3, [pc, #16]	; (1e34 <mcp23008_interface_i2c_read+0x20>)
    1e24:	4798      	blx	r3
	 return 1;
    1e26:	2001      	movs	r0, #1
    1e28:	e7f9      	b.n	1e1e <mcp23008_interface_i2c_read+0xa>
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	0000122d 	.word	0x0000122d
    1e30:	00003790 	.word	0x00003790
    1e34:	00001dbd 	.word	0x00001dbd

00001e38 <mcp23008_interface_i2c_write>:
uint8_t mcp23008_interface_i2c_write(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
    1e38:	b510      	push	{r4, lr}
    if(i2c_write(u8Addr, pBuf, u8Length) !=  0)
    1e3a:	4b05      	ldr	r3, [pc, #20]	; (1e50 <mcp23008_interface_i2c_write+0x18>)
    1e3c:	4798      	blx	r3
    1e3e:	2800      	cmp	r0, #0
    1e40:	d100      	bne.n	1e44 <mcp23008_interface_i2c_write+0xc>
}
    1e42:	bd10      	pop	{r4, pc}
	    mcp23008_interface_debug_print("i2c write failed, check the i2c address or wiring\n");
    1e44:	4803      	ldr	r0, [pc, #12]	; (1e54 <mcp23008_interface_i2c_write+0x1c>)
    1e46:	4b04      	ldr	r3, [pc, #16]	; (1e58 <mcp23008_interface_i2c_write+0x20>)
    1e48:	4798      	blx	r3
	    return 1;
    1e4a:	2001      	movs	r0, #1
    1e4c:	e7f9      	b.n	1e42 <mcp23008_interface_i2c_write+0xa>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	00001279 	.word	0x00001279
    1e54:	00003790 	.word	0x00003790
    1e58:	00001dbd 	.word	0x00001dbd

00001e5c <mcp23008_interface_receive_callback>:
/**
 * @brief     interface receive callback
 * @param[in] type is the interrupt type
 * @note      none
 */
void mcp23008_interface_receive_callback(uint8_t type) {
    1e5c:	b510      	push	{r4, lr}
    /*call your interrupt callback function here*/
    /*user code begin */
    switch (type) {
    1e5e:	2807      	cmp	r0, #7
    1e60:	d800      	bhi.n	1e64 <mcp23008_interface_receive_callback+0x8>
            break;
    }

    /*user code end*/

}
    1e62:	bd10      	pop	{r4, pc}
            mcp23008_interface_debug_print("mcp23008:false interrupt t\n");
    1e64:	4801      	ldr	r0, [pc, #4]	; (1e6c <mcp23008_interface_receive_callback+0x10>)
    1e66:	4b02      	ldr	r3, [pc, #8]	; (1e70 <mcp23008_interface_receive_callback+0x14>)
    1e68:	4798      	blx	r3
}
    1e6a:	e7fa      	b.n	1e62 <mcp23008_interface_receive_callback+0x6>
    1e6c:	000037c4 	.word	0x000037c4
    1e70:	00001dbd 	.word	0x00001dbd

00001e74 <__udivsi3>:
    1e74:	2200      	movs	r2, #0
    1e76:	0843      	lsrs	r3, r0, #1
    1e78:	428b      	cmp	r3, r1
    1e7a:	d374      	bcc.n	1f66 <__udivsi3+0xf2>
    1e7c:	0903      	lsrs	r3, r0, #4
    1e7e:	428b      	cmp	r3, r1
    1e80:	d35f      	bcc.n	1f42 <__udivsi3+0xce>
    1e82:	0a03      	lsrs	r3, r0, #8
    1e84:	428b      	cmp	r3, r1
    1e86:	d344      	bcc.n	1f12 <__udivsi3+0x9e>
    1e88:	0b03      	lsrs	r3, r0, #12
    1e8a:	428b      	cmp	r3, r1
    1e8c:	d328      	bcc.n	1ee0 <__udivsi3+0x6c>
    1e8e:	0c03      	lsrs	r3, r0, #16
    1e90:	428b      	cmp	r3, r1
    1e92:	d30d      	bcc.n	1eb0 <__udivsi3+0x3c>
    1e94:	22ff      	movs	r2, #255	; 0xff
    1e96:	0209      	lsls	r1, r1, #8
    1e98:	ba12      	rev	r2, r2
    1e9a:	0c03      	lsrs	r3, r0, #16
    1e9c:	428b      	cmp	r3, r1
    1e9e:	d302      	bcc.n	1ea6 <__udivsi3+0x32>
    1ea0:	1212      	asrs	r2, r2, #8
    1ea2:	0209      	lsls	r1, r1, #8
    1ea4:	d065      	beq.n	1f72 <__udivsi3+0xfe>
    1ea6:	0b03      	lsrs	r3, r0, #12
    1ea8:	428b      	cmp	r3, r1
    1eaa:	d319      	bcc.n	1ee0 <__udivsi3+0x6c>
    1eac:	e000      	b.n	1eb0 <__udivsi3+0x3c>
    1eae:	0a09      	lsrs	r1, r1, #8
    1eb0:	0bc3      	lsrs	r3, r0, #15
    1eb2:	428b      	cmp	r3, r1
    1eb4:	d301      	bcc.n	1eba <__udivsi3+0x46>
    1eb6:	03cb      	lsls	r3, r1, #15
    1eb8:	1ac0      	subs	r0, r0, r3
    1eba:	4152      	adcs	r2, r2
    1ebc:	0b83      	lsrs	r3, r0, #14
    1ebe:	428b      	cmp	r3, r1
    1ec0:	d301      	bcc.n	1ec6 <__udivsi3+0x52>
    1ec2:	038b      	lsls	r3, r1, #14
    1ec4:	1ac0      	subs	r0, r0, r3
    1ec6:	4152      	adcs	r2, r2
    1ec8:	0b43      	lsrs	r3, r0, #13
    1eca:	428b      	cmp	r3, r1
    1ecc:	d301      	bcc.n	1ed2 <__udivsi3+0x5e>
    1ece:	034b      	lsls	r3, r1, #13
    1ed0:	1ac0      	subs	r0, r0, r3
    1ed2:	4152      	adcs	r2, r2
    1ed4:	0b03      	lsrs	r3, r0, #12
    1ed6:	428b      	cmp	r3, r1
    1ed8:	d301      	bcc.n	1ede <__udivsi3+0x6a>
    1eda:	030b      	lsls	r3, r1, #12
    1edc:	1ac0      	subs	r0, r0, r3
    1ede:	4152      	adcs	r2, r2
    1ee0:	0ac3      	lsrs	r3, r0, #11
    1ee2:	428b      	cmp	r3, r1
    1ee4:	d301      	bcc.n	1eea <__udivsi3+0x76>
    1ee6:	02cb      	lsls	r3, r1, #11
    1ee8:	1ac0      	subs	r0, r0, r3
    1eea:	4152      	adcs	r2, r2
    1eec:	0a83      	lsrs	r3, r0, #10
    1eee:	428b      	cmp	r3, r1
    1ef0:	d301      	bcc.n	1ef6 <__udivsi3+0x82>
    1ef2:	028b      	lsls	r3, r1, #10
    1ef4:	1ac0      	subs	r0, r0, r3
    1ef6:	4152      	adcs	r2, r2
    1ef8:	0a43      	lsrs	r3, r0, #9
    1efa:	428b      	cmp	r3, r1
    1efc:	d301      	bcc.n	1f02 <__udivsi3+0x8e>
    1efe:	024b      	lsls	r3, r1, #9
    1f00:	1ac0      	subs	r0, r0, r3
    1f02:	4152      	adcs	r2, r2
    1f04:	0a03      	lsrs	r3, r0, #8
    1f06:	428b      	cmp	r3, r1
    1f08:	d301      	bcc.n	1f0e <__udivsi3+0x9a>
    1f0a:	020b      	lsls	r3, r1, #8
    1f0c:	1ac0      	subs	r0, r0, r3
    1f0e:	4152      	adcs	r2, r2
    1f10:	d2cd      	bcs.n	1eae <__udivsi3+0x3a>
    1f12:	09c3      	lsrs	r3, r0, #7
    1f14:	428b      	cmp	r3, r1
    1f16:	d301      	bcc.n	1f1c <__udivsi3+0xa8>
    1f18:	01cb      	lsls	r3, r1, #7
    1f1a:	1ac0      	subs	r0, r0, r3
    1f1c:	4152      	adcs	r2, r2
    1f1e:	0983      	lsrs	r3, r0, #6
    1f20:	428b      	cmp	r3, r1
    1f22:	d301      	bcc.n	1f28 <__udivsi3+0xb4>
    1f24:	018b      	lsls	r3, r1, #6
    1f26:	1ac0      	subs	r0, r0, r3
    1f28:	4152      	adcs	r2, r2
    1f2a:	0943      	lsrs	r3, r0, #5
    1f2c:	428b      	cmp	r3, r1
    1f2e:	d301      	bcc.n	1f34 <__udivsi3+0xc0>
    1f30:	014b      	lsls	r3, r1, #5
    1f32:	1ac0      	subs	r0, r0, r3
    1f34:	4152      	adcs	r2, r2
    1f36:	0903      	lsrs	r3, r0, #4
    1f38:	428b      	cmp	r3, r1
    1f3a:	d301      	bcc.n	1f40 <__udivsi3+0xcc>
    1f3c:	010b      	lsls	r3, r1, #4
    1f3e:	1ac0      	subs	r0, r0, r3
    1f40:	4152      	adcs	r2, r2
    1f42:	08c3      	lsrs	r3, r0, #3
    1f44:	428b      	cmp	r3, r1
    1f46:	d301      	bcc.n	1f4c <__udivsi3+0xd8>
    1f48:	00cb      	lsls	r3, r1, #3
    1f4a:	1ac0      	subs	r0, r0, r3
    1f4c:	4152      	adcs	r2, r2
    1f4e:	0883      	lsrs	r3, r0, #2
    1f50:	428b      	cmp	r3, r1
    1f52:	d301      	bcc.n	1f58 <__udivsi3+0xe4>
    1f54:	008b      	lsls	r3, r1, #2
    1f56:	1ac0      	subs	r0, r0, r3
    1f58:	4152      	adcs	r2, r2
    1f5a:	0843      	lsrs	r3, r0, #1
    1f5c:	428b      	cmp	r3, r1
    1f5e:	d301      	bcc.n	1f64 <__udivsi3+0xf0>
    1f60:	004b      	lsls	r3, r1, #1
    1f62:	1ac0      	subs	r0, r0, r3
    1f64:	4152      	adcs	r2, r2
    1f66:	1a41      	subs	r1, r0, r1
    1f68:	d200      	bcs.n	1f6c <__udivsi3+0xf8>
    1f6a:	4601      	mov	r1, r0
    1f6c:	4152      	adcs	r2, r2
    1f6e:	4610      	mov	r0, r2
    1f70:	4770      	bx	lr
    1f72:	e7ff      	b.n	1f74 <__udivsi3+0x100>
    1f74:	b501      	push	{r0, lr}
    1f76:	2000      	movs	r0, #0
    1f78:	f000 f806 	bl	1f88 <__aeabi_idiv0>
    1f7c:	bd02      	pop	{r1, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)

00001f80 <__aeabi_uidivmod>:
    1f80:	2900      	cmp	r1, #0
    1f82:	d0f7      	beq.n	1f74 <__udivsi3+0x100>
    1f84:	e776      	b.n	1e74 <__udivsi3>
    1f86:	4770      	bx	lr

00001f88 <__aeabi_idiv0>:
    1f88:	4770      	bx	lr
    1f8a:	46c0      	nop			; (mov r8, r8)

00001f8c <__aeabi_f2uiz>:
    1f8c:	219e      	movs	r1, #158	; 0x9e
    1f8e:	b510      	push	{r4, lr}
    1f90:	05c9      	lsls	r1, r1, #23
    1f92:	1c04      	adds	r4, r0, #0
    1f94:	f000 fbe8 	bl	2768 <__aeabi_fcmpge>
    1f98:	2800      	cmp	r0, #0
    1f9a:	d103      	bne.n	1fa4 <__aeabi_f2uiz+0x18>
    1f9c:	1c20      	adds	r0, r4, #0
    1f9e:	f000 faf1 	bl	2584 <__aeabi_f2iz>
    1fa2:	bd10      	pop	{r4, pc}
    1fa4:	219e      	movs	r1, #158	; 0x9e
    1fa6:	1c20      	adds	r0, r4, #0
    1fa8:	05c9      	lsls	r1, r1, #23
    1faa:	f000 f94f 	bl	224c <__aeabi_fsub>
    1fae:	f000 fae9 	bl	2584 <__aeabi_f2iz>
    1fb2:	2380      	movs	r3, #128	; 0x80
    1fb4:	061b      	lsls	r3, r3, #24
    1fb6:	469c      	mov	ip, r3
    1fb8:	4460      	add	r0, ip
    1fba:	e7f2      	b.n	1fa2 <__aeabi_f2uiz+0x16>

00001fbc <__aeabi_fdiv>:
    1fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fbe:	4657      	mov	r7, sl
    1fc0:	464e      	mov	r6, r9
    1fc2:	46de      	mov	lr, fp
    1fc4:	4645      	mov	r5, r8
    1fc6:	b5e0      	push	{r5, r6, r7, lr}
    1fc8:	0244      	lsls	r4, r0, #9
    1fca:	0043      	lsls	r3, r0, #1
    1fcc:	0fc6      	lsrs	r6, r0, #31
    1fce:	b083      	sub	sp, #12
    1fd0:	1c0f      	adds	r7, r1, #0
    1fd2:	0a64      	lsrs	r4, r4, #9
    1fd4:	0e1b      	lsrs	r3, r3, #24
    1fd6:	46b2      	mov	sl, r6
    1fd8:	d053      	beq.n	2082 <STACK_SIZE+0x82>
    1fda:	2bff      	cmp	r3, #255	; 0xff
    1fdc:	d027      	beq.n	202e <STACK_SIZE+0x2e>
    1fde:	2280      	movs	r2, #128	; 0x80
    1fe0:	00e4      	lsls	r4, r4, #3
    1fe2:	04d2      	lsls	r2, r2, #19
    1fe4:	4314      	orrs	r4, r2
    1fe6:	227f      	movs	r2, #127	; 0x7f
    1fe8:	4252      	negs	r2, r2
    1fea:	4690      	mov	r8, r2
    1fec:	4498      	add	r8, r3
    1fee:	2300      	movs	r3, #0
    1ff0:	4699      	mov	r9, r3
    1ff2:	469b      	mov	fp, r3
    1ff4:	027d      	lsls	r5, r7, #9
    1ff6:	0078      	lsls	r0, r7, #1
    1ff8:	0ffb      	lsrs	r3, r7, #31
    1ffa:	0a6d      	lsrs	r5, r5, #9
    1ffc:	0e00      	lsrs	r0, r0, #24
    1ffe:	9300      	str	r3, [sp, #0]
    2000:	d024      	beq.n	204c <STACK_SIZE+0x4c>
    2002:	28ff      	cmp	r0, #255	; 0xff
    2004:	d046      	beq.n	2094 <STACK_SIZE+0x94>
    2006:	2380      	movs	r3, #128	; 0x80
    2008:	2100      	movs	r1, #0
    200a:	00ed      	lsls	r5, r5, #3
    200c:	04db      	lsls	r3, r3, #19
    200e:	431d      	orrs	r5, r3
    2010:	387f      	subs	r0, #127	; 0x7f
    2012:	4647      	mov	r7, r8
    2014:	1a38      	subs	r0, r7, r0
    2016:	464f      	mov	r7, r9
    2018:	430f      	orrs	r7, r1
    201a:	00bf      	lsls	r7, r7, #2
    201c:	46b9      	mov	r9, r7
    201e:	0033      	movs	r3, r6
    2020:	9a00      	ldr	r2, [sp, #0]
    2022:	4f87      	ldr	r7, [pc, #540]	; (2240 <STACK_SIZE+0x240>)
    2024:	4053      	eors	r3, r2
    2026:	464a      	mov	r2, r9
    2028:	58ba      	ldr	r2, [r7, r2]
    202a:	9301      	str	r3, [sp, #4]
    202c:	4697      	mov	pc, r2
    202e:	2c00      	cmp	r4, #0
    2030:	d14e      	bne.n	20d0 <STACK_SIZE+0xd0>
    2032:	2308      	movs	r3, #8
    2034:	4699      	mov	r9, r3
    2036:	33f7      	adds	r3, #247	; 0xf7
    2038:	4698      	mov	r8, r3
    203a:	3bfd      	subs	r3, #253	; 0xfd
    203c:	469b      	mov	fp, r3
    203e:	027d      	lsls	r5, r7, #9
    2040:	0078      	lsls	r0, r7, #1
    2042:	0ffb      	lsrs	r3, r7, #31
    2044:	0a6d      	lsrs	r5, r5, #9
    2046:	0e00      	lsrs	r0, r0, #24
    2048:	9300      	str	r3, [sp, #0]
    204a:	d1da      	bne.n	2002 <STACK_SIZE+0x2>
    204c:	2d00      	cmp	r5, #0
    204e:	d126      	bne.n	209e <STACK_SIZE+0x9e>
    2050:	2000      	movs	r0, #0
    2052:	2101      	movs	r1, #1
    2054:	0033      	movs	r3, r6
    2056:	9a00      	ldr	r2, [sp, #0]
    2058:	4f7a      	ldr	r7, [pc, #488]	; (2244 <STACK_SIZE+0x244>)
    205a:	4053      	eors	r3, r2
    205c:	4642      	mov	r2, r8
    205e:	1a10      	subs	r0, r2, r0
    2060:	464a      	mov	r2, r9
    2062:	430a      	orrs	r2, r1
    2064:	0092      	lsls	r2, r2, #2
    2066:	58ba      	ldr	r2, [r7, r2]
    2068:	001d      	movs	r5, r3
    206a:	4697      	mov	pc, r2
    206c:	9b00      	ldr	r3, [sp, #0]
    206e:	002c      	movs	r4, r5
    2070:	469a      	mov	sl, r3
    2072:	468b      	mov	fp, r1
    2074:	465b      	mov	r3, fp
    2076:	2b02      	cmp	r3, #2
    2078:	d131      	bne.n	20de <STACK_SIZE+0xde>
    207a:	4653      	mov	r3, sl
    207c:	21ff      	movs	r1, #255	; 0xff
    207e:	2400      	movs	r4, #0
    2080:	e038      	b.n	20f4 <STACK_SIZE+0xf4>
    2082:	2c00      	cmp	r4, #0
    2084:	d117      	bne.n	20b6 <STACK_SIZE+0xb6>
    2086:	2304      	movs	r3, #4
    2088:	4699      	mov	r9, r3
    208a:	2300      	movs	r3, #0
    208c:	4698      	mov	r8, r3
    208e:	3301      	adds	r3, #1
    2090:	469b      	mov	fp, r3
    2092:	e7af      	b.n	1ff4 <__aeabi_fdiv+0x38>
    2094:	20ff      	movs	r0, #255	; 0xff
    2096:	2d00      	cmp	r5, #0
    2098:	d10b      	bne.n	20b2 <STACK_SIZE+0xb2>
    209a:	2102      	movs	r1, #2
    209c:	e7da      	b.n	2054 <STACK_SIZE+0x54>
    209e:	0028      	movs	r0, r5
    20a0:	f000 fb6c 	bl	277c <__clzsi2>
    20a4:	1f43      	subs	r3, r0, #5
    20a6:	409d      	lsls	r5, r3
    20a8:	2376      	movs	r3, #118	; 0x76
    20aa:	425b      	negs	r3, r3
    20ac:	1a18      	subs	r0, r3, r0
    20ae:	2100      	movs	r1, #0
    20b0:	e7af      	b.n	2012 <STACK_SIZE+0x12>
    20b2:	2103      	movs	r1, #3
    20b4:	e7ad      	b.n	2012 <STACK_SIZE+0x12>
    20b6:	0020      	movs	r0, r4
    20b8:	f000 fb60 	bl	277c <__clzsi2>
    20bc:	1f43      	subs	r3, r0, #5
    20be:	409c      	lsls	r4, r3
    20c0:	2376      	movs	r3, #118	; 0x76
    20c2:	425b      	negs	r3, r3
    20c4:	1a1b      	subs	r3, r3, r0
    20c6:	4698      	mov	r8, r3
    20c8:	2300      	movs	r3, #0
    20ca:	4699      	mov	r9, r3
    20cc:	469b      	mov	fp, r3
    20ce:	e791      	b.n	1ff4 <__aeabi_fdiv+0x38>
    20d0:	230c      	movs	r3, #12
    20d2:	4699      	mov	r9, r3
    20d4:	33f3      	adds	r3, #243	; 0xf3
    20d6:	4698      	mov	r8, r3
    20d8:	3bfc      	subs	r3, #252	; 0xfc
    20da:	469b      	mov	fp, r3
    20dc:	e78a      	b.n	1ff4 <__aeabi_fdiv+0x38>
    20de:	2b03      	cmp	r3, #3
    20e0:	d100      	bne.n	20e4 <STACK_SIZE+0xe4>
    20e2:	e0a5      	b.n	2230 <STACK_SIZE+0x230>
    20e4:	4655      	mov	r5, sl
    20e6:	2b01      	cmp	r3, #1
    20e8:	d000      	beq.n	20ec <STACK_SIZE+0xec>
    20ea:	e081      	b.n	21f0 <STACK_SIZE+0x1f0>
    20ec:	2301      	movs	r3, #1
    20ee:	2100      	movs	r1, #0
    20f0:	2400      	movs	r4, #0
    20f2:	402b      	ands	r3, r5
    20f4:	0264      	lsls	r4, r4, #9
    20f6:	05c9      	lsls	r1, r1, #23
    20f8:	0a60      	lsrs	r0, r4, #9
    20fa:	07db      	lsls	r3, r3, #31
    20fc:	4308      	orrs	r0, r1
    20fe:	4318      	orrs	r0, r3
    2100:	b003      	add	sp, #12
    2102:	bc3c      	pop	{r2, r3, r4, r5}
    2104:	4690      	mov	r8, r2
    2106:	4699      	mov	r9, r3
    2108:	46a2      	mov	sl, r4
    210a:	46ab      	mov	fp, r5
    210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    210e:	2480      	movs	r4, #128	; 0x80
    2110:	2300      	movs	r3, #0
    2112:	03e4      	lsls	r4, r4, #15
    2114:	21ff      	movs	r1, #255	; 0xff
    2116:	e7ed      	b.n	20f4 <STACK_SIZE+0xf4>
    2118:	21ff      	movs	r1, #255	; 0xff
    211a:	2400      	movs	r4, #0
    211c:	e7ea      	b.n	20f4 <STACK_SIZE+0xf4>
    211e:	2301      	movs	r3, #1
    2120:	1a59      	subs	r1, r3, r1
    2122:	291b      	cmp	r1, #27
    2124:	dd66      	ble.n	21f4 <STACK_SIZE+0x1f4>
    2126:	9a01      	ldr	r2, [sp, #4]
    2128:	4013      	ands	r3, r2
    212a:	2100      	movs	r1, #0
    212c:	2400      	movs	r4, #0
    212e:	e7e1      	b.n	20f4 <STACK_SIZE+0xf4>
    2130:	2380      	movs	r3, #128	; 0x80
    2132:	03db      	lsls	r3, r3, #15
    2134:	421c      	tst	r4, r3
    2136:	d038      	beq.n	21aa <STACK_SIZE+0x1aa>
    2138:	421d      	tst	r5, r3
    213a:	d051      	beq.n	21e0 <STACK_SIZE+0x1e0>
    213c:	431c      	orrs	r4, r3
    213e:	0264      	lsls	r4, r4, #9
    2140:	0a64      	lsrs	r4, r4, #9
    2142:	0033      	movs	r3, r6
    2144:	21ff      	movs	r1, #255	; 0xff
    2146:	e7d5      	b.n	20f4 <STACK_SIZE+0xf4>
    2148:	0163      	lsls	r3, r4, #5
    214a:	016c      	lsls	r4, r5, #5
    214c:	42a3      	cmp	r3, r4
    214e:	d23b      	bcs.n	21c8 <STACK_SIZE+0x1c8>
    2150:	261b      	movs	r6, #27
    2152:	2100      	movs	r1, #0
    2154:	3801      	subs	r0, #1
    2156:	2501      	movs	r5, #1
    2158:	001f      	movs	r7, r3
    215a:	0049      	lsls	r1, r1, #1
    215c:	005b      	lsls	r3, r3, #1
    215e:	2f00      	cmp	r7, #0
    2160:	db01      	blt.n	2166 <STACK_SIZE+0x166>
    2162:	429c      	cmp	r4, r3
    2164:	d801      	bhi.n	216a <STACK_SIZE+0x16a>
    2166:	1b1b      	subs	r3, r3, r4
    2168:	4329      	orrs	r1, r5
    216a:	3e01      	subs	r6, #1
    216c:	2e00      	cmp	r6, #0
    216e:	d1f3      	bne.n	2158 <STACK_SIZE+0x158>
    2170:	001c      	movs	r4, r3
    2172:	1e63      	subs	r3, r4, #1
    2174:	419c      	sbcs	r4, r3
    2176:	430c      	orrs	r4, r1
    2178:	0001      	movs	r1, r0
    217a:	317f      	adds	r1, #127	; 0x7f
    217c:	2900      	cmp	r1, #0
    217e:	ddce      	ble.n	211e <STACK_SIZE+0x11e>
    2180:	0763      	lsls	r3, r4, #29
    2182:	d004      	beq.n	218e <STACK_SIZE+0x18e>
    2184:	230f      	movs	r3, #15
    2186:	4023      	ands	r3, r4
    2188:	2b04      	cmp	r3, #4
    218a:	d000      	beq.n	218e <STACK_SIZE+0x18e>
    218c:	3404      	adds	r4, #4
    218e:	0123      	lsls	r3, r4, #4
    2190:	d503      	bpl.n	219a <STACK_SIZE+0x19a>
    2192:	0001      	movs	r1, r0
    2194:	4b2c      	ldr	r3, [pc, #176]	; (2248 <STACK_SIZE+0x248>)
    2196:	3180      	adds	r1, #128	; 0x80
    2198:	401c      	ands	r4, r3
    219a:	29fe      	cmp	r1, #254	; 0xfe
    219c:	dd0d      	ble.n	21ba <STACK_SIZE+0x1ba>
    219e:	2301      	movs	r3, #1
    21a0:	9a01      	ldr	r2, [sp, #4]
    21a2:	21ff      	movs	r1, #255	; 0xff
    21a4:	4013      	ands	r3, r2
    21a6:	2400      	movs	r4, #0
    21a8:	e7a4      	b.n	20f4 <STACK_SIZE+0xf4>
    21aa:	2380      	movs	r3, #128	; 0x80
    21ac:	03db      	lsls	r3, r3, #15
    21ae:	431c      	orrs	r4, r3
    21b0:	0264      	lsls	r4, r4, #9
    21b2:	0a64      	lsrs	r4, r4, #9
    21b4:	0033      	movs	r3, r6
    21b6:	21ff      	movs	r1, #255	; 0xff
    21b8:	e79c      	b.n	20f4 <STACK_SIZE+0xf4>
    21ba:	2301      	movs	r3, #1
    21bc:	9a01      	ldr	r2, [sp, #4]
    21be:	01a4      	lsls	r4, r4, #6
    21c0:	0a64      	lsrs	r4, r4, #9
    21c2:	b2c9      	uxtb	r1, r1
    21c4:	4013      	ands	r3, r2
    21c6:	e795      	b.n	20f4 <STACK_SIZE+0xf4>
    21c8:	1b1b      	subs	r3, r3, r4
    21ca:	261a      	movs	r6, #26
    21cc:	2101      	movs	r1, #1
    21ce:	e7c2      	b.n	2156 <STACK_SIZE+0x156>
    21d0:	9b00      	ldr	r3, [sp, #0]
    21d2:	468b      	mov	fp, r1
    21d4:	469a      	mov	sl, r3
    21d6:	2400      	movs	r4, #0
    21d8:	e74c      	b.n	2074 <STACK_SIZE+0x74>
    21da:	0263      	lsls	r3, r4, #9
    21dc:	d5e5      	bpl.n	21aa <STACK_SIZE+0x1aa>
    21de:	2500      	movs	r5, #0
    21e0:	2480      	movs	r4, #128	; 0x80
    21e2:	03e4      	lsls	r4, r4, #15
    21e4:	432c      	orrs	r4, r5
    21e6:	0264      	lsls	r4, r4, #9
    21e8:	0a64      	lsrs	r4, r4, #9
    21ea:	9b00      	ldr	r3, [sp, #0]
    21ec:	21ff      	movs	r1, #255	; 0xff
    21ee:	e781      	b.n	20f4 <STACK_SIZE+0xf4>
    21f0:	9501      	str	r5, [sp, #4]
    21f2:	e7c1      	b.n	2178 <STACK_SIZE+0x178>
    21f4:	0023      	movs	r3, r4
    21f6:	2020      	movs	r0, #32
    21f8:	40cb      	lsrs	r3, r1
    21fa:	1a41      	subs	r1, r0, r1
    21fc:	408c      	lsls	r4, r1
    21fe:	1e61      	subs	r1, r4, #1
    2200:	418c      	sbcs	r4, r1
    2202:	431c      	orrs	r4, r3
    2204:	0763      	lsls	r3, r4, #29
    2206:	d004      	beq.n	2212 <STACK_SIZE+0x212>
    2208:	230f      	movs	r3, #15
    220a:	4023      	ands	r3, r4
    220c:	2b04      	cmp	r3, #4
    220e:	d000      	beq.n	2212 <STACK_SIZE+0x212>
    2210:	3404      	adds	r4, #4
    2212:	0163      	lsls	r3, r4, #5
    2214:	d505      	bpl.n	2222 <STACK_SIZE+0x222>
    2216:	2301      	movs	r3, #1
    2218:	9a01      	ldr	r2, [sp, #4]
    221a:	2101      	movs	r1, #1
    221c:	4013      	ands	r3, r2
    221e:	2400      	movs	r4, #0
    2220:	e768      	b.n	20f4 <STACK_SIZE+0xf4>
    2222:	2301      	movs	r3, #1
    2224:	9a01      	ldr	r2, [sp, #4]
    2226:	01a4      	lsls	r4, r4, #6
    2228:	0a64      	lsrs	r4, r4, #9
    222a:	4013      	ands	r3, r2
    222c:	2100      	movs	r1, #0
    222e:	e761      	b.n	20f4 <STACK_SIZE+0xf4>
    2230:	2380      	movs	r3, #128	; 0x80
    2232:	03db      	lsls	r3, r3, #15
    2234:	431c      	orrs	r4, r3
    2236:	0264      	lsls	r4, r4, #9
    2238:	0a64      	lsrs	r4, r4, #9
    223a:	4653      	mov	r3, sl
    223c:	21ff      	movs	r1, #255	; 0xff
    223e:	e759      	b.n	20f4 <STACK_SIZE+0xf4>
    2240:	000037e0 	.word	0x000037e0
    2244:	00003820 	.word	0x00003820
    2248:	f7ffffff 	.word	0xf7ffffff

0000224c <__aeabi_fsub>:
    224c:	b5f0      	push	{r4, r5, r6, r7, lr}
    224e:	464f      	mov	r7, r9
    2250:	46d6      	mov	lr, sl
    2252:	4646      	mov	r6, r8
    2254:	0044      	lsls	r4, r0, #1
    2256:	b5c0      	push	{r6, r7, lr}
    2258:	0fc2      	lsrs	r2, r0, #31
    225a:	0247      	lsls	r7, r0, #9
    225c:	0248      	lsls	r0, r1, #9
    225e:	0a40      	lsrs	r0, r0, #9
    2260:	4684      	mov	ip, r0
    2262:	4666      	mov	r6, ip
    2264:	0a7b      	lsrs	r3, r7, #9
    2266:	0048      	lsls	r0, r1, #1
    2268:	0fc9      	lsrs	r1, r1, #31
    226a:	469a      	mov	sl, r3
    226c:	0e24      	lsrs	r4, r4, #24
    226e:	0015      	movs	r5, r2
    2270:	00db      	lsls	r3, r3, #3
    2272:	0e00      	lsrs	r0, r0, #24
    2274:	4689      	mov	r9, r1
    2276:	00f6      	lsls	r6, r6, #3
    2278:	28ff      	cmp	r0, #255	; 0xff
    227a:	d100      	bne.n	227e <__aeabi_fsub+0x32>
    227c:	e08f      	b.n	239e <__aeabi_fsub+0x152>
    227e:	2101      	movs	r1, #1
    2280:	464f      	mov	r7, r9
    2282:	404f      	eors	r7, r1
    2284:	0039      	movs	r1, r7
    2286:	4291      	cmp	r1, r2
    2288:	d066      	beq.n	2358 <__aeabi_fsub+0x10c>
    228a:	1a22      	subs	r2, r4, r0
    228c:	2a00      	cmp	r2, #0
    228e:	dc00      	bgt.n	2292 <__aeabi_fsub+0x46>
    2290:	e09d      	b.n	23ce <__aeabi_fsub+0x182>
    2292:	2800      	cmp	r0, #0
    2294:	d13d      	bne.n	2312 <__aeabi_fsub+0xc6>
    2296:	2e00      	cmp	r6, #0
    2298:	d100      	bne.n	229c <__aeabi_fsub+0x50>
    229a:	e08b      	b.n	23b4 <__aeabi_fsub+0x168>
    229c:	1e51      	subs	r1, r2, #1
    229e:	2900      	cmp	r1, #0
    22a0:	d000      	beq.n	22a4 <__aeabi_fsub+0x58>
    22a2:	e0b5      	b.n	2410 <__aeabi_fsub+0x1c4>
    22a4:	2401      	movs	r4, #1
    22a6:	1b9b      	subs	r3, r3, r6
    22a8:	015a      	lsls	r2, r3, #5
    22aa:	d544      	bpl.n	2336 <__aeabi_fsub+0xea>
    22ac:	019b      	lsls	r3, r3, #6
    22ae:	099f      	lsrs	r7, r3, #6
    22b0:	0038      	movs	r0, r7
    22b2:	f000 fa63 	bl	277c <__clzsi2>
    22b6:	3805      	subs	r0, #5
    22b8:	4087      	lsls	r7, r0
    22ba:	4284      	cmp	r4, r0
    22bc:	dd00      	ble.n	22c0 <__aeabi_fsub+0x74>
    22be:	e096      	b.n	23ee <__aeabi_fsub+0x1a2>
    22c0:	1b04      	subs	r4, r0, r4
    22c2:	003a      	movs	r2, r7
    22c4:	2020      	movs	r0, #32
    22c6:	3401      	adds	r4, #1
    22c8:	40e2      	lsrs	r2, r4
    22ca:	1b04      	subs	r4, r0, r4
    22cc:	40a7      	lsls	r7, r4
    22ce:	003b      	movs	r3, r7
    22d0:	1e5f      	subs	r7, r3, #1
    22d2:	41bb      	sbcs	r3, r7
    22d4:	2400      	movs	r4, #0
    22d6:	4313      	orrs	r3, r2
    22d8:	075a      	lsls	r2, r3, #29
    22da:	d004      	beq.n	22e6 <__aeabi_fsub+0x9a>
    22dc:	220f      	movs	r2, #15
    22de:	401a      	ands	r2, r3
    22e0:	2a04      	cmp	r2, #4
    22e2:	d000      	beq.n	22e6 <__aeabi_fsub+0x9a>
    22e4:	3304      	adds	r3, #4
    22e6:	015a      	lsls	r2, r3, #5
    22e8:	d527      	bpl.n	233a <__aeabi_fsub+0xee>
    22ea:	3401      	adds	r4, #1
    22ec:	2cff      	cmp	r4, #255	; 0xff
    22ee:	d100      	bne.n	22f2 <__aeabi_fsub+0xa6>
    22f0:	e079      	b.n	23e6 <__aeabi_fsub+0x19a>
    22f2:	2201      	movs	r2, #1
    22f4:	019b      	lsls	r3, r3, #6
    22f6:	0a5b      	lsrs	r3, r3, #9
    22f8:	b2e4      	uxtb	r4, r4
    22fa:	402a      	ands	r2, r5
    22fc:	025b      	lsls	r3, r3, #9
    22fe:	05e4      	lsls	r4, r4, #23
    2300:	0a58      	lsrs	r0, r3, #9
    2302:	07d2      	lsls	r2, r2, #31
    2304:	4320      	orrs	r0, r4
    2306:	4310      	orrs	r0, r2
    2308:	bc1c      	pop	{r2, r3, r4}
    230a:	4690      	mov	r8, r2
    230c:	4699      	mov	r9, r3
    230e:	46a2      	mov	sl, r4
    2310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2312:	2cff      	cmp	r4, #255	; 0xff
    2314:	d0e0      	beq.n	22d8 <__aeabi_fsub+0x8c>
    2316:	2180      	movs	r1, #128	; 0x80
    2318:	04c9      	lsls	r1, r1, #19
    231a:	430e      	orrs	r6, r1
    231c:	2a1b      	cmp	r2, #27
    231e:	dc7b      	bgt.n	2418 <__aeabi_fsub+0x1cc>
    2320:	0031      	movs	r1, r6
    2322:	2020      	movs	r0, #32
    2324:	40d1      	lsrs	r1, r2
    2326:	1a82      	subs	r2, r0, r2
    2328:	4096      	lsls	r6, r2
    232a:	1e72      	subs	r2, r6, #1
    232c:	4196      	sbcs	r6, r2
    232e:	430e      	orrs	r6, r1
    2330:	1b9b      	subs	r3, r3, r6
    2332:	015a      	lsls	r2, r3, #5
    2334:	d4ba      	bmi.n	22ac <__aeabi_fsub+0x60>
    2336:	075a      	lsls	r2, r3, #29
    2338:	d1d0      	bne.n	22dc <__aeabi_fsub+0x90>
    233a:	2201      	movs	r2, #1
    233c:	08df      	lsrs	r7, r3, #3
    233e:	402a      	ands	r2, r5
    2340:	2cff      	cmp	r4, #255	; 0xff
    2342:	d133      	bne.n	23ac <__aeabi_fsub+0x160>
    2344:	2f00      	cmp	r7, #0
    2346:	d100      	bne.n	234a <__aeabi_fsub+0xfe>
    2348:	e0a8      	b.n	249c <__aeabi_fsub+0x250>
    234a:	2380      	movs	r3, #128	; 0x80
    234c:	03db      	lsls	r3, r3, #15
    234e:	433b      	orrs	r3, r7
    2350:	025b      	lsls	r3, r3, #9
    2352:	0a5b      	lsrs	r3, r3, #9
    2354:	24ff      	movs	r4, #255	; 0xff
    2356:	e7d1      	b.n	22fc <__aeabi_fsub+0xb0>
    2358:	1a21      	subs	r1, r4, r0
    235a:	2900      	cmp	r1, #0
    235c:	dd4c      	ble.n	23f8 <__aeabi_fsub+0x1ac>
    235e:	2800      	cmp	r0, #0
    2360:	d02a      	beq.n	23b8 <__aeabi_fsub+0x16c>
    2362:	2cff      	cmp	r4, #255	; 0xff
    2364:	d0b8      	beq.n	22d8 <__aeabi_fsub+0x8c>
    2366:	2080      	movs	r0, #128	; 0x80
    2368:	04c0      	lsls	r0, r0, #19
    236a:	4306      	orrs	r6, r0
    236c:	291b      	cmp	r1, #27
    236e:	dd00      	ble.n	2372 <__aeabi_fsub+0x126>
    2370:	e0af      	b.n	24d2 <__aeabi_fsub+0x286>
    2372:	0030      	movs	r0, r6
    2374:	2720      	movs	r7, #32
    2376:	40c8      	lsrs	r0, r1
    2378:	1a79      	subs	r1, r7, r1
    237a:	408e      	lsls	r6, r1
    237c:	1e71      	subs	r1, r6, #1
    237e:	418e      	sbcs	r6, r1
    2380:	4306      	orrs	r6, r0
    2382:	199b      	adds	r3, r3, r6
    2384:	0159      	lsls	r1, r3, #5
    2386:	d5d6      	bpl.n	2336 <__aeabi_fsub+0xea>
    2388:	3401      	adds	r4, #1
    238a:	2cff      	cmp	r4, #255	; 0xff
    238c:	d100      	bne.n	2390 <__aeabi_fsub+0x144>
    238e:	e085      	b.n	249c <__aeabi_fsub+0x250>
    2390:	2201      	movs	r2, #1
    2392:	497a      	ldr	r1, [pc, #488]	; (257c <__aeabi_fsub+0x330>)
    2394:	401a      	ands	r2, r3
    2396:	085b      	lsrs	r3, r3, #1
    2398:	400b      	ands	r3, r1
    239a:	4313      	orrs	r3, r2
    239c:	e79c      	b.n	22d8 <__aeabi_fsub+0x8c>
    239e:	2e00      	cmp	r6, #0
    23a0:	d000      	beq.n	23a4 <__aeabi_fsub+0x158>
    23a2:	e770      	b.n	2286 <__aeabi_fsub+0x3a>
    23a4:	e76b      	b.n	227e <__aeabi_fsub+0x32>
    23a6:	1e3b      	subs	r3, r7, #0
    23a8:	d1c5      	bne.n	2336 <__aeabi_fsub+0xea>
    23aa:	2200      	movs	r2, #0
    23ac:	027b      	lsls	r3, r7, #9
    23ae:	0a5b      	lsrs	r3, r3, #9
    23b0:	b2e4      	uxtb	r4, r4
    23b2:	e7a3      	b.n	22fc <__aeabi_fsub+0xb0>
    23b4:	0014      	movs	r4, r2
    23b6:	e78f      	b.n	22d8 <__aeabi_fsub+0x8c>
    23b8:	2e00      	cmp	r6, #0
    23ba:	d04d      	beq.n	2458 <__aeabi_fsub+0x20c>
    23bc:	1e48      	subs	r0, r1, #1
    23be:	2800      	cmp	r0, #0
    23c0:	d157      	bne.n	2472 <__aeabi_fsub+0x226>
    23c2:	199b      	adds	r3, r3, r6
    23c4:	2401      	movs	r4, #1
    23c6:	015a      	lsls	r2, r3, #5
    23c8:	d5b5      	bpl.n	2336 <__aeabi_fsub+0xea>
    23ca:	2402      	movs	r4, #2
    23cc:	e7e0      	b.n	2390 <__aeabi_fsub+0x144>
    23ce:	2a00      	cmp	r2, #0
    23d0:	d125      	bne.n	241e <__aeabi_fsub+0x1d2>
    23d2:	1c62      	adds	r2, r4, #1
    23d4:	b2d2      	uxtb	r2, r2
    23d6:	2a01      	cmp	r2, #1
    23d8:	dd72      	ble.n	24c0 <__aeabi_fsub+0x274>
    23da:	1b9f      	subs	r7, r3, r6
    23dc:	017a      	lsls	r2, r7, #5
    23de:	d535      	bpl.n	244c <__aeabi_fsub+0x200>
    23e0:	1af7      	subs	r7, r6, r3
    23e2:	000d      	movs	r5, r1
    23e4:	e764      	b.n	22b0 <__aeabi_fsub+0x64>
    23e6:	2201      	movs	r2, #1
    23e8:	2300      	movs	r3, #0
    23ea:	402a      	ands	r2, r5
    23ec:	e786      	b.n	22fc <__aeabi_fsub+0xb0>
    23ee:	003b      	movs	r3, r7
    23f0:	4a63      	ldr	r2, [pc, #396]	; (2580 <__aeabi_fsub+0x334>)
    23f2:	1a24      	subs	r4, r4, r0
    23f4:	4013      	ands	r3, r2
    23f6:	e76f      	b.n	22d8 <__aeabi_fsub+0x8c>
    23f8:	2900      	cmp	r1, #0
    23fa:	d16c      	bne.n	24d6 <__aeabi_fsub+0x28a>
    23fc:	1c61      	adds	r1, r4, #1
    23fe:	b2c8      	uxtb	r0, r1
    2400:	2801      	cmp	r0, #1
    2402:	dd4e      	ble.n	24a2 <__aeabi_fsub+0x256>
    2404:	29ff      	cmp	r1, #255	; 0xff
    2406:	d049      	beq.n	249c <__aeabi_fsub+0x250>
    2408:	199b      	adds	r3, r3, r6
    240a:	085b      	lsrs	r3, r3, #1
    240c:	000c      	movs	r4, r1
    240e:	e763      	b.n	22d8 <__aeabi_fsub+0x8c>
    2410:	2aff      	cmp	r2, #255	; 0xff
    2412:	d041      	beq.n	2498 <__aeabi_fsub+0x24c>
    2414:	000a      	movs	r2, r1
    2416:	e781      	b.n	231c <__aeabi_fsub+0xd0>
    2418:	2601      	movs	r6, #1
    241a:	1b9b      	subs	r3, r3, r6
    241c:	e789      	b.n	2332 <__aeabi_fsub+0xe6>
    241e:	2c00      	cmp	r4, #0
    2420:	d01c      	beq.n	245c <__aeabi_fsub+0x210>
    2422:	28ff      	cmp	r0, #255	; 0xff
    2424:	d021      	beq.n	246a <__aeabi_fsub+0x21e>
    2426:	2480      	movs	r4, #128	; 0x80
    2428:	04e4      	lsls	r4, r4, #19
    242a:	4252      	negs	r2, r2
    242c:	4323      	orrs	r3, r4
    242e:	2a1b      	cmp	r2, #27
    2430:	dd00      	ble.n	2434 <__aeabi_fsub+0x1e8>
    2432:	e096      	b.n	2562 <__aeabi_fsub+0x316>
    2434:	001c      	movs	r4, r3
    2436:	2520      	movs	r5, #32
    2438:	40d4      	lsrs	r4, r2
    243a:	1aaa      	subs	r2, r5, r2
    243c:	4093      	lsls	r3, r2
    243e:	1e5a      	subs	r2, r3, #1
    2440:	4193      	sbcs	r3, r2
    2442:	4323      	orrs	r3, r4
    2444:	1af3      	subs	r3, r6, r3
    2446:	0004      	movs	r4, r0
    2448:	000d      	movs	r5, r1
    244a:	e72d      	b.n	22a8 <__aeabi_fsub+0x5c>
    244c:	2f00      	cmp	r7, #0
    244e:	d000      	beq.n	2452 <__aeabi_fsub+0x206>
    2450:	e72e      	b.n	22b0 <__aeabi_fsub+0x64>
    2452:	2200      	movs	r2, #0
    2454:	2400      	movs	r4, #0
    2456:	e7a9      	b.n	23ac <__aeabi_fsub+0x160>
    2458:	000c      	movs	r4, r1
    245a:	e73d      	b.n	22d8 <__aeabi_fsub+0x8c>
    245c:	2b00      	cmp	r3, #0
    245e:	d058      	beq.n	2512 <__aeabi_fsub+0x2c6>
    2460:	43d2      	mvns	r2, r2
    2462:	2a00      	cmp	r2, #0
    2464:	d0ee      	beq.n	2444 <__aeabi_fsub+0x1f8>
    2466:	28ff      	cmp	r0, #255	; 0xff
    2468:	d1e1      	bne.n	242e <__aeabi_fsub+0x1e2>
    246a:	0033      	movs	r3, r6
    246c:	24ff      	movs	r4, #255	; 0xff
    246e:	000d      	movs	r5, r1
    2470:	e732      	b.n	22d8 <__aeabi_fsub+0x8c>
    2472:	29ff      	cmp	r1, #255	; 0xff
    2474:	d010      	beq.n	2498 <__aeabi_fsub+0x24c>
    2476:	0001      	movs	r1, r0
    2478:	e778      	b.n	236c <__aeabi_fsub+0x120>
    247a:	2b00      	cmp	r3, #0
    247c:	d06e      	beq.n	255c <__aeabi_fsub+0x310>
    247e:	24ff      	movs	r4, #255	; 0xff
    2480:	2e00      	cmp	r6, #0
    2482:	d100      	bne.n	2486 <__aeabi_fsub+0x23a>
    2484:	e728      	b.n	22d8 <__aeabi_fsub+0x8c>
    2486:	2280      	movs	r2, #128	; 0x80
    2488:	4651      	mov	r1, sl
    248a:	03d2      	lsls	r2, r2, #15
    248c:	4211      	tst	r1, r2
    248e:	d003      	beq.n	2498 <__aeabi_fsub+0x24c>
    2490:	4661      	mov	r1, ip
    2492:	4211      	tst	r1, r2
    2494:	d100      	bne.n	2498 <__aeabi_fsub+0x24c>
    2496:	0033      	movs	r3, r6
    2498:	24ff      	movs	r4, #255	; 0xff
    249a:	e71d      	b.n	22d8 <__aeabi_fsub+0x8c>
    249c:	24ff      	movs	r4, #255	; 0xff
    249e:	2300      	movs	r3, #0
    24a0:	e72c      	b.n	22fc <__aeabi_fsub+0xb0>
    24a2:	2c00      	cmp	r4, #0
    24a4:	d1e9      	bne.n	247a <__aeabi_fsub+0x22e>
    24a6:	2b00      	cmp	r3, #0
    24a8:	d063      	beq.n	2572 <__aeabi_fsub+0x326>
    24aa:	2e00      	cmp	r6, #0
    24ac:	d100      	bne.n	24b0 <__aeabi_fsub+0x264>
    24ae:	e713      	b.n	22d8 <__aeabi_fsub+0x8c>
    24b0:	199b      	adds	r3, r3, r6
    24b2:	015a      	lsls	r2, r3, #5
    24b4:	d400      	bmi.n	24b8 <__aeabi_fsub+0x26c>
    24b6:	e73e      	b.n	2336 <__aeabi_fsub+0xea>
    24b8:	4a31      	ldr	r2, [pc, #196]	; (2580 <__aeabi_fsub+0x334>)
    24ba:	000c      	movs	r4, r1
    24bc:	4013      	ands	r3, r2
    24be:	e70b      	b.n	22d8 <__aeabi_fsub+0x8c>
    24c0:	2c00      	cmp	r4, #0
    24c2:	d11e      	bne.n	2502 <__aeabi_fsub+0x2b6>
    24c4:	2b00      	cmp	r3, #0
    24c6:	d12f      	bne.n	2528 <__aeabi_fsub+0x2dc>
    24c8:	2e00      	cmp	r6, #0
    24ca:	d04f      	beq.n	256c <__aeabi_fsub+0x320>
    24cc:	0033      	movs	r3, r6
    24ce:	000d      	movs	r5, r1
    24d0:	e702      	b.n	22d8 <__aeabi_fsub+0x8c>
    24d2:	2601      	movs	r6, #1
    24d4:	e755      	b.n	2382 <__aeabi_fsub+0x136>
    24d6:	2c00      	cmp	r4, #0
    24d8:	d11f      	bne.n	251a <__aeabi_fsub+0x2ce>
    24da:	2b00      	cmp	r3, #0
    24dc:	d043      	beq.n	2566 <__aeabi_fsub+0x31a>
    24de:	43c9      	mvns	r1, r1
    24e0:	2900      	cmp	r1, #0
    24e2:	d00b      	beq.n	24fc <__aeabi_fsub+0x2b0>
    24e4:	28ff      	cmp	r0, #255	; 0xff
    24e6:	d039      	beq.n	255c <__aeabi_fsub+0x310>
    24e8:	291b      	cmp	r1, #27
    24ea:	dc44      	bgt.n	2576 <__aeabi_fsub+0x32a>
    24ec:	001c      	movs	r4, r3
    24ee:	2720      	movs	r7, #32
    24f0:	40cc      	lsrs	r4, r1
    24f2:	1a79      	subs	r1, r7, r1
    24f4:	408b      	lsls	r3, r1
    24f6:	1e59      	subs	r1, r3, #1
    24f8:	418b      	sbcs	r3, r1
    24fa:	4323      	orrs	r3, r4
    24fc:	199b      	adds	r3, r3, r6
    24fe:	0004      	movs	r4, r0
    2500:	e740      	b.n	2384 <__aeabi_fsub+0x138>
    2502:	2b00      	cmp	r3, #0
    2504:	d11a      	bne.n	253c <__aeabi_fsub+0x2f0>
    2506:	2e00      	cmp	r6, #0
    2508:	d124      	bne.n	2554 <__aeabi_fsub+0x308>
    250a:	2780      	movs	r7, #128	; 0x80
    250c:	2200      	movs	r2, #0
    250e:	03ff      	lsls	r7, r7, #15
    2510:	e71b      	b.n	234a <__aeabi_fsub+0xfe>
    2512:	0033      	movs	r3, r6
    2514:	0004      	movs	r4, r0
    2516:	000d      	movs	r5, r1
    2518:	e6de      	b.n	22d8 <__aeabi_fsub+0x8c>
    251a:	28ff      	cmp	r0, #255	; 0xff
    251c:	d01e      	beq.n	255c <__aeabi_fsub+0x310>
    251e:	2480      	movs	r4, #128	; 0x80
    2520:	04e4      	lsls	r4, r4, #19
    2522:	4249      	negs	r1, r1
    2524:	4323      	orrs	r3, r4
    2526:	e7df      	b.n	24e8 <__aeabi_fsub+0x29c>
    2528:	2e00      	cmp	r6, #0
    252a:	d100      	bne.n	252e <__aeabi_fsub+0x2e2>
    252c:	e6d4      	b.n	22d8 <__aeabi_fsub+0x8c>
    252e:	1b9f      	subs	r7, r3, r6
    2530:	017a      	lsls	r2, r7, #5
    2532:	d400      	bmi.n	2536 <__aeabi_fsub+0x2ea>
    2534:	e737      	b.n	23a6 <__aeabi_fsub+0x15a>
    2536:	1af3      	subs	r3, r6, r3
    2538:	000d      	movs	r5, r1
    253a:	e6cd      	b.n	22d8 <__aeabi_fsub+0x8c>
    253c:	24ff      	movs	r4, #255	; 0xff
    253e:	2e00      	cmp	r6, #0
    2540:	d100      	bne.n	2544 <__aeabi_fsub+0x2f8>
    2542:	e6c9      	b.n	22d8 <__aeabi_fsub+0x8c>
    2544:	2280      	movs	r2, #128	; 0x80
    2546:	4650      	mov	r0, sl
    2548:	03d2      	lsls	r2, r2, #15
    254a:	4210      	tst	r0, r2
    254c:	d0a4      	beq.n	2498 <__aeabi_fsub+0x24c>
    254e:	4660      	mov	r0, ip
    2550:	4210      	tst	r0, r2
    2552:	d1a1      	bne.n	2498 <__aeabi_fsub+0x24c>
    2554:	0033      	movs	r3, r6
    2556:	000d      	movs	r5, r1
    2558:	24ff      	movs	r4, #255	; 0xff
    255a:	e6bd      	b.n	22d8 <__aeabi_fsub+0x8c>
    255c:	0033      	movs	r3, r6
    255e:	24ff      	movs	r4, #255	; 0xff
    2560:	e6ba      	b.n	22d8 <__aeabi_fsub+0x8c>
    2562:	2301      	movs	r3, #1
    2564:	e76e      	b.n	2444 <__aeabi_fsub+0x1f8>
    2566:	0033      	movs	r3, r6
    2568:	0004      	movs	r4, r0
    256a:	e6b5      	b.n	22d8 <__aeabi_fsub+0x8c>
    256c:	2700      	movs	r7, #0
    256e:	2200      	movs	r2, #0
    2570:	e71c      	b.n	23ac <__aeabi_fsub+0x160>
    2572:	0033      	movs	r3, r6
    2574:	e6b0      	b.n	22d8 <__aeabi_fsub+0x8c>
    2576:	2301      	movs	r3, #1
    2578:	e7c0      	b.n	24fc <__aeabi_fsub+0x2b0>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	7dffffff 	.word	0x7dffffff
    2580:	fbffffff 	.word	0xfbffffff

00002584 <__aeabi_f2iz>:
    2584:	0241      	lsls	r1, r0, #9
    2586:	0043      	lsls	r3, r0, #1
    2588:	0fc2      	lsrs	r2, r0, #31
    258a:	0a49      	lsrs	r1, r1, #9
    258c:	0e1b      	lsrs	r3, r3, #24
    258e:	2000      	movs	r0, #0
    2590:	2b7e      	cmp	r3, #126	; 0x7e
    2592:	dd0d      	ble.n	25b0 <__aeabi_f2iz+0x2c>
    2594:	2b9d      	cmp	r3, #157	; 0x9d
    2596:	dc0c      	bgt.n	25b2 <__aeabi_f2iz+0x2e>
    2598:	2080      	movs	r0, #128	; 0x80
    259a:	0400      	lsls	r0, r0, #16
    259c:	4301      	orrs	r1, r0
    259e:	2b95      	cmp	r3, #149	; 0x95
    25a0:	dc0a      	bgt.n	25b8 <__aeabi_f2iz+0x34>
    25a2:	2096      	movs	r0, #150	; 0x96
    25a4:	1ac3      	subs	r3, r0, r3
    25a6:	40d9      	lsrs	r1, r3
    25a8:	4248      	negs	r0, r1
    25aa:	2a00      	cmp	r2, #0
    25ac:	d100      	bne.n	25b0 <__aeabi_f2iz+0x2c>
    25ae:	0008      	movs	r0, r1
    25b0:	4770      	bx	lr
    25b2:	4b03      	ldr	r3, [pc, #12]	; (25c0 <__aeabi_f2iz+0x3c>)
    25b4:	18d0      	adds	r0, r2, r3
    25b6:	e7fb      	b.n	25b0 <__aeabi_f2iz+0x2c>
    25b8:	3b96      	subs	r3, #150	; 0x96
    25ba:	4099      	lsls	r1, r3
    25bc:	e7f4      	b.n	25a8 <__aeabi_f2iz+0x24>
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	7fffffff 	.word	0x7fffffff

000025c4 <__aeabi_i2f>:
    25c4:	b570      	push	{r4, r5, r6, lr}
    25c6:	2800      	cmp	r0, #0
    25c8:	d030      	beq.n	262c <__aeabi_i2f+0x68>
    25ca:	17c3      	asrs	r3, r0, #31
    25cc:	18c4      	adds	r4, r0, r3
    25ce:	405c      	eors	r4, r3
    25d0:	0fc5      	lsrs	r5, r0, #31
    25d2:	0020      	movs	r0, r4
    25d4:	f000 f8d2 	bl	277c <__clzsi2>
    25d8:	239e      	movs	r3, #158	; 0x9e
    25da:	1a1b      	subs	r3, r3, r0
    25dc:	2b96      	cmp	r3, #150	; 0x96
    25de:	dc0d      	bgt.n	25fc <__aeabi_i2f+0x38>
    25e0:	2296      	movs	r2, #150	; 0x96
    25e2:	1ad2      	subs	r2, r2, r3
    25e4:	4094      	lsls	r4, r2
    25e6:	002a      	movs	r2, r5
    25e8:	0264      	lsls	r4, r4, #9
    25ea:	0a64      	lsrs	r4, r4, #9
    25ec:	b2db      	uxtb	r3, r3
    25ee:	0264      	lsls	r4, r4, #9
    25f0:	05db      	lsls	r3, r3, #23
    25f2:	0a60      	lsrs	r0, r4, #9
    25f4:	07d2      	lsls	r2, r2, #31
    25f6:	4318      	orrs	r0, r3
    25f8:	4310      	orrs	r0, r2
    25fa:	bd70      	pop	{r4, r5, r6, pc}
    25fc:	2b99      	cmp	r3, #153	; 0x99
    25fe:	dc19      	bgt.n	2634 <__aeabi_i2f+0x70>
    2600:	2299      	movs	r2, #153	; 0x99
    2602:	1ad2      	subs	r2, r2, r3
    2604:	2a00      	cmp	r2, #0
    2606:	dd29      	ble.n	265c <__aeabi_i2f+0x98>
    2608:	4094      	lsls	r4, r2
    260a:	0022      	movs	r2, r4
    260c:	4c14      	ldr	r4, [pc, #80]	; (2660 <__aeabi_i2f+0x9c>)
    260e:	4014      	ands	r4, r2
    2610:	0751      	lsls	r1, r2, #29
    2612:	d004      	beq.n	261e <__aeabi_i2f+0x5a>
    2614:	210f      	movs	r1, #15
    2616:	400a      	ands	r2, r1
    2618:	2a04      	cmp	r2, #4
    261a:	d000      	beq.n	261e <__aeabi_i2f+0x5a>
    261c:	3404      	adds	r4, #4
    261e:	0162      	lsls	r2, r4, #5
    2620:	d413      	bmi.n	264a <__aeabi_i2f+0x86>
    2622:	01a4      	lsls	r4, r4, #6
    2624:	0a64      	lsrs	r4, r4, #9
    2626:	b2db      	uxtb	r3, r3
    2628:	002a      	movs	r2, r5
    262a:	e7e0      	b.n	25ee <__aeabi_i2f+0x2a>
    262c:	2200      	movs	r2, #0
    262e:	2300      	movs	r3, #0
    2630:	2400      	movs	r4, #0
    2632:	e7dc      	b.n	25ee <__aeabi_i2f+0x2a>
    2634:	2205      	movs	r2, #5
    2636:	0021      	movs	r1, r4
    2638:	1a12      	subs	r2, r2, r0
    263a:	40d1      	lsrs	r1, r2
    263c:	22b9      	movs	r2, #185	; 0xb9
    263e:	1ad2      	subs	r2, r2, r3
    2640:	4094      	lsls	r4, r2
    2642:	1e62      	subs	r2, r4, #1
    2644:	4194      	sbcs	r4, r2
    2646:	430c      	orrs	r4, r1
    2648:	e7da      	b.n	2600 <__aeabi_i2f+0x3c>
    264a:	4b05      	ldr	r3, [pc, #20]	; (2660 <__aeabi_i2f+0x9c>)
    264c:	002a      	movs	r2, r5
    264e:	401c      	ands	r4, r3
    2650:	239f      	movs	r3, #159	; 0x9f
    2652:	01a4      	lsls	r4, r4, #6
    2654:	1a1b      	subs	r3, r3, r0
    2656:	0a64      	lsrs	r4, r4, #9
    2658:	b2db      	uxtb	r3, r3
    265a:	e7c8      	b.n	25ee <__aeabi_i2f+0x2a>
    265c:	0022      	movs	r2, r4
    265e:	e7d5      	b.n	260c <__aeabi_i2f+0x48>
    2660:	fbffffff 	.word	0xfbffffff

00002664 <__aeabi_f2d>:
    2664:	0041      	lsls	r1, r0, #1
    2666:	0e09      	lsrs	r1, r1, #24
    2668:	1c4b      	adds	r3, r1, #1
    266a:	b570      	push	{r4, r5, r6, lr}
    266c:	b2db      	uxtb	r3, r3
    266e:	0246      	lsls	r6, r0, #9
    2670:	0a75      	lsrs	r5, r6, #9
    2672:	0fc4      	lsrs	r4, r0, #31
    2674:	2b01      	cmp	r3, #1
    2676:	dd14      	ble.n	26a2 <__aeabi_f2d+0x3e>
    2678:	23e0      	movs	r3, #224	; 0xe0
    267a:	009b      	lsls	r3, r3, #2
    267c:	076d      	lsls	r5, r5, #29
    267e:	0b36      	lsrs	r6, r6, #12
    2680:	18cb      	adds	r3, r1, r3
    2682:	2100      	movs	r1, #0
    2684:	0d0a      	lsrs	r2, r1, #20
    2686:	0028      	movs	r0, r5
    2688:	0512      	lsls	r2, r2, #20
    268a:	4d1c      	ldr	r5, [pc, #112]	; (26fc <__aeabi_f2d+0x98>)
    268c:	4332      	orrs	r2, r6
    268e:	055b      	lsls	r3, r3, #21
    2690:	402a      	ands	r2, r5
    2692:	085b      	lsrs	r3, r3, #1
    2694:	4313      	orrs	r3, r2
    2696:	005b      	lsls	r3, r3, #1
    2698:	07e4      	lsls	r4, r4, #31
    269a:	085b      	lsrs	r3, r3, #1
    269c:	4323      	orrs	r3, r4
    269e:	0019      	movs	r1, r3
    26a0:	bd70      	pop	{r4, r5, r6, pc}
    26a2:	2900      	cmp	r1, #0
    26a4:	d114      	bne.n	26d0 <__aeabi_f2d+0x6c>
    26a6:	2d00      	cmp	r5, #0
    26a8:	d01e      	beq.n	26e8 <__aeabi_f2d+0x84>
    26aa:	0028      	movs	r0, r5
    26ac:	f000 f866 	bl	277c <__clzsi2>
    26b0:	280a      	cmp	r0, #10
    26b2:	dc1c      	bgt.n	26ee <__aeabi_f2d+0x8a>
    26b4:	230b      	movs	r3, #11
    26b6:	002a      	movs	r2, r5
    26b8:	1a1b      	subs	r3, r3, r0
    26ba:	40da      	lsrs	r2, r3
    26bc:	0003      	movs	r3, r0
    26be:	3315      	adds	r3, #21
    26c0:	409d      	lsls	r5, r3
    26c2:	4b0f      	ldr	r3, [pc, #60]	; (2700 <__aeabi_f2d+0x9c>)
    26c4:	0312      	lsls	r2, r2, #12
    26c6:	1a1b      	subs	r3, r3, r0
    26c8:	055b      	lsls	r3, r3, #21
    26ca:	0b16      	lsrs	r6, r2, #12
    26cc:	0d5b      	lsrs	r3, r3, #21
    26ce:	e7d8      	b.n	2682 <__aeabi_f2d+0x1e>
    26d0:	2d00      	cmp	r5, #0
    26d2:	d006      	beq.n	26e2 <__aeabi_f2d+0x7e>
    26d4:	0b32      	lsrs	r2, r6, #12
    26d6:	2680      	movs	r6, #128	; 0x80
    26d8:	0336      	lsls	r6, r6, #12
    26da:	076d      	lsls	r5, r5, #29
    26dc:	4316      	orrs	r6, r2
    26de:	4b09      	ldr	r3, [pc, #36]	; (2704 <__aeabi_f2d+0xa0>)
    26e0:	e7cf      	b.n	2682 <__aeabi_f2d+0x1e>
    26e2:	4b08      	ldr	r3, [pc, #32]	; (2704 <__aeabi_f2d+0xa0>)
    26e4:	2600      	movs	r6, #0
    26e6:	e7cc      	b.n	2682 <__aeabi_f2d+0x1e>
    26e8:	2300      	movs	r3, #0
    26ea:	2600      	movs	r6, #0
    26ec:	e7c9      	b.n	2682 <__aeabi_f2d+0x1e>
    26ee:	0003      	movs	r3, r0
    26f0:	002a      	movs	r2, r5
    26f2:	3b0b      	subs	r3, #11
    26f4:	409a      	lsls	r2, r3
    26f6:	2500      	movs	r5, #0
    26f8:	e7e3      	b.n	26c2 <__aeabi_f2d+0x5e>
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	800fffff 	.word	0x800fffff
    2700:	00000389 	.word	0x00000389
    2704:	000007ff 	.word	0x000007ff

00002708 <__aeabi_cfrcmple>:
    2708:	4684      	mov	ip, r0
    270a:	1c08      	adds	r0, r1, #0
    270c:	4661      	mov	r1, ip
    270e:	e7ff      	b.n	2710 <__aeabi_cfcmpeq>

00002710 <__aeabi_cfcmpeq>:
    2710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2712:	f000 f8b7 	bl	2884 <__lesf2>
    2716:	2800      	cmp	r0, #0
    2718:	d401      	bmi.n	271e <__aeabi_cfcmpeq+0xe>
    271a:	2100      	movs	r1, #0
    271c:	42c8      	cmn	r0, r1
    271e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002720 <__aeabi_fcmpeq>:
    2720:	b510      	push	{r4, lr}
    2722:	f000 f849 	bl	27b8 <__eqsf2>
    2726:	4240      	negs	r0, r0
    2728:	3001      	adds	r0, #1
    272a:	bd10      	pop	{r4, pc}

0000272c <__aeabi_fcmplt>:
    272c:	b510      	push	{r4, lr}
    272e:	f000 f8a9 	bl	2884 <__lesf2>
    2732:	2800      	cmp	r0, #0
    2734:	db01      	blt.n	273a <__aeabi_fcmplt+0xe>
    2736:	2000      	movs	r0, #0
    2738:	bd10      	pop	{r4, pc}
    273a:	2001      	movs	r0, #1
    273c:	bd10      	pop	{r4, pc}
    273e:	46c0      	nop			; (mov r8, r8)

00002740 <__aeabi_fcmple>:
    2740:	b510      	push	{r4, lr}
    2742:	f000 f89f 	bl	2884 <__lesf2>
    2746:	2800      	cmp	r0, #0
    2748:	dd01      	ble.n	274e <__aeabi_fcmple+0xe>
    274a:	2000      	movs	r0, #0
    274c:	bd10      	pop	{r4, pc}
    274e:	2001      	movs	r0, #1
    2750:	bd10      	pop	{r4, pc}
    2752:	46c0      	nop			; (mov r8, r8)

00002754 <__aeabi_fcmpgt>:
    2754:	b510      	push	{r4, lr}
    2756:	f000 f855 	bl	2804 <__gesf2>
    275a:	2800      	cmp	r0, #0
    275c:	dc01      	bgt.n	2762 <__aeabi_fcmpgt+0xe>
    275e:	2000      	movs	r0, #0
    2760:	bd10      	pop	{r4, pc}
    2762:	2001      	movs	r0, #1
    2764:	bd10      	pop	{r4, pc}
    2766:	46c0      	nop			; (mov r8, r8)

00002768 <__aeabi_fcmpge>:
    2768:	b510      	push	{r4, lr}
    276a:	f000 f84b 	bl	2804 <__gesf2>
    276e:	2800      	cmp	r0, #0
    2770:	da01      	bge.n	2776 <__aeabi_fcmpge+0xe>
    2772:	2000      	movs	r0, #0
    2774:	bd10      	pop	{r4, pc}
    2776:	2001      	movs	r0, #1
    2778:	bd10      	pop	{r4, pc}
    277a:	46c0      	nop			; (mov r8, r8)

0000277c <__clzsi2>:
    277c:	211c      	movs	r1, #28
    277e:	2301      	movs	r3, #1
    2780:	041b      	lsls	r3, r3, #16
    2782:	4298      	cmp	r0, r3
    2784:	d301      	bcc.n	278a <__clzsi2+0xe>
    2786:	0c00      	lsrs	r0, r0, #16
    2788:	3910      	subs	r1, #16
    278a:	0a1b      	lsrs	r3, r3, #8
    278c:	4298      	cmp	r0, r3
    278e:	d301      	bcc.n	2794 <__clzsi2+0x18>
    2790:	0a00      	lsrs	r0, r0, #8
    2792:	3908      	subs	r1, #8
    2794:	091b      	lsrs	r3, r3, #4
    2796:	4298      	cmp	r0, r3
    2798:	d301      	bcc.n	279e <__clzsi2+0x22>
    279a:	0900      	lsrs	r0, r0, #4
    279c:	3904      	subs	r1, #4
    279e:	a202      	add	r2, pc, #8	; (adr r2, 27a8 <__clzsi2+0x2c>)
    27a0:	5c10      	ldrb	r0, [r2, r0]
    27a2:	1840      	adds	r0, r0, r1
    27a4:	4770      	bx	lr
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	02020304 	.word	0x02020304
    27ac:	01010101 	.word	0x01010101
	...

000027b8 <__eqsf2>:
    27b8:	b570      	push	{r4, r5, r6, lr}
    27ba:	0042      	lsls	r2, r0, #1
    27bc:	0245      	lsls	r5, r0, #9
    27be:	024e      	lsls	r6, r1, #9
    27c0:	004c      	lsls	r4, r1, #1
    27c2:	0fc3      	lsrs	r3, r0, #31
    27c4:	0a6d      	lsrs	r5, r5, #9
    27c6:	0e12      	lsrs	r2, r2, #24
    27c8:	0a76      	lsrs	r6, r6, #9
    27ca:	0e24      	lsrs	r4, r4, #24
    27cc:	0fc9      	lsrs	r1, r1, #31
    27ce:	2001      	movs	r0, #1
    27d0:	2aff      	cmp	r2, #255	; 0xff
    27d2:	d006      	beq.n	27e2 <__eqsf2+0x2a>
    27d4:	2cff      	cmp	r4, #255	; 0xff
    27d6:	d003      	beq.n	27e0 <__eqsf2+0x28>
    27d8:	42a2      	cmp	r2, r4
    27da:	d101      	bne.n	27e0 <__eqsf2+0x28>
    27dc:	42b5      	cmp	r5, r6
    27de:	d006      	beq.n	27ee <__eqsf2+0x36>
    27e0:	bd70      	pop	{r4, r5, r6, pc}
    27e2:	2d00      	cmp	r5, #0
    27e4:	d1fc      	bne.n	27e0 <__eqsf2+0x28>
    27e6:	2cff      	cmp	r4, #255	; 0xff
    27e8:	d1fa      	bne.n	27e0 <__eqsf2+0x28>
    27ea:	2e00      	cmp	r6, #0
    27ec:	d1f8      	bne.n	27e0 <__eqsf2+0x28>
    27ee:	428b      	cmp	r3, r1
    27f0:	d006      	beq.n	2800 <__eqsf2+0x48>
    27f2:	2001      	movs	r0, #1
    27f4:	2a00      	cmp	r2, #0
    27f6:	d1f3      	bne.n	27e0 <__eqsf2+0x28>
    27f8:	0028      	movs	r0, r5
    27fa:	1e45      	subs	r5, r0, #1
    27fc:	41a8      	sbcs	r0, r5
    27fe:	e7ef      	b.n	27e0 <__eqsf2+0x28>
    2800:	2000      	movs	r0, #0
    2802:	e7ed      	b.n	27e0 <__eqsf2+0x28>

00002804 <__gesf2>:
    2804:	b5f0      	push	{r4, r5, r6, r7, lr}
    2806:	0042      	lsls	r2, r0, #1
    2808:	0245      	lsls	r5, r0, #9
    280a:	024c      	lsls	r4, r1, #9
    280c:	0fc3      	lsrs	r3, r0, #31
    280e:	0048      	lsls	r0, r1, #1
    2810:	0a6d      	lsrs	r5, r5, #9
    2812:	0e12      	lsrs	r2, r2, #24
    2814:	0a64      	lsrs	r4, r4, #9
    2816:	0e00      	lsrs	r0, r0, #24
    2818:	0fc9      	lsrs	r1, r1, #31
    281a:	2aff      	cmp	r2, #255	; 0xff
    281c:	d01e      	beq.n	285c <__gesf2+0x58>
    281e:	28ff      	cmp	r0, #255	; 0xff
    2820:	d021      	beq.n	2866 <__gesf2+0x62>
    2822:	2a00      	cmp	r2, #0
    2824:	d10a      	bne.n	283c <__gesf2+0x38>
    2826:	426e      	negs	r6, r5
    2828:	416e      	adcs	r6, r5
    282a:	b2f6      	uxtb	r6, r6
    282c:	2800      	cmp	r0, #0
    282e:	d10f      	bne.n	2850 <__gesf2+0x4c>
    2830:	2c00      	cmp	r4, #0
    2832:	d10d      	bne.n	2850 <__gesf2+0x4c>
    2834:	2000      	movs	r0, #0
    2836:	2d00      	cmp	r5, #0
    2838:	d009      	beq.n	284e <__gesf2+0x4a>
    283a:	e005      	b.n	2848 <__gesf2+0x44>
    283c:	2800      	cmp	r0, #0
    283e:	d101      	bne.n	2844 <__gesf2+0x40>
    2840:	2c00      	cmp	r4, #0
    2842:	d001      	beq.n	2848 <__gesf2+0x44>
    2844:	428b      	cmp	r3, r1
    2846:	d011      	beq.n	286c <__gesf2+0x68>
    2848:	2101      	movs	r1, #1
    284a:	4258      	negs	r0, r3
    284c:	4308      	orrs	r0, r1
    284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2850:	2e00      	cmp	r6, #0
    2852:	d0f7      	beq.n	2844 <__gesf2+0x40>
    2854:	2001      	movs	r0, #1
    2856:	3901      	subs	r1, #1
    2858:	4308      	orrs	r0, r1
    285a:	e7f8      	b.n	284e <__gesf2+0x4a>
    285c:	2d00      	cmp	r5, #0
    285e:	d0de      	beq.n	281e <__gesf2+0x1a>
    2860:	2002      	movs	r0, #2
    2862:	4240      	negs	r0, r0
    2864:	e7f3      	b.n	284e <__gesf2+0x4a>
    2866:	2c00      	cmp	r4, #0
    2868:	d0db      	beq.n	2822 <__gesf2+0x1e>
    286a:	e7f9      	b.n	2860 <__gesf2+0x5c>
    286c:	4282      	cmp	r2, r0
    286e:	dceb      	bgt.n	2848 <__gesf2+0x44>
    2870:	db04      	blt.n	287c <__gesf2+0x78>
    2872:	42a5      	cmp	r5, r4
    2874:	d8e8      	bhi.n	2848 <__gesf2+0x44>
    2876:	2000      	movs	r0, #0
    2878:	42a5      	cmp	r5, r4
    287a:	d2e8      	bcs.n	284e <__gesf2+0x4a>
    287c:	2101      	movs	r1, #1
    287e:	1e58      	subs	r0, r3, #1
    2880:	4308      	orrs	r0, r1
    2882:	e7e4      	b.n	284e <__gesf2+0x4a>

00002884 <__lesf2>:
    2884:	b5f0      	push	{r4, r5, r6, r7, lr}
    2886:	0042      	lsls	r2, r0, #1
    2888:	024d      	lsls	r5, r1, #9
    288a:	004c      	lsls	r4, r1, #1
    288c:	0246      	lsls	r6, r0, #9
    288e:	0a76      	lsrs	r6, r6, #9
    2890:	0e12      	lsrs	r2, r2, #24
    2892:	0fc3      	lsrs	r3, r0, #31
    2894:	0a6d      	lsrs	r5, r5, #9
    2896:	0e24      	lsrs	r4, r4, #24
    2898:	0fc9      	lsrs	r1, r1, #31
    289a:	2aff      	cmp	r2, #255	; 0xff
    289c:	d016      	beq.n	28cc <__lesf2+0x48>
    289e:	2cff      	cmp	r4, #255	; 0xff
    28a0:	d018      	beq.n	28d4 <__lesf2+0x50>
    28a2:	2a00      	cmp	r2, #0
    28a4:	d10a      	bne.n	28bc <__lesf2+0x38>
    28a6:	4270      	negs	r0, r6
    28a8:	4170      	adcs	r0, r6
    28aa:	b2c0      	uxtb	r0, r0
    28ac:	2c00      	cmp	r4, #0
    28ae:	d015      	beq.n	28dc <__lesf2+0x58>
    28b0:	2800      	cmp	r0, #0
    28b2:	d005      	beq.n	28c0 <__lesf2+0x3c>
    28b4:	2001      	movs	r0, #1
    28b6:	3901      	subs	r1, #1
    28b8:	4308      	orrs	r0, r1
    28ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28bc:	2c00      	cmp	r4, #0
    28be:	d013      	beq.n	28e8 <__lesf2+0x64>
    28c0:	4299      	cmp	r1, r3
    28c2:	d014      	beq.n	28ee <__lesf2+0x6a>
    28c4:	2001      	movs	r0, #1
    28c6:	425b      	negs	r3, r3
    28c8:	4318      	orrs	r0, r3
    28ca:	e7f6      	b.n	28ba <__lesf2+0x36>
    28cc:	2002      	movs	r0, #2
    28ce:	2e00      	cmp	r6, #0
    28d0:	d1f3      	bne.n	28ba <__lesf2+0x36>
    28d2:	e7e4      	b.n	289e <__lesf2+0x1a>
    28d4:	2002      	movs	r0, #2
    28d6:	2d00      	cmp	r5, #0
    28d8:	d1ef      	bne.n	28ba <__lesf2+0x36>
    28da:	e7e2      	b.n	28a2 <__lesf2+0x1e>
    28dc:	2d00      	cmp	r5, #0
    28de:	d1e7      	bne.n	28b0 <__lesf2+0x2c>
    28e0:	2000      	movs	r0, #0
    28e2:	2e00      	cmp	r6, #0
    28e4:	d0e9      	beq.n	28ba <__lesf2+0x36>
    28e6:	e7ed      	b.n	28c4 <__lesf2+0x40>
    28e8:	2d00      	cmp	r5, #0
    28ea:	d1e9      	bne.n	28c0 <__lesf2+0x3c>
    28ec:	e7ea      	b.n	28c4 <__lesf2+0x40>
    28ee:	42a2      	cmp	r2, r4
    28f0:	dc06      	bgt.n	2900 <__lesf2+0x7c>
    28f2:	dbdf      	blt.n	28b4 <__lesf2+0x30>
    28f4:	42ae      	cmp	r6, r5
    28f6:	d803      	bhi.n	2900 <__lesf2+0x7c>
    28f8:	2000      	movs	r0, #0
    28fa:	42ae      	cmp	r6, r5
    28fc:	d3da      	bcc.n	28b4 <__lesf2+0x30>
    28fe:	e7dc      	b.n	28ba <__lesf2+0x36>
    2900:	2001      	movs	r0, #1
    2902:	4249      	negs	r1, r1
    2904:	4308      	orrs	r0, r1
    2906:	e7d8      	b.n	28ba <__lesf2+0x36>

00002908 <__libc_init_array>:
    2908:	b570      	push	{r4, r5, r6, lr}
    290a:	2600      	movs	r6, #0
    290c:	4d0c      	ldr	r5, [pc, #48]	; (2940 <__libc_init_array+0x38>)
    290e:	4c0d      	ldr	r4, [pc, #52]	; (2944 <__libc_init_array+0x3c>)
    2910:	1b64      	subs	r4, r4, r5
    2912:	10a4      	asrs	r4, r4, #2
    2914:	42a6      	cmp	r6, r4
    2916:	d109      	bne.n	292c <__libc_init_array+0x24>
    2918:	2600      	movs	r6, #0
    291a:	f000 ffeb 	bl	38f4 <_init>
    291e:	4d0a      	ldr	r5, [pc, #40]	; (2948 <__libc_init_array+0x40>)
    2920:	4c0a      	ldr	r4, [pc, #40]	; (294c <__libc_init_array+0x44>)
    2922:	1b64      	subs	r4, r4, r5
    2924:	10a4      	asrs	r4, r4, #2
    2926:	42a6      	cmp	r6, r4
    2928:	d105      	bne.n	2936 <__libc_init_array+0x2e>
    292a:	bd70      	pop	{r4, r5, r6, pc}
    292c:	00b3      	lsls	r3, r6, #2
    292e:	58eb      	ldr	r3, [r5, r3]
    2930:	4798      	blx	r3
    2932:	3601      	adds	r6, #1
    2934:	e7ee      	b.n	2914 <__libc_init_array+0xc>
    2936:	00b3      	lsls	r3, r6, #2
    2938:	58eb      	ldr	r3, [r5, r3]
    293a:	4798      	blx	r3
    293c:	3601      	adds	r6, #1
    293e:	e7f2      	b.n	2926 <__libc_init_array+0x1e>
    2940:	00003900 	.word	0x00003900
    2944:	00003900 	.word	0x00003900
    2948:	00003900 	.word	0x00003900
    294c:	00003904 	.word	0x00003904

00002950 <memset>:
    2950:	0003      	movs	r3, r0
    2952:	1882      	adds	r2, r0, r2
    2954:	4293      	cmp	r3, r2
    2956:	d100      	bne.n	295a <memset+0xa>
    2958:	4770      	bx	lr
    295a:	7019      	strb	r1, [r3, #0]
    295c:	3301      	adds	r3, #1
    295e:	e7f9      	b.n	2954 <memset+0x4>

00002960 <strlen>:
    2960:	2300      	movs	r3, #0
    2962:	5cc2      	ldrb	r2, [r0, r3]
    2964:	3301      	adds	r3, #1
    2966:	2a00      	cmp	r2, #0
    2968:	d1fb      	bne.n	2962 <strlen+0x2>
    296a:	1e58      	subs	r0, r3, #1
    296c:	4770      	bx	lr

0000296e <strncpy>:
    296e:	b570      	push	{r4, r5, r6, lr}
    2970:	0004      	movs	r4, r0
    2972:	2a00      	cmp	r2, #0
    2974:	d100      	bne.n	2978 <strncpy+0xa>
    2976:	bd70      	pop	{r4, r5, r6, pc}
    2978:	780d      	ldrb	r5, [r1, #0]
    297a:	1e56      	subs	r6, r2, #1
    297c:	1c63      	adds	r3, r4, #1
    297e:	7025      	strb	r5, [r4, #0]
    2980:	3101      	adds	r1, #1
    2982:	2d00      	cmp	r5, #0
    2984:	d105      	bne.n	2992 <strncpy+0x24>
    2986:	18a4      	adds	r4, r4, r2
    2988:	429c      	cmp	r4, r3
    298a:	d0f4      	beq.n	2976 <strncpy+0x8>
    298c:	701d      	strb	r5, [r3, #0]
    298e:	3301      	adds	r3, #1
    2990:	e7fa      	b.n	2988 <strncpy+0x1a>
    2992:	001c      	movs	r4, r3
    2994:	0032      	movs	r2, r6
    2996:	e7ec      	b.n	2972 <strncpy+0x4>

00002998 <_vsniprintf_r>:
    2998:	b530      	push	{r4, r5, lr}
    299a:	0014      	movs	r4, r2
    299c:	b09b      	sub	sp, #108	; 0x6c
    299e:	0005      	movs	r5, r0
    29a0:	001a      	movs	r2, r3
    29a2:	2c00      	cmp	r4, #0
    29a4:	da05      	bge.n	29b2 <_vsniprintf_r+0x1a>
    29a6:	238b      	movs	r3, #139	; 0x8b
    29a8:	6003      	str	r3, [r0, #0]
    29aa:	2001      	movs	r0, #1
    29ac:	4240      	negs	r0, r0
    29ae:	b01b      	add	sp, #108	; 0x6c
    29b0:	bd30      	pop	{r4, r5, pc}
    29b2:	2382      	movs	r3, #130	; 0x82
    29b4:	4668      	mov	r0, sp
    29b6:	009b      	lsls	r3, r3, #2
    29b8:	8183      	strh	r3, [r0, #12]
    29ba:	2300      	movs	r3, #0
    29bc:	9100      	str	r1, [sp, #0]
    29be:	9104      	str	r1, [sp, #16]
    29c0:	429c      	cmp	r4, r3
    29c2:	d000      	beq.n	29c6 <_vsniprintf_r+0x2e>
    29c4:	1e63      	subs	r3, r4, #1
    29c6:	9302      	str	r3, [sp, #8]
    29c8:	9305      	str	r3, [sp, #20]
    29ca:	2301      	movs	r3, #1
    29cc:	4669      	mov	r1, sp
    29ce:	425b      	negs	r3, r3
    29d0:	81cb      	strh	r3, [r1, #14]
    29d2:	0028      	movs	r0, r5
    29d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    29d6:	f000 f8d7 	bl	2b88 <_svfiprintf_r>
    29da:	1c43      	adds	r3, r0, #1
    29dc:	da01      	bge.n	29e2 <_vsniprintf_r+0x4a>
    29de:	238b      	movs	r3, #139	; 0x8b
    29e0:	602b      	str	r3, [r5, #0]
    29e2:	2c00      	cmp	r4, #0
    29e4:	d0e3      	beq.n	29ae <_vsniprintf_r+0x16>
    29e6:	2300      	movs	r3, #0
    29e8:	9a00      	ldr	r2, [sp, #0]
    29ea:	7013      	strb	r3, [r2, #0]
    29ec:	e7df      	b.n	29ae <_vsniprintf_r+0x16>
	...

000029f0 <vsniprintf>:
    29f0:	b507      	push	{r0, r1, r2, lr}
    29f2:	9300      	str	r3, [sp, #0]
    29f4:	0013      	movs	r3, r2
    29f6:	000a      	movs	r2, r1
    29f8:	0001      	movs	r1, r0
    29fa:	4802      	ldr	r0, [pc, #8]	; (2a04 <vsniprintf+0x14>)
    29fc:	6800      	ldr	r0, [r0, #0]
    29fe:	f7ff ffcb 	bl	2998 <_vsniprintf_r>
    2a02:	bd0e      	pop	{r1, r2, r3, pc}
    2a04:	20000000 	.word	0x20000000

00002a08 <_malloc_r>:
    2a08:	2303      	movs	r3, #3
    2a0a:	b570      	push	{r4, r5, r6, lr}
    2a0c:	1ccd      	adds	r5, r1, #3
    2a0e:	439d      	bics	r5, r3
    2a10:	3508      	adds	r5, #8
    2a12:	0006      	movs	r6, r0
    2a14:	2d0c      	cmp	r5, #12
    2a16:	d21e      	bcs.n	2a56 <_malloc_r+0x4e>
    2a18:	250c      	movs	r5, #12
    2a1a:	42a9      	cmp	r1, r5
    2a1c:	d81d      	bhi.n	2a5a <_malloc_r+0x52>
    2a1e:	0030      	movs	r0, r6
    2a20:	f000 fb76 	bl	3110 <__malloc_lock>
    2a24:	4a25      	ldr	r2, [pc, #148]	; (2abc <_malloc_r+0xb4>)
    2a26:	6814      	ldr	r4, [r2, #0]
    2a28:	0021      	movs	r1, r4
    2a2a:	2900      	cmp	r1, #0
    2a2c:	d119      	bne.n	2a62 <_malloc_r+0x5a>
    2a2e:	4c24      	ldr	r4, [pc, #144]	; (2ac0 <_malloc_r+0xb8>)
    2a30:	6823      	ldr	r3, [r4, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d103      	bne.n	2a3e <_malloc_r+0x36>
    2a36:	0030      	movs	r0, r6
    2a38:	f000 fb32 	bl	30a0 <_sbrk_r>
    2a3c:	6020      	str	r0, [r4, #0]
    2a3e:	0029      	movs	r1, r5
    2a40:	0030      	movs	r0, r6
    2a42:	f000 fb2d 	bl	30a0 <_sbrk_r>
    2a46:	1c43      	adds	r3, r0, #1
    2a48:	d12c      	bne.n	2aa4 <_malloc_r+0x9c>
    2a4a:	230c      	movs	r3, #12
    2a4c:	0030      	movs	r0, r6
    2a4e:	6033      	str	r3, [r6, #0]
    2a50:	f000 fb5f 	bl	3112 <__malloc_unlock>
    2a54:	e003      	b.n	2a5e <_malloc_r+0x56>
    2a56:	2d00      	cmp	r5, #0
    2a58:	dadf      	bge.n	2a1a <_malloc_r+0x12>
    2a5a:	230c      	movs	r3, #12
    2a5c:	6033      	str	r3, [r6, #0]
    2a5e:	2000      	movs	r0, #0
    2a60:	bd70      	pop	{r4, r5, r6, pc}
    2a62:	680b      	ldr	r3, [r1, #0]
    2a64:	1b5b      	subs	r3, r3, r5
    2a66:	d41a      	bmi.n	2a9e <_malloc_r+0x96>
    2a68:	2b0b      	cmp	r3, #11
    2a6a:	d903      	bls.n	2a74 <_malloc_r+0x6c>
    2a6c:	600b      	str	r3, [r1, #0]
    2a6e:	18cc      	adds	r4, r1, r3
    2a70:	6025      	str	r5, [r4, #0]
    2a72:	e003      	b.n	2a7c <_malloc_r+0x74>
    2a74:	428c      	cmp	r4, r1
    2a76:	d10e      	bne.n	2a96 <_malloc_r+0x8e>
    2a78:	6863      	ldr	r3, [r4, #4]
    2a7a:	6013      	str	r3, [r2, #0]
    2a7c:	0030      	movs	r0, r6
    2a7e:	f000 fb48 	bl	3112 <__malloc_unlock>
    2a82:	0020      	movs	r0, r4
    2a84:	2207      	movs	r2, #7
    2a86:	300b      	adds	r0, #11
    2a88:	1d23      	adds	r3, r4, #4
    2a8a:	4390      	bics	r0, r2
    2a8c:	1ac3      	subs	r3, r0, r3
    2a8e:	d0e7      	beq.n	2a60 <_malloc_r+0x58>
    2a90:	425a      	negs	r2, r3
    2a92:	50e2      	str	r2, [r4, r3]
    2a94:	e7e4      	b.n	2a60 <_malloc_r+0x58>
    2a96:	684b      	ldr	r3, [r1, #4]
    2a98:	6063      	str	r3, [r4, #4]
    2a9a:	000c      	movs	r4, r1
    2a9c:	e7ee      	b.n	2a7c <_malloc_r+0x74>
    2a9e:	000c      	movs	r4, r1
    2aa0:	6849      	ldr	r1, [r1, #4]
    2aa2:	e7c2      	b.n	2a2a <_malloc_r+0x22>
    2aa4:	2303      	movs	r3, #3
    2aa6:	1cc4      	adds	r4, r0, #3
    2aa8:	439c      	bics	r4, r3
    2aaa:	42a0      	cmp	r0, r4
    2aac:	d0e0      	beq.n	2a70 <_malloc_r+0x68>
    2aae:	1a21      	subs	r1, r4, r0
    2ab0:	0030      	movs	r0, r6
    2ab2:	f000 faf5 	bl	30a0 <_sbrk_r>
    2ab6:	1c43      	adds	r3, r0, #1
    2ab8:	d1da      	bne.n	2a70 <_malloc_r+0x68>
    2aba:	e7c6      	b.n	2a4a <_malloc_r+0x42>
    2abc:	20000148 	.word	0x20000148
    2ac0:	2000014c 	.word	0x2000014c

00002ac4 <__ssputs_r>:
    2ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ac6:	688e      	ldr	r6, [r1, #8]
    2ac8:	b085      	sub	sp, #20
    2aca:	0007      	movs	r7, r0
    2acc:	000c      	movs	r4, r1
    2ace:	9203      	str	r2, [sp, #12]
    2ad0:	9301      	str	r3, [sp, #4]
    2ad2:	429e      	cmp	r6, r3
    2ad4:	d839      	bhi.n	2b4a <__ssputs_r+0x86>
    2ad6:	2390      	movs	r3, #144	; 0x90
    2ad8:	898a      	ldrh	r2, [r1, #12]
    2ada:	00db      	lsls	r3, r3, #3
    2adc:	421a      	tst	r2, r3
    2ade:	d034      	beq.n	2b4a <__ssputs_r+0x86>
    2ae0:	2503      	movs	r5, #3
    2ae2:	6909      	ldr	r1, [r1, #16]
    2ae4:	6823      	ldr	r3, [r4, #0]
    2ae6:	1a5b      	subs	r3, r3, r1
    2ae8:	9302      	str	r3, [sp, #8]
    2aea:	6963      	ldr	r3, [r4, #20]
    2aec:	9802      	ldr	r0, [sp, #8]
    2aee:	435d      	muls	r5, r3
    2af0:	0feb      	lsrs	r3, r5, #31
    2af2:	195d      	adds	r5, r3, r5
    2af4:	9b01      	ldr	r3, [sp, #4]
    2af6:	106d      	asrs	r5, r5, #1
    2af8:	3301      	adds	r3, #1
    2afa:	181b      	adds	r3, r3, r0
    2afc:	42ab      	cmp	r3, r5
    2afe:	d900      	bls.n	2b02 <__ssputs_r+0x3e>
    2b00:	001d      	movs	r5, r3
    2b02:	0553      	lsls	r3, r2, #21
    2b04:	d532      	bpl.n	2b6c <__ssputs_r+0xa8>
    2b06:	0029      	movs	r1, r5
    2b08:	0038      	movs	r0, r7
    2b0a:	f7ff ff7d 	bl	2a08 <_malloc_r>
    2b0e:	1e06      	subs	r6, r0, #0
    2b10:	d109      	bne.n	2b26 <__ssputs_r+0x62>
    2b12:	230c      	movs	r3, #12
    2b14:	603b      	str	r3, [r7, #0]
    2b16:	2340      	movs	r3, #64	; 0x40
    2b18:	2001      	movs	r0, #1
    2b1a:	89a2      	ldrh	r2, [r4, #12]
    2b1c:	4240      	negs	r0, r0
    2b1e:	4313      	orrs	r3, r2
    2b20:	81a3      	strh	r3, [r4, #12]
    2b22:	b005      	add	sp, #20
    2b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b26:	9a02      	ldr	r2, [sp, #8]
    2b28:	6921      	ldr	r1, [r4, #16]
    2b2a:	f000 fad6 	bl	30da <memcpy>
    2b2e:	89a3      	ldrh	r3, [r4, #12]
    2b30:	4a14      	ldr	r2, [pc, #80]	; (2b84 <__ssputs_r+0xc0>)
    2b32:	401a      	ands	r2, r3
    2b34:	2380      	movs	r3, #128	; 0x80
    2b36:	4313      	orrs	r3, r2
    2b38:	81a3      	strh	r3, [r4, #12]
    2b3a:	9b02      	ldr	r3, [sp, #8]
    2b3c:	6126      	str	r6, [r4, #16]
    2b3e:	18f6      	adds	r6, r6, r3
    2b40:	6026      	str	r6, [r4, #0]
    2b42:	6165      	str	r5, [r4, #20]
    2b44:	9e01      	ldr	r6, [sp, #4]
    2b46:	1aed      	subs	r5, r5, r3
    2b48:	60a5      	str	r5, [r4, #8]
    2b4a:	9b01      	ldr	r3, [sp, #4]
    2b4c:	42b3      	cmp	r3, r6
    2b4e:	d200      	bcs.n	2b52 <__ssputs_r+0x8e>
    2b50:	001e      	movs	r6, r3
    2b52:	0032      	movs	r2, r6
    2b54:	9903      	ldr	r1, [sp, #12]
    2b56:	6820      	ldr	r0, [r4, #0]
    2b58:	f000 fac8 	bl	30ec <memmove>
    2b5c:	68a3      	ldr	r3, [r4, #8]
    2b5e:	2000      	movs	r0, #0
    2b60:	1b9b      	subs	r3, r3, r6
    2b62:	60a3      	str	r3, [r4, #8]
    2b64:	6823      	ldr	r3, [r4, #0]
    2b66:	199e      	adds	r6, r3, r6
    2b68:	6026      	str	r6, [r4, #0]
    2b6a:	e7da      	b.n	2b22 <__ssputs_r+0x5e>
    2b6c:	002a      	movs	r2, r5
    2b6e:	0038      	movs	r0, r7
    2b70:	f000 fb1a 	bl	31a8 <_realloc_r>
    2b74:	1e06      	subs	r6, r0, #0
    2b76:	d1e0      	bne.n	2b3a <__ssputs_r+0x76>
    2b78:	6921      	ldr	r1, [r4, #16]
    2b7a:	0038      	movs	r0, r7
    2b7c:	f000 faca 	bl	3114 <_free_r>
    2b80:	e7c7      	b.n	2b12 <__ssputs_r+0x4e>
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	fffffb7f 	.word	0xfffffb7f

00002b88 <_svfiprintf_r>:
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	b09f      	sub	sp, #124	; 0x7c
    2b8c:	9002      	str	r0, [sp, #8]
    2b8e:	9305      	str	r3, [sp, #20]
    2b90:	898b      	ldrh	r3, [r1, #12]
    2b92:	000f      	movs	r7, r1
    2b94:	0016      	movs	r6, r2
    2b96:	061b      	lsls	r3, r3, #24
    2b98:	d511      	bpl.n	2bbe <_svfiprintf_r+0x36>
    2b9a:	690b      	ldr	r3, [r1, #16]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d10e      	bne.n	2bbe <_svfiprintf_r+0x36>
    2ba0:	2140      	movs	r1, #64	; 0x40
    2ba2:	f7ff ff31 	bl	2a08 <_malloc_r>
    2ba6:	6038      	str	r0, [r7, #0]
    2ba8:	6138      	str	r0, [r7, #16]
    2baa:	2800      	cmp	r0, #0
    2bac:	d105      	bne.n	2bba <_svfiprintf_r+0x32>
    2bae:	230c      	movs	r3, #12
    2bb0:	9a02      	ldr	r2, [sp, #8]
    2bb2:	3801      	subs	r0, #1
    2bb4:	6013      	str	r3, [r2, #0]
    2bb6:	b01f      	add	sp, #124	; 0x7c
    2bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bba:	2340      	movs	r3, #64	; 0x40
    2bbc:	617b      	str	r3, [r7, #20]
    2bbe:	2300      	movs	r3, #0
    2bc0:	ad06      	add	r5, sp, #24
    2bc2:	616b      	str	r3, [r5, #20]
    2bc4:	3320      	adds	r3, #32
    2bc6:	766b      	strb	r3, [r5, #25]
    2bc8:	3310      	adds	r3, #16
    2bca:	76ab      	strb	r3, [r5, #26]
    2bcc:	0034      	movs	r4, r6
    2bce:	7823      	ldrb	r3, [r4, #0]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d147      	bne.n	2c64 <_svfiprintf_r+0xdc>
    2bd4:	1ba3      	subs	r3, r4, r6
    2bd6:	9304      	str	r3, [sp, #16]
    2bd8:	d00d      	beq.n	2bf6 <_svfiprintf_r+0x6e>
    2bda:	1ba3      	subs	r3, r4, r6
    2bdc:	0032      	movs	r2, r6
    2bde:	0039      	movs	r1, r7
    2be0:	9802      	ldr	r0, [sp, #8]
    2be2:	f7ff ff6f 	bl	2ac4 <__ssputs_r>
    2be6:	1c43      	adds	r3, r0, #1
    2be8:	d100      	bne.n	2bec <_svfiprintf_r+0x64>
    2bea:	e0b5      	b.n	2d58 <_svfiprintf_r+0x1d0>
    2bec:	696a      	ldr	r2, [r5, #20]
    2bee:	9b04      	ldr	r3, [sp, #16]
    2bf0:	4694      	mov	ip, r2
    2bf2:	4463      	add	r3, ip
    2bf4:	616b      	str	r3, [r5, #20]
    2bf6:	7823      	ldrb	r3, [r4, #0]
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	d100      	bne.n	2bfe <_svfiprintf_r+0x76>
    2bfc:	e0ac      	b.n	2d58 <_svfiprintf_r+0x1d0>
    2bfe:	2201      	movs	r2, #1
    2c00:	2300      	movs	r3, #0
    2c02:	4252      	negs	r2, r2
    2c04:	606a      	str	r2, [r5, #4]
    2c06:	a902      	add	r1, sp, #8
    2c08:	3254      	adds	r2, #84	; 0x54
    2c0a:	1852      	adds	r2, r2, r1
    2c0c:	3401      	adds	r4, #1
    2c0e:	602b      	str	r3, [r5, #0]
    2c10:	60eb      	str	r3, [r5, #12]
    2c12:	60ab      	str	r3, [r5, #8]
    2c14:	7013      	strb	r3, [r2, #0]
    2c16:	65ab      	str	r3, [r5, #88]	; 0x58
    2c18:	4e58      	ldr	r6, [pc, #352]	; (2d7c <_svfiprintf_r+0x1f4>)
    2c1a:	2205      	movs	r2, #5
    2c1c:	7821      	ldrb	r1, [r4, #0]
    2c1e:	0030      	movs	r0, r6
    2c20:	f000 fa50 	bl	30c4 <memchr>
    2c24:	1c62      	adds	r2, r4, #1
    2c26:	2800      	cmp	r0, #0
    2c28:	d120      	bne.n	2c6c <_svfiprintf_r+0xe4>
    2c2a:	6829      	ldr	r1, [r5, #0]
    2c2c:	06cb      	lsls	r3, r1, #27
    2c2e:	d504      	bpl.n	2c3a <_svfiprintf_r+0xb2>
    2c30:	2353      	movs	r3, #83	; 0x53
    2c32:	ae02      	add	r6, sp, #8
    2c34:	3020      	adds	r0, #32
    2c36:	199b      	adds	r3, r3, r6
    2c38:	7018      	strb	r0, [r3, #0]
    2c3a:	070b      	lsls	r3, r1, #28
    2c3c:	d504      	bpl.n	2c48 <_svfiprintf_r+0xc0>
    2c3e:	2353      	movs	r3, #83	; 0x53
    2c40:	202b      	movs	r0, #43	; 0x2b
    2c42:	ae02      	add	r6, sp, #8
    2c44:	199b      	adds	r3, r3, r6
    2c46:	7018      	strb	r0, [r3, #0]
    2c48:	7823      	ldrb	r3, [r4, #0]
    2c4a:	2b2a      	cmp	r3, #42	; 0x2a
    2c4c:	d016      	beq.n	2c7c <_svfiprintf_r+0xf4>
    2c4e:	2000      	movs	r0, #0
    2c50:	210a      	movs	r1, #10
    2c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c54:	7822      	ldrb	r2, [r4, #0]
    2c56:	3a30      	subs	r2, #48	; 0x30
    2c58:	2a09      	cmp	r2, #9
    2c5a:	d955      	bls.n	2d08 <_svfiprintf_r+0x180>
    2c5c:	2800      	cmp	r0, #0
    2c5e:	d015      	beq.n	2c8c <_svfiprintf_r+0x104>
    2c60:	9309      	str	r3, [sp, #36]	; 0x24
    2c62:	e013      	b.n	2c8c <_svfiprintf_r+0x104>
    2c64:	2b25      	cmp	r3, #37	; 0x25
    2c66:	d0b5      	beq.n	2bd4 <_svfiprintf_r+0x4c>
    2c68:	3401      	adds	r4, #1
    2c6a:	e7b0      	b.n	2bce <_svfiprintf_r+0x46>
    2c6c:	2301      	movs	r3, #1
    2c6e:	1b80      	subs	r0, r0, r6
    2c70:	4083      	lsls	r3, r0
    2c72:	6829      	ldr	r1, [r5, #0]
    2c74:	0014      	movs	r4, r2
    2c76:	430b      	orrs	r3, r1
    2c78:	602b      	str	r3, [r5, #0]
    2c7a:	e7cd      	b.n	2c18 <_svfiprintf_r+0x90>
    2c7c:	9b05      	ldr	r3, [sp, #20]
    2c7e:	1d18      	adds	r0, r3, #4
    2c80:	681b      	ldr	r3, [r3, #0]
    2c82:	9005      	str	r0, [sp, #20]
    2c84:	2b00      	cmp	r3, #0
    2c86:	db39      	blt.n	2cfc <_svfiprintf_r+0x174>
    2c88:	9309      	str	r3, [sp, #36]	; 0x24
    2c8a:	0014      	movs	r4, r2
    2c8c:	7823      	ldrb	r3, [r4, #0]
    2c8e:	2b2e      	cmp	r3, #46	; 0x2e
    2c90:	d10b      	bne.n	2caa <_svfiprintf_r+0x122>
    2c92:	7863      	ldrb	r3, [r4, #1]
    2c94:	1c62      	adds	r2, r4, #1
    2c96:	2b2a      	cmp	r3, #42	; 0x2a
    2c98:	d13e      	bne.n	2d18 <_svfiprintf_r+0x190>
    2c9a:	9b05      	ldr	r3, [sp, #20]
    2c9c:	3402      	adds	r4, #2
    2c9e:	1d1a      	adds	r2, r3, #4
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	9205      	str	r2, [sp, #20]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	db34      	blt.n	2d12 <_svfiprintf_r+0x18a>
    2ca8:	9307      	str	r3, [sp, #28]
    2caa:	4e35      	ldr	r6, [pc, #212]	; (2d80 <_svfiprintf_r+0x1f8>)
    2cac:	7821      	ldrb	r1, [r4, #0]
    2cae:	2203      	movs	r2, #3
    2cb0:	0030      	movs	r0, r6
    2cb2:	f000 fa07 	bl	30c4 <memchr>
    2cb6:	2800      	cmp	r0, #0
    2cb8:	d006      	beq.n	2cc8 <_svfiprintf_r+0x140>
    2cba:	2340      	movs	r3, #64	; 0x40
    2cbc:	1b80      	subs	r0, r0, r6
    2cbe:	4083      	lsls	r3, r0
    2cc0:	682a      	ldr	r2, [r5, #0]
    2cc2:	3401      	adds	r4, #1
    2cc4:	4313      	orrs	r3, r2
    2cc6:	602b      	str	r3, [r5, #0]
    2cc8:	7821      	ldrb	r1, [r4, #0]
    2cca:	2206      	movs	r2, #6
    2ccc:	482d      	ldr	r0, [pc, #180]	; (2d84 <_svfiprintf_r+0x1fc>)
    2cce:	1c66      	adds	r6, r4, #1
    2cd0:	7629      	strb	r1, [r5, #24]
    2cd2:	f000 f9f7 	bl	30c4 <memchr>
    2cd6:	2800      	cmp	r0, #0
    2cd8:	d046      	beq.n	2d68 <_svfiprintf_r+0x1e0>
    2cda:	4b2b      	ldr	r3, [pc, #172]	; (2d88 <_svfiprintf_r+0x200>)
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d12f      	bne.n	2d40 <_svfiprintf_r+0x1b8>
    2ce0:	6829      	ldr	r1, [r5, #0]
    2ce2:	9b05      	ldr	r3, [sp, #20]
    2ce4:	2207      	movs	r2, #7
    2ce6:	05c9      	lsls	r1, r1, #23
    2ce8:	d528      	bpl.n	2d3c <_svfiprintf_r+0x1b4>
    2cea:	189b      	adds	r3, r3, r2
    2cec:	4393      	bics	r3, r2
    2cee:	3308      	adds	r3, #8
    2cf0:	9305      	str	r3, [sp, #20]
    2cf2:	696b      	ldr	r3, [r5, #20]
    2cf4:	9a03      	ldr	r2, [sp, #12]
    2cf6:	189b      	adds	r3, r3, r2
    2cf8:	616b      	str	r3, [r5, #20]
    2cfa:	e767      	b.n	2bcc <_svfiprintf_r+0x44>
    2cfc:	425b      	negs	r3, r3
    2cfe:	60eb      	str	r3, [r5, #12]
    2d00:	2302      	movs	r3, #2
    2d02:	430b      	orrs	r3, r1
    2d04:	602b      	str	r3, [r5, #0]
    2d06:	e7c0      	b.n	2c8a <_svfiprintf_r+0x102>
    2d08:	434b      	muls	r3, r1
    2d0a:	3401      	adds	r4, #1
    2d0c:	189b      	adds	r3, r3, r2
    2d0e:	2001      	movs	r0, #1
    2d10:	e7a0      	b.n	2c54 <_svfiprintf_r+0xcc>
    2d12:	2301      	movs	r3, #1
    2d14:	425b      	negs	r3, r3
    2d16:	e7c7      	b.n	2ca8 <_svfiprintf_r+0x120>
    2d18:	2300      	movs	r3, #0
    2d1a:	0014      	movs	r4, r2
    2d1c:	200a      	movs	r0, #10
    2d1e:	001a      	movs	r2, r3
    2d20:	606b      	str	r3, [r5, #4]
    2d22:	7821      	ldrb	r1, [r4, #0]
    2d24:	3930      	subs	r1, #48	; 0x30
    2d26:	2909      	cmp	r1, #9
    2d28:	d903      	bls.n	2d32 <_svfiprintf_r+0x1aa>
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d0bd      	beq.n	2caa <_svfiprintf_r+0x122>
    2d2e:	9207      	str	r2, [sp, #28]
    2d30:	e7bb      	b.n	2caa <_svfiprintf_r+0x122>
    2d32:	4342      	muls	r2, r0
    2d34:	3401      	adds	r4, #1
    2d36:	1852      	adds	r2, r2, r1
    2d38:	2301      	movs	r3, #1
    2d3a:	e7f2      	b.n	2d22 <_svfiprintf_r+0x19a>
    2d3c:	3307      	adds	r3, #7
    2d3e:	e7d5      	b.n	2cec <_svfiprintf_r+0x164>
    2d40:	ab05      	add	r3, sp, #20
    2d42:	9300      	str	r3, [sp, #0]
    2d44:	003a      	movs	r2, r7
    2d46:	4b11      	ldr	r3, [pc, #68]	; (2d8c <_svfiprintf_r+0x204>)
    2d48:	0029      	movs	r1, r5
    2d4a:	9802      	ldr	r0, [sp, #8]
    2d4c:	e000      	b.n	2d50 <_svfiprintf_r+0x1c8>
    2d4e:	bf00      	nop
    2d50:	9003      	str	r0, [sp, #12]
    2d52:	9b03      	ldr	r3, [sp, #12]
    2d54:	3301      	adds	r3, #1
    2d56:	d1cc      	bne.n	2cf2 <_svfiprintf_r+0x16a>
    2d58:	89bb      	ldrh	r3, [r7, #12]
    2d5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2d5c:	065b      	lsls	r3, r3, #25
    2d5e:	d400      	bmi.n	2d62 <_svfiprintf_r+0x1da>
    2d60:	e729      	b.n	2bb6 <_svfiprintf_r+0x2e>
    2d62:	2001      	movs	r0, #1
    2d64:	4240      	negs	r0, r0
    2d66:	e726      	b.n	2bb6 <_svfiprintf_r+0x2e>
    2d68:	ab05      	add	r3, sp, #20
    2d6a:	9300      	str	r3, [sp, #0]
    2d6c:	003a      	movs	r2, r7
    2d6e:	4b07      	ldr	r3, [pc, #28]	; (2d8c <_svfiprintf_r+0x204>)
    2d70:	0029      	movs	r1, r5
    2d72:	9802      	ldr	r0, [sp, #8]
    2d74:	f000 f87a 	bl	2e6c <_printf_i>
    2d78:	e7ea      	b.n	2d50 <_svfiprintf_r+0x1c8>
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	000038c0 	.word	0x000038c0
    2d80:	000038c6 	.word	0x000038c6
    2d84:	000038ca 	.word	0x000038ca
    2d88:	00000000 	.word	0x00000000
    2d8c:	00002ac5 	.word	0x00002ac5

00002d90 <_printf_common>:
    2d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d92:	0015      	movs	r5, r2
    2d94:	9301      	str	r3, [sp, #4]
    2d96:	688a      	ldr	r2, [r1, #8]
    2d98:	690b      	ldr	r3, [r1, #16]
    2d9a:	9000      	str	r0, [sp, #0]
    2d9c:	000c      	movs	r4, r1
    2d9e:	4293      	cmp	r3, r2
    2da0:	da00      	bge.n	2da4 <_printf_common+0x14>
    2da2:	0013      	movs	r3, r2
    2da4:	0022      	movs	r2, r4
    2da6:	602b      	str	r3, [r5, #0]
    2da8:	3243      	adds	r2, #67	; 0x43
    2daa:	7812      	ldrb	r2, [r2, #0]
    2dac:	2a00      	cmp	r2, #0
    2dae:	d001      	beq.n	2db4 <_printf_common+0x24>
    2db0:	3301      	adds	r3, #1
    2db2:	602b      	str	r3, [r5, #0]
    2db4:	6823      	ldr	r3, [r4, #0]
    2db6:	069b      	lsls	r3, r3, #26
    2db8:	d502      	bpl.n	2dc0 <_printf_common+0x30>
    2dba:	682b      	ldr	r3, [r5, #0]
    2dbc:	3302      	adds	r3, #2
    2dbe:	602b      	str	r3, [r5, #0]
    2dc0:	2706      	movs	r7, #6
    2dc2:	6823      	ldr	r3, [r4, #0]
    2dc4:	401f      	ands	r7, r3
    2dc6:	d027      	beq.n	2e18 <_printf_common+0x88>
    2dc8:	0023      	movs	r3, r4
    2dca:	3343      	adds	r3, #67	; 0x43
    2dcc:	781b      	ldrb	r3, [r3, #0]
    2dce:	1e5a      	subs	r2, r3, #1
    2dd0:	4193      	sbcs	r3, r2
    2dd2:	6822      	ldr	r2, [r4, #0]
    2dd4:	0692      	lsls	r2, r2, #26
    2dd6:	d430      	bmi.n	2e3a <_printf_common+0xaa>
    2dd8:	0022      	movs	r2, r4
    2dda:	9901      	ldr	r1, [sp, #4]
    2ddc:	3243      	adds	r2, #67	; 0x43
    2dde:	9800      	ldr	r0, [sp, #0]
    2de0:	9e08      	ldr	r6, [sp, #32]
    2de2:	47b0      	blx	r6
    2de4:	1c43      	adds	r3, r0, #1
    2de6:	d025      	beq.n	2e34 <_printf_common+0xa4>
    2de8:	2306      	movs	r3, #6
    2dea:	6820      	ldr	r0, [r4, #0]
    2dec:	682a      	ldr	r2, [r5, #0]
    2dee:	68e1      	ldr	r1, [r4, #12]
    2df0:	4003      	ands	r3, r0
    2df2:	2500      	movs	r5, #0
    2df4:	2b04      	cmp	r3, #4
    2df6:	d103      	bne.n	2e00 <_printf_common+0x70>
    2df8:	1a8d      	subs	r5, r1, r2
    2dfa:	43eb      	mvns	r3, r5
    2dfc:	17db      	asrs	r3, r3, #31
    2dfe:	401d      	ands	r5, r3
    2e00:	68a3      	ldr	r3, [r4, #8]
    2e02:	6922      	ldr	r2, [r4, #16]
    2e04:	4293      	cmp	r3, r2
    2e06:	dd01      	ble.n	2e0c <_printf_common+0x7c>
    2e08:	1a9b      	subs	r3, r3, r2
    2e0a:	18ed      	adds	r5, r5, r3
    2e0c:	2700      	movs	r7, #0
    2e0e:	42bd      	cmp	r5, r7
    2e10:	d120      	bne.n	2e54 <_printf_common+0xc4>
    2e12:	2000      	movs	r0, #0
    2e14:	e010      	b.n	2e38 <_printf_common+0xa8>
    2e16:	3701      	adds	r7, #1
    2e18:	68e3      	ldr	r3, [r4, #12]
    2e1a:	682a      	ldr	r2, [r5, #0]
    2e1c:	1a9b      	subs	r3, r3, r2
    2e1e:	429f      	cmp	r7, r3
    2e20:	dad2      	bge.n	2dc8 <_printf_common+0x38>
    2e22:	0022      	movs	r2, r4
    2e24:	2301      	movs	r3, #1
    2e26:	3219      	adds	r2, #25
    2e28:	9901      	ldr	r1, [sp, #4]
    2e2a:	9800      	ldr	r0, [sp, #0]
    2e2c:	9e08      	ldr	r6, [sp, #32]
    2e2e:	47b0      	blx	r6
    2e30:	1c43      	adds	r3, r0, #1
    2e32:	d1f0      	bne.n	2e16 <_printf_common+0x86>
    2e34:	2001      	movs	r0, #1
    2e36:	4240      	negs	r0, r0
    2e38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2e3a:	2030      	movs	r0, #48	; 0x30
    2e3c:	18e1      	adds	r1, r4, r3
    2e3e:	3143      	adds	r1, #67	; 0x43
    2e40:	7008      	strb	r0, [r1, #0]
    2e42:	0021      	movs	r1, r4
    2e44:	1c5a      	adds	r2, r3, #1
    2e46:	3145      	adds	r1, #69	; 0x45
    2e48:	7809      	ldrb	r1, [r1, #0]
    2e4a:	18a2      	adds	r2, r4, r2
    2e4c:	3243      	adds	r2, #67	; 0x43
    2e4e:	3302      	adds	r3, #2
    2e50:	7011      	strb	r1, [r2, #0]
    2e52:	e7c1      	b.n	2dd8 <_printf_common+0x48>
    2e54:	0022      	movs	r2, r4
    2e56:	2301      	movs	r3, #1
    2e58:	321a      	adds	r2, #26
    2e5a:	9901      	ldr	r1, [sp, #4]
    2e5c:	9800      	ldr	r0, [sp, #0]
    2e5e:	9e08      	ldr	r6, [sp, #32]
    2e60:	47b0      	blx	r6
    2e62:	1c43      	adds	r3, r0, #1
    2e64:	d0e6      	beq.n	2e34 <_printf_common+0xa4>
    2e66:	3701      	adds	r7, #1
    2e68:	e7d1      	b.n	2e0e <_printf_common+0x7e>
	...

00002e6c <_printf_i>:
    2e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6e:	b08b      	sub	sp, #44	; 0x2c
    2e70:	9206      	str	r2, [sp, #24]
    2e72:	000a      	movs	r2, r1
    2e74:	3243      	adds	r2, #67	; 0x43
    2e76:	9307      	str	r3, [sp, #28]
    2e78:	9005      	str	r0, [sp, #20]
    2e7a:	9204      	str	r2, [sp, #16]
    2e7c:	7e0a      	ldrb	r2, [r1, #24]
    2e7e:	000c      	movs	r4, r1
    2e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2e82:	2a6e      	cmp	r2, #110	; 0x6e
    2e84:	d100      	bne.n	2e88 <_printf_i+0x1c>
    2e86:	e08f      	b.n	2fa8 <_printf_i+0x13c>
    2e88:	d817      	bhi.n	2eba <_printf_i+0x4e>
    2e8a:	2a63      	cmp	r2, #99	; 0x63
    2e8c:	d02c      	beq.n	2ee8 <_printf_i+0x7c>
    2e8e:	d808      	bhi.n	2ea2 <_printf_i+0x36>
    2e90:	2a00      	cmp	r2, #0
    2e92:	d100      	bne.n	2e96 <_printf_i+0x2a>
    2e94:	e099      	b.n	2fca <_printf_i+0x15e>
    2e96:	2a58      	cmp	r2, #88	; 0x58
    2e98:	d054      	beq.n	2f44 <_printf_i+0xd8>
    2e9a:	0026      	movs	r6, r4
    2e9c:	3642      	adds	r6, #66	; 0x42
    2e9e:	7032      	strb	r2, [r6, #0]
    2ea0:	e029      	b.n	2ef6 <_printf_i+0x8a>
    2ea2:	2a64      	cmp	r2, #100	; 0x64
    2ea4:	d001      	beq.n	2eaa <_printf_i+0x3e>
    2ea6:	2a69      	cmp	r2, #105	; 0x69
    2ea8:	d1f7      	bne.n	2e9a <_printf_i+0x2e>
    2eaa:	6821      	ldr	r1, [r4, #0]
    2eac:	681a      	ldr	r2, [r3, #0]
    2eae:	0608      	lsls	r0, r1, #24
    2eb0:	d523      	bpl.n	2efa <_printf_i+0x8e>
    2eb2:	1d11      	adds	r1, r2, #4
    2eb4:	6019      	str	r1, [r3, #0]
    2eb6:	6815      	ldr	r5, [r2, #0]
    2eb8:	e025      	b.n	2f06 <_printf_i+0x9a>
    2eba:	2a73      	cmp	r2, #115	; 0x73
    2ebc:	d100      	bne.n	2ec0 <_printf_i+0x54>
    2ebe:	e088      	b.n	2fd2 <_printf_i+0x166>
    2ec0:	d808      	bhi.n	2ed4 <_printf_i+0x68>
    2ec2:	2a6f      	cmp	r2, #111	; 0x6f
    2ec4:	d029      	beq.n	2f1a <_printf_i+0xae>
    2ec6:	2a70      	cmp	r2, #112	; 0x70
    2ec8:	d1e7      	bne.n	2e9a <_printf_i+0x2e>
    2eca:	2220      	movs	r2, #32
    2ecc:	6809      	ldr	r1, [r1, #0]
    2ece:	430a      	orrs	r2, r1
    2ed0:	6022      	str	r2, [r4, #0]
    2ed2:	e003      	b.n	2edc <_printf_i+0x70>
    2ed4:	2a75      	cmp	r2, #117	; 0x75
    2ed6:	d020      	beq.n	2f1a <_printf_i+0xae>
    2ed8:	2a78      	cmp	r2, #120	; 0x78
    2eda:	d1de      	bne.n	2e9a <_printf_i+0x2e>
    2edc:	0022      	movs	r2, r4
    2ede:	2178      	movs	r1, #120	; 0x78
    2ee0:	3245      	adds	r2, #69	; 0x45
    2ee2:	7011      	strb	r1, [r2, #0]
    2ee4:	4a6c      	ldr	r2, [pc, #432]	; (3098 <_printf_i+0x22c>)
    2ee6:	e030      	b.n	2f4a <_printf_i+0xde>
    2ee8:	000e      	movs	r6, r1
    2eea:	681a      	ldr	r2, [r3, #0]
    2eec:	3642      	adds	r6, #66	; 0x42
    2eee:	1d11      	adds	r1, r2, #4
    2ef0:	6019      	str	r1, [r3, #0]
    2ef2:	6813      	ldr	r3, [r2, #0]
    2ef4:	7033      	strb	r3, [r6, #0]
    2ef6:	2301      	movs	r3, #1
    2ef8:	e079      	b.n	2fee <_printf_i+0x182>
    2efa:	0649      	lsls	r1, r1, #25
    2efc:	d5d9      	bpl.n	2eb2 <_printf_i+0x46>
    2efe:	1d11      	adds	r1, r2, #4
    2f00:	6019      	str	r1, [r3, #0]
    2f02:	2300      	movs	r3, #0
    2f04:	5ed5      	ldrsh	r5, [r2, r3]
    2f06:	2d00      	cmp	r5, #0
    2f08:	da03      	bge.n	2f12 <_printf_i+0xa6>
    2f0a:	232d      	movs	r3, #45	; 0x2d
    2f0c:	9a04      	ldr	r2, [sp, #16]
    2f0e:	426d      	negs	r5, r5
    2f10:	7013      	strb	r3, [r2, #0]
    2f12:	4b62      	ldr	r3, [pc, #392]	; (309c <_printf_i+0x230>)
    2f14:	270a      	movs	r7, #10
    2f16:	9303      	str	r3, [sp, #12]
    2f18:	e02f      	b.n	2f7a <_printf_i+0x10e>
    2f1a:	6820      	ldr	r0, [r4, #0]
    2f1c:	6819      	ldr	r1, [r3, #0]
    2f1e:	0605      	lsls	r5, r0, #24
    2f20:	d503      	bpl.n	2f2a <_printf_i+0xbe>
    2f22:	1d08      	adds	r0, r1, #4
    2f24:	6018      	str	r0, [r3, #0]
    2f26:	680d      	ldr	r5, [r1, #0]
    2f28:	e005      	b.n	2f36 <_printf_i+0xca>
    2f2a:	0640      	lsls	r0, r0, #25
    2f2c:	d5f9      	bpl.n	2f22 <_printf_i+0xb6>
    2f2e:	680d      	ldr	r5, [r1, #0]
    2f30:	1d08      	adds	r0, r1, #4
    2f32:	6018      	str	r0, [r3, #0]
    2f34:	b2ad      	uxth	r5, r5
    2f36:	4b59      	ldr	r3, [pc, #356]	; (309c <_printf_i+0x230>)
    2f38:	2708      	movs	r7, #8
    2f3a:	9303      	str	r3, [sp, #12]
    2f3c:	2a6f      	cmp	r2, #111	; 0x6f
    2f3e:	d018      	beq.n	2f72 <_printf_i+0x106>
    2f40:	270a      	movs	r7, #10
    2f42:	e016      	b.n	2f72 <_printf_i+0x106>
    2f44:	3145      	adds	r1, #69	; 0x45
    2f46:	700a      	strb	r2, [r1, #0]
    2f48:	4a54      	ldr	r2, [pc, #336]	; (309c <_printf_i+0x230>)
    2f4a:	9203      	str	r2, [sp, #12]
    2f4c:	681a      	ldr	r2, [r3, #0]
    2f4e:	6821      	ldr	r1, [r4, #0]
    2f50:	1d10      	adds	r0, r2, #4
    2f52:	6018      	str	r0, [r3, #0]
    2f54:	6815      	ldr	r5, [r2, #0]
    2f56:	0608      	lsls	r0, r1, #24
    2f58:	d522      	bpl.n	2fa0 <_printf_i+0x134>
    2f5a:	07cb      	lsls	r3, r1, #31
    2f5c:	d502      	bpl.n	2f64 <_printf_i+0xf8>
    2f5e:	2320      	movs	r3, #32
    2f60:	4319      	orrs	r1, r3
    2f62:	6021      	str	r1, [r4, #0]
    2f64:	2710      	movs	r7, #16
    2f66:	2d00      	cmp	r5, #0
    2f68:	d103      	bne.n	2f72 <_printf_i+0x106>
    2f6a:	2320      	movs	r3, #32
    2f6c:	6822      	ldr	r2, [r4, #0]
    2f6e:	439a      	bics	r2, r3
    2f70:	6022      	str	r2, [r4, #0]
    2f72:	0023      	movs	r3, r4
    2f74:	2200      	movs	r2, #0
    2f76:	3343      	adds	r3, #67	; 0x43
    2f78:	701a      	strb	r2, [r3, #0]
    2f7a:	6863      	ldr	r3, [r4, #4]
    2f7c:	60a3      	str	r3, [r4, #8]
    2f7e:	2b00      	cmp	r3, #0
    2f80:	db5c      	blt.n	303c <_printf_i+0x1d0>
    2f82:	2204      	movs	r2, #4
    2f84:	6821      	ldr	r1, [r4, #0]
    2f86:	4391      	bics	r1, r2
    2f88:	6021      	str	r1, [r4, #0]
    2f8a:	2d00      	cmp	r5, #0
    2f8c:	d158      	bne.n	3040 <_printf_i+0x1d4>
    2f8e:	9e04      	ldr	r6, [sp, #16]
    2f90:	2b00      	cmp	r3, #0
    2f92:	d064      	beq.n	305e <_printf_i+0x1f2>
    2f94:	0026      	movs	r6, r4
    2f96:	9b03      	ldr	r3, [sp, #12]
    2f98:	3642      	adds	r6, #66	; 0x42
    2f9a:	781b      	ldrb	r3, [r3, #0]
    2f9c:	7033      	strb	r3, [r6, #0]
    2f9e:	e05e      	b.n	305e <_printf_i+0x1f2>
    2fa0:	0648      	lsls	r0, r1, #25
    2fa2:	d5da      	bpl.n	2f5a <_printf_i+0xee>
    2fa4:	b2ad      	uxth	r5, r5
    2fa6:	e7d8      	b.n	2f5a <_printf_i+0xee>
    2fa8:	6809      	ldr	r1, [r1, #0]
    2faa:	681a      	ldr	r2, [r3, #0]
    2fac:	0608      	lsls	r0, r1, #24
    2fae:	d505      	bpl.n	2fbc <_printf_i+0x150>
    2fb0:	1d11      	adds	r1, r2, #4
    2fb2:	6019      	str	r1, [r3, #0]
    2fb4:	6813      	ldr	r3, [r2, #0]
    2fb6:	6962      	ldr	r2, [r4, #20]
    2fb8:	601a      	str	r2, [r3, #0]
    2fba:	e006      	b.n	2fca <_printf_i+0x15e>
    2fbc:	0649      	lsls	r1, r1, #25
    2fbe:	d5f7      	bpl.n	2fb0 <_printf_i+0x144>
    2fc0:	1d11      	adds	r1, r2, #4
    2fc2:	6019      	str	r1, [r3, #0]
    2fc4:	6813      	ldr	r3, [r2, #0]
    2fc6:	8aa2      	ldrh	r2, [r4, #20]
    2fc8:	801a      	strh	r2, [r3, #0]
    2fca:	2300      	movs	r3, #0
    2fcc:	9e04      	ldr	r6, [sp, #16]
    2fce:	6123      	str	r3, [r4, #16]
    2fd0:	e054      	b.n	307c <_printf_i+0x210>
    2fd2:	681a      	ldr	r2, [r3, #0]
    2fd4:	1d11      	adds	r1, r2, #4
    2fd6:	6019      	str	r1, [r3, #0]
    2fd8:	6816      	ldr	r6, [r2, #0]
    2fda:	2100      	movs	r1, #0
    2fdc:	6862      	ldr	r2, [r4, #4]
    2fde:	0030      	movs	r0, r6
    2fe0:	f000 f870 	bl	30c4 <memchr>
    2fe4:	2800      	cmp	r0, #0
    2fe6:	d001      	beq.n	2fec <_printf_i+0x180>
    2fe8:	1b80      	subs	r0, r0, r6
    2fea:	6060      	str	r0, [r4, #4]
    2fec:	6863      	ldr	r3, [r4, #4]
    2fee:	6123      	str	r3, [r4, #16]
    2ff0:	2300      	movs	r3, #0
    2ff2:	9a04      	ldr	r2, [sp, #16]
    2ff4:	7013      	strb	r3, [r2, #0]
    2ff6:	e041      	b.n	307c <_printf_i+0x210>
    2ff8:	6923      	ldr	r3, [r4, #16]
    2ffa:	0032      	movs	r2, r6
    2ffc:	9906      	ldr	r1, [sp, #24]
    2ffe:	9805      	ldr	r0, [sp, #20]
    3000:	9d07      	ldr	r5, [sp, #28]
    3002:	47a8      	blx	r5
    3004:	1c43      	adds	r3, r0, #1
    3006:	d043      	beq.n	3090 <_printf_i+0x224>
    3008:	6823      	ldr	r3, [r4, #0]
    300a:	2500      	movs	r5, #0
    300c:	079b      	lsls	r3, r3, #30
    300e:	d40f      	bmi.n	3030 <_printf_i+0x1c4>
    3010:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3012:	68e0      	ldr	r0, [r4, #12]
    3014:	4298      	cmp	r0, r3
    3016:	da3d      	bge.n	3094 <_printf_i+0x228>
    3018:	0018      	movs	r0, r3
    301a:	e03b      	b.n	3094 <_printf_i+0x228>
    301c:	0022      	movs	r2, r4
    301e:	2301      	movs	r3, #1
    3020:	3219      	adds	r2, #25
    3022:	9906      	ldr	r1, [sp, #24]
    3024:	9805      	ldr	r0, [sp, #20]
    3026:	9e07      	ldr	r6, [sp, #28]
    3028:	47b0      	blx	r6
    302a:	1c43      	adds	r3, r0, #1
    302c:	d030      	beq.n	3090 <_printf_i+0x224>
    302e:	3501      	adds	r5, #1
    3030:	68e3      	ldr	r3, [r4, #12]
    3032:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3034:	1a9b      	subs	r3, r3, r2
    3036:	429d      	cmp	r5, r3
    3038:	dbf0      	blt.n	301c <_printf_i+0x1b0>
    303a:	e7e9      	b.n	3010 <_printf_i+0x1a4>
    303c:	2d00      	cmp	r5, #0
    303e:	d0a9      	beq.n	2f94 <_printf_i+0x128>
    3040:	9e04      	ldr	r6, [sp, #16]
    3042:	0028      	movs	r0, r5
    3044:	0039      	movs	r1, r7
    3046:	f7fe ff9b 	bl	1f80 <__aeabi_uidivmod>
    304a:	9b03      	ldr	r3, [sp, #12]
    304c:	3e01      	subs	r6, #1
    304e:	5c5b      	ldrb	r3, [r3, r1]
    3050:	0028      	movs	r0, r5
    3052:	7033      	strb	r3, [r6, #0]
    3054:	0039      	movs	r1, r7
    3056:	f7fe ff0d 	bl	1e74 <__udivsi3>
    305a:	1e05      	subs	r5, r0, #0
    305c:	d1f1      	bne.n	3042 <_printf_i+0x1d6>
    305e:	2f08      	cmp	r7, #8
    3060:	d109      	bne.n	3076 <_printf_i+0x20a>
    3062:	6823      	ldr	r3, [r4, #0]
    3064:	07db      	lsls	r3, r3, #31
    3066:	d506      	bpl.n	3076 <_printf_i+0x20a>
    3068:	6863      	ldr	r3, [r4, #4]
    306a:	6922      	ldr	r2, [r4, #16]
    306c:	4293      	cmp	r3, r2
    306e:	dc02      	bgt.n	3076 <_printf_i+0x20a>
    3070:	2330      	movs	r3, #48	; 0x30
    3072:	3e01      	subs	r6, #1
    3074:	7033      	strb	r3, [r6, #0]
    3076:	9b04      	ldr	r3, [sp, #16]
    3078:	1b9b      	subs	r3, r3, r6
    307a:	6123      	str	r3, [r4, #16]
    307c:	9b07      	ldr	r3, [sp, #28]
    307e:	aa09      	add	r2, sp, #36	; 0x24
    3080:	9300      	str	r3, [sp, #0]
    3082:	0021      	movs	r1, r4
    3084:	9b06      	ldr	r3, [sp, #24]
    3086:	9805      	ldr	r0, [sp, #20]
    3088:	f7ff fe82 	bl	2d90 <_printf_common>
    308c:	1c43      	adds	r3, r0, #1
    308e:	d1b3      	bne.n	2ff8 <_printf_i+0x18c>
    3090:	2001      	movs	r0, #1
    3092:	4240      	negs	r0, r0
    3094:	b00b      	add	sp, #44	; 0x2c
    3096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3098:	000038e2 	.word	0x000038e2
    309c:	000038d1 	.word	0x000038d1

000030a0 <_sbrk_r>:
    30a0:	2300      	movs	r3, #0
    30a2:	b570      	push	{r4, r5, r6, lr}
    30a4:	4c06      	ldr	r4, [pc, #24]	; (30c0 <_sbrk_r+0x20>)
    30a6:	0005      	movs	r5, r0
    30a8:	0008      	movs	r0, r1
    30aa:	6023      	str	r3, [r4, #0]
    30ac:	f7fd fae8 	bl	680 <_sbrk>
    30b0:	1c43      	adds	r3, r0, #1
    30b2:	d103      	bne.n	30bc <_sbrk_r+0x1c>
    30b4:	6823      	ldr	r3, [r4, #0]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d000      	beq.n	30bc <_sbrk_r+0x1c>
    30ba:	602b      	str	r3, [r5, #0]
    30bc:	bd70      	pop	{r4, r5, r6, pc}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	2000017c 	.word	0x2000017c

000030c4 <memchr>:
    30c4:	b2c9      	uxtb	r1, r1
    30c6:	1882      	adds	r2, r0, r2
    30c8:	4290      	cmp	r0, r2
    30ca:	d101      	bne.n	30d0 <memchr+0xc>
    30cc:	2000      	movs	r0, #0
    30ce:	4770      	bx	lr
    30d0:	7803      	ldrb	r3, [r0, #0]
    30d2:	428b      	cmp	r3, r1
    30d4:	d0fb      	beq.n	30ce <memchr+0xa>
    30d6:	3001      	adds	r0, #1
    30d8:	e7f6      	b.n	30c8 <memchr+0x4>

000030da <memcpy>:
    30da:	2300      	movs	r3, #0
    30dc:	b510      	push	{r4, lr}
    30de:	429a      	cmp	r2, r3
    30e0:	d100      	bne.n	30e4 <memcpy+0xa>
    30e2:	bd10      	pop	{r4, pc}
    30e4:	5ccc      	ldrb	r4, [r1, r3]
    30e6:	54c4      	strb	r4, [r0, r3]
    30e8:	3301      	adds	r3, #1
    30ea:	e7f8      	b.n	30de <memcpy+0x4>

000030ec <memmove>:
    30ec:	b510      	push	{r4, lr}
    30ee:	4288      	cmp	r0, r1
    30f0:	d902      	bls.n	30f8 <memmove+0xc>
    30f2:	188b      	adds	r3, r1, r2
    30f4:	4298      	cmp	r0, r3
    30f6:	d308      	bcc.n	310a <memmove+0x1e>
    30f8:	2300      	movs	r3, #0
    30fa:	429a      	cmp	r2, r3
    30fc:	d007      	beq.n	310e <memmove+0x22>
    30fe:	5ccc      	ldrb	r4, [r1, r3]
    3100:	54c4      	strb	r4, [r0, r3]
    3102:	3301      	adds	r3, #1
    3104:	e7f9      	b.n	30fa <memmove+0xe>
    3106:	5c8b      	ldrb	r3, [r1, r2]
    3108:	5483      	strb	r3, [r0, r2]
    310a:	3a01      	subs	r2, #1
    310c:	d2fb      	bcs.n	3106 <memmove+0x1a>
    310e:	bd10      	pop	{r4, pc}

00003110 <__malloc_lock>:
    3110:	4770      	bx	lr

00003112 <__malloc_unlock>:
    3112:	4770      	bx	lr

00003114 <_free_r>:
    3114:	b570      	push	{r4, r5, r6, lr}
    3116:	0005      	movs	r5, r0
    3118:	2900      	cmp	r1, #0
    311a:	d010      	beq.n	313e <_free_r+0x2a>
    311c:	1f0c      	subs	r4, r1, #4
    311e:	6823      	ldr	r3, [r4, #0]
    3120:	2b00      	cmp	r3, #0
    3122:	da00      	bge.n	3126 <_free_r+0x12>
    3124:	18e4      	adds	r4, r4, r3
    3126:	0028      	movs	r0, r5
    3128:	f7ff fff2 	bl	3110 <__malloc_lock>
    312c:	4a1d      	ldr	r2, [pc, #116]	; (31a4 <_free_r+0x90>)
    312e:	6813      	ldr	r3, [r2, #0]
    3130:	2b00      	cmp	r3, #0
    3132:	d105      	bne.n	3140 <_free_r+0x2c>
    3134:	6063      	str	r3, [r4, #4]
    3136:	6014      	str	r4, [r2, #0]
    3138:	0028      	movs	r0, r5
    313a:	f7ff ffea 	bl	3112 <__malloc_unlock>
    313e:	bd70      	pop	{r4, r5, r6, pc}
    3140:	42a3      	cmp	r3, r4
    3142:	d909      	bls.n	3158 <_free_r+0x44>
    3144:	6821      	ldr	r1, [r4, #0]
    3146:	1860      	adds	r0, r4, r1
    3148:	4283      	cmp	r3, r0
    314a:	d1f3      	bne.n	3134 <_free_r+0x20>
    314c:	6818      	ldr	r0, [r3, #0]
    314e:	685b      	ldr	r3, [r3, #4]
    3150:	1841      	adds	r1, r0, r1
    3152:	6021      	str	r1, [r4, #0]
    3154:	e7ee      	b.n	3134 <_free_r+0x20>
    3156:	0013      	movs	r3, r2
    3158:	685a      	ldr	r2, [r3, #4]
    315a:	2a00      	cmp	r2, #0
    315c:	d001      	beq.n	3162 <_free_r+0x4e>
    315e:	42a2      	cmp	r2, r4
    3160:	d9f9      	bls.n	3156 <_free_r+0x42>
    3162:	6819      	ldr	r1, [r3, #0]
    3164:	1858      	adds	r0, r3, r1
    3166:	42a0      	cmp	r0, r4
    3168:	d10b      	bne.n	3182 <_free_r+0x6e>
    316a:	6820      	ldr	r0, [r4, #0]
    316c:	1809      	adds	r1, r1, r0
    316e:	1858      	adds	r0, r3, r1
    3170:	6019      	str	r1, [r3, #0]
    3172:	4282      	cmp	r2, r0
    3174:	d1e0      	bne.n	3138 <_free_r+0x24>
    3176:	6810      	ldr	r0, [r2, #0]
    3178:	6852      	ldr	r2, [r2, #4]
    317a:	1841      	adds	r1, r0, r1
    317c:	6019      	str	r1, [r3, #0]
    317e:	605a      	str	r2, [r3, #4]
    3180:	e7da      	b.n	3138 <_free_r+0x24>
    3182:	42a0      	cmp	r0, r4
    3184:	d902      	bls.n	318c <_free_r+0x78>
    3186:	230c      	movs	r3, #12
    3188:	602b      	str	r3, [r5, #0]
    318a:	e7d5      	b.n	3138 <_free_r+0x24>
    318c:	6821      	ldr	r1, [r4, #0]
    318e:	1860      	adds	r0, r4, r1
    3190:	4282      	cmp	r2, r0
    3192:	d103      	bne.n	319c <_free_r+0x88>
    3194:	6810      	ldr	r0, [r2, #0]
    3196:	6852      	ldr	r2, [r2, #4]
    3198:	1841      	adds	r1, r0, r1
    319a:	6021      	str	r1, [r4, #0]
    319c:	6062      	str	r2, [r4, #4]
    319e:	605c      	str	r4, [r3, #4]
    31a0:	e7ca      	b.n	3138 <_free_r+0x24>
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	20000148 	.word	0x20000148

000031a8 <_realloc_r>:
    31a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31aa:	0007      	movs	r7, r0
    31ac:	000d      	movs	r5, r1
    31ae:	0016      	movs	r6, r2
    31b0:	2900      	cmp	r1, #0
    31b2:	d105      	bne.n	31c0 <_realloc_r+0x18>
    31b4:	0011      	movs	r1, r2
    31b6:	f7ff fc27 	bl	2a08 <_malloc_r>
    31ba:	0004      	movs	r4, r0
    31bc:	0020      	movs	r0, r4
    31be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31c0:	2a00      	cmp	r2, #0
    31c2:	d103      	bne.n	31cc <_realloc_r+0x24>
    31c4:	f7ff ffa6 	bl	3114 <_free_r>
    31c8:	0034      	movs	r4, r6
    31ca:	e7f7      	b.n	31bc <_realloc_r+0x14>
    31cc:	f000 f812 	bl	31f4 <_malloc_usable_size_r>
    31d0:	002c      	movs	r4, r5
    31d2:	4286      	cmp	r6, r0
    31d4:	d9f2      	bls.n	31bc <_realloc_r+0x14>
    31d6:	0031      	movs	r1, r6
    31d8:	0038      	movs	r0, r7
    31da:	f7ff fc15 	bl	2a08 <_malloc_r>
    31de:	1e04      	subs	r4, r0, #0
    31e0:	d0ec      	beq.n	31bc <_realloc_r+0x14>
    31e2:	0029      	movs	r1, r5
    31e4:	0032      	movs	r2, r6
    31e6:	f7ff ff78 	bl	30da <memcpy>
    31ea:	0029      	movs	r1, r5
    31ec:	0038      	movs	r0, r7
    31ee:	f7ff ff91 	bl	3114 <_free_r>
    31f2:	e7e3      	b.n	31bc <_realloc_r+0x14>

000031f4 <_malloc_usable_size_r>:
    31f4:	1f0b      	subs	r3, r1, #4
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	1f18      	subs	r0, r3, #4
    31fa:	2b00      	cmp	r3, #0
    31fc:	da01      	bge.n	3202 <_malloc_usable_size_r+0xe>
    31fe:	580b      	ldr	r3, [r1, r0]
    3200:	18c0      	adds	r0, r0, r3
    3202:	4770      	bx	lr
    3204:	682f2e2e 	.word	0x682f2e2e
    3208:	732f6c61 	.word	0x732f6c61
    320c:	682f6372 	.word	0x682f6372
    3210:	695f6c61 	.word	0x695f6c61
    3214:	6d5f6332 	.word	0x6d5f6332
    3218:	6e79735f 	.word	0x6e79735f
    321c:	00632e63 	.word	0x00632e63
    3220:	682f2e2e 	.word	0x682f2e2e
    3224:	732f6c61 	.word	0x732f6c61
    3228:	682f6372 	.word	0x682f6372
    322c:	695f6c61 	.word	0x695f6c61
    3230:	00632e6f 	.word	0x00632e6f
    3234:	682f2e2e 	.word	0x682f2e2e
    3238:	732f6c61 	.word	0x732f6c61
    323c:	682f6372 	.word	0x682f6372
    3240:	755f6c61 	.word	0x755f6c61
    3244:	74726173 	.word	0x74726173
    3248:	6e79735f 	.word	0x6e79735f
    324c:	00632e63 	.word	0x00632e63

00003250 <_usarts>:
    3250:	00000005 40100004 00030000 0000f62b     .......@....+...
    3260:	00000000                                ....

00003264 <_i2cms>:
    3264:	00000001 00200014 00000100 0000e6e5     ...... .........
    3274:	00d70000 02dc8000                       ........

0000327c <_i2css>:
	...

0000328c <sercomspi_regs>:
	...
    32a0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    32b0:	65735f6c 6d6f6372 0000632e 70696843     l_sercom.c..Chip
    32c0:	6d616e20 093a2065 0d0a7325 00000000      name :.%s......
    32d0:	756e614d 74636166 72657275 2509203a     Manufacturer: .%
    32e0:	000d0a73 65746e49 63616672 09203a65     s...Interface: .
    32f0:	0d0a7325 00000000 70707553 7620796c     %s......Supply v
    3300:	61746c6f 6d206567 3a207861 30250920     oltage max : .%0
    3310:	5666322e 00000d0a 70707553 7620796c     .2fV....Supply v
    3320:	61746c6f 6d206567 203a6e69 2e302509     oltage min: .%0.
    3330:	0a566632 0000000d 6978614d 206d756d     2fV.....Maximum 
    3340:	72727563 3a746e65 30250920 6d66312e     current: .%0.1fm
    3350:	000d0a41 706d6554 74617265 20657275     A...Temperature 
    3360:	3a78614d 2e250920 0a436631 0000000d     Max: .%.1fC.....
    3370:	706d6554 74617265 20657275 3a6e694d     Temperature Min:
    3380:	2e250920 0a436631 0000000d 76697244      .%.1fC.....Driv
    3390:	76207265 69737265 203a6e6f 2e255609     er version: .V%.
    33a0:	252e6631 0a64322e 0000000d              1f.%.2d.....

000033ac <pinMask>:
    33ac:	08040201 80402010 3250434d 38303033     ..... @.MCP23008
    33bc:	6166203a 64656c69 206f7420 0d2e7325     : failed to %s..
    33cc:	0000000a 3270636d 38303033 6572203a     ....mcp23008: re
    33dc:	76696563 61635f65 61626c6c 000a6b63     ceive_callback..
    33ec:	3270636d 38303033 6564203a 5f79616c     mcp23008: delay_
    33fc:	000a736d 3270636d 38303033 3269203a     ms..mcp23008: i2
    340c:	6e692063 61697469 657a696c 20736920     c initialize is 
    341c:	6c6c756e 0000000a 3270636d 38303033     null....mcp23008
    342c:	3269203a 65645f63 20746e69 6e207369     : i2c_deint is n
    343c:	0a6c6c75 00000000 3270636d 38303033     ull.....mcp23008
    344c:	3269203a 65725f63 69206461 756e2073     : i2c_read is nu
    345c:	000a6c6c 3270636d 38303033 3269203a     ll..mcp23008: i2
    346c:	72775f63 20657469 6e207369 0a6c6c75     c_write is null.
    347c:	00000000 3270636d 38303033 3269203a     ....mcp23008: i2
    348c:	6e692063 61697469 657a696c 69616620     c initialize fai
    349c:	0a64656c 00000000 20633269 6e696564     led.....i2c dein
    34ac:	66207469 656c6961 00000064 6c696166     it failed...fail
    34bc:	74206465 7865206f 74756365 72692065     ed to execute ir
    34cc:	6f722071 6e697475 00000065 20746573     q routine...set 
    34dc:	206e6970 65646f6d 00000000 64616572     pin mode....read
    34ec:	6e697020 646f6d20 65722065 74736967      pin mode regist
    34fc:	00007265 64616572 74616c20 72206863     er..read latch r
    350c:	73696765 00726574 74697277 69702065     egister.write pi
    351c:	0000006e 64616572 6c757020 70752d6c     n...read pull-up
    352c:	67657220 65747369 00000072 20746573      register...set 
    353c:	206e6970 6c6c7570 0070752d 64616572     pin pull-up.read
    354c:	706e6920 70207475 72616c6f 00797469      input polarity.
    355c:	20746573 206e6970 75706e69 6f702074     set pin input po
    356c:	6972616c 00007974 64616572 6e697020     larity..read pin
    357c:	6c6f7020 74697261 00000079 64616572      polarity...read
    358c:	746e6920 75727265 00007470 20746573      interrupt..set 
    359c:	206e6970 65746e69 70757272 00000074     pin interrupt...
    35ac:	64616572 6e697020 746e6920 75727265     read pin interru
    35bc:	73207470 75746174 00000073 64616572     pt status...read
    35cc:	746e6920 75727265 66207470 0067616c      interrupt flag.
    35dc:	64616572 70786520 65646e61 65722072     read expander re
    35ec:	00000067 65746e69 70757272 69702074     g...interrupt pi
    35fc:	756f206e 74757074 76656c20 00006c65     n output level..
    360c:	64616572 746e6920 75727265 63207470     read interrupt c
    361c:	75747061 73206572 75746174 00000073     apture status...
    362c:	20746573 65746e69 70757272 69702074     set interrupt pi
    363c:	756f206e 74757074 646f6d20 00000065     n output mode...
    364c:	64616572 746e6920 75727265 6f207470     read interrupt o
    365c:	6863206e 65676e61 6e6f6320 6c6f7274     n change control
    366c:	67657220 00000000 20746573 65746e69      reg....set inte
    367c:	70757272 6f632074 7261706d 6f6d2065     rrupt compare mo
    368c:	00006564 64616572 66656420 746c7561     de..read default
    369c:	6d6f6320 65726170 6c617620 72206575      compare value r
    36ac:	00006765 20746573 206e6970 61666564     eg..set pin defa
    36bc:	20746c75 706d6f63 20657261 756c6176     ult compare valu
    36cc:	00000065 64616572 6e697020 66656420     e...read pin def
    36dc:	746c7561 6d6f6320 65726170 6c617620     ault compare val
    36ec:	73206575 75746174 00000073 20746573     ue status...set 
    36fc:	77656c73 74617220 00000065 64616572     slew rate...read
    370c:	656c7320 61722077 73206574 75746174      slew rate statu
    371c:	00000073 20746573 75716573 69746e65     s...set sequenti
    372c:	6f206c61 61726570 6e6f6974 646f6d20     al operation mod
    373c:	00000065 64616572 71657320 636e6575     e...read sequenc
    374c:	206c6169 7265706f 6f697461 6f6d206e     ial operation mo
    375c:	73206564 75746174 00000073 3250434d     de status...MCP2
    376c:	38303033 00000000 00433249 7263694d     3008....I2C.Micr
    377c:	6968636f 65542070 6f6e6863 79676f6c     ochip Technology
    378c:	00000000 20633269 74697277 61662065     ....i2c write fa
    379c:	64656c69 6863202c 206b6365 20656874     iled, check the 
    37ac:	20633269 72646461 20737365 7720726f     i2c address or w
    37bc:	6e697269 00000a67 3270636d 38303033     iring...mcp23008
    37cc:	6c61663a 69206573 7265746e 74707572     :false interrupt
    37dc:	000a7420 00002148 00002118 0000212a      t..H!...!..*!..
    37ec:	0000206c 0000212a 0000210e 0000212a     l ..*!...!..*!..
    37fc:	0000206c 00002118 00002118 0000210e     l ...!...!...!..
    380c:	0000206c 00002074 00002074 00002074     l ..t ..t ..t ..
    381c:	00002130 00002118 00002118 000020ec     0!...!...!... ..
    382c:	000021d0 000020ec 0000210e 000020ec     .!... ...!... ..
    383c:	000021d0 00002118 00002118 0000210e     .!...!...!...!..
    384c:	000021d0 00002074 00002074 00002074     .!..t ..t ..t ..
    385c:	000021da                                .!..

00003860 <__sf_fake_stderr>:
	...

00003880 <__sf_fake_stdin>:
	...

000038a0 <__sf_fake_stdout>:
	...
    38c0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    38d0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    38e0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    38f0:	00006665                                ef..

000038f4 <_init>:
    38f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38f6:	46c0      	nop			; (mov r8, r8)
    38f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38fa:	bc08      	pop	{r3}
    38fc:	469e      	mov	lr, r3
    38fe:	4770      	bx	lr

00003900 <__init_array_start>:
    3900:	000000dd 	.word	0x000000dd

00003904 <_fini>:
    3904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	bcf8      	pop	{r3, r4, r5, r6, r7}
    390a:	bc08      	pop	{r3}
    390c:	469e      	mov	lr, r3
    390e:	4770      	bx	lr

00003910 <__fini_array_start>:
    3910:	000000b5 	.word	0x000000b5
