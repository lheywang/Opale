
mcp23008_io_expander_L432KCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000668c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08006820  08006820  00016820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800702c  0800702c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007034  08007034  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800703c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001dc  08007218  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08007218  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e7a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb0  00000000  00000000  00036086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000dac6  00000000  00000000  00038d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00046800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  000474f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021897  00000000  00000000  000484e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fea  00000000  00000000  00069d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c49b5  00000000  00000000  0007fd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014471e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000374c  00000000  00000000  00144770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006804 	.word	0x08006804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006804 	.word	0x08006804

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b500      	push	{lr}
 8000eae:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb0:	2244      	movs	r2, #68	; 0x44
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	a805      	add	r0, sp, #20
 8000eb6:	f002 fd9d 	bl	80039f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eba:	2214      	movs	r2, #20
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4668      	mov	r0, sp
 8000ec0:	f002 fd98 	bl	80039f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ec4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ec8:	f001 fcfc 	bl	80028c4 <HAL_PWREx_ControlVoltageScaling>
 8000ecc:	b108      	cbz	r0, 8000ed2 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ece:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ed8:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ede:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ee2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ee6:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eea:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eee:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ef4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	f001 fdab 	bl	8002a50 <HAL_RCC_OscConfig>
 8000efa:	b108      	cbz	r0, 8000f00 <SystemClock_Config+0x54>
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <SystemClock_Config+0x52>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	2303      	movs	r3, #3
 8000f02:	220f      	movs	r2, #15
 8000f04:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f12:	e9cd 3303 	strd	r3, r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f16:	f002 f83f 	bl	8002f98 <HAL_RCC_ClockConfig>
 8000f1a:	b108      	cbz	r0, 8000f20 <SystemClock_Config+0x74>
 8000f1c:	b672      	cpsid	i
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <SystemClock_Config+0x72>
}
 8000f20:	b017      	add	sp, #92	; 0x5c
 8000f22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f28 <main>:
{
 8000f28:	b500      	push	{lr}
 8000f2a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000f2c:	f001 f83e 	bl	8001fac <HAL_Init>
  SystemClock_Config();
 8000f30:	f7ff ffbc 	bl	8000eac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2214      	movs	r2, #20
 8000f36:	2100      	movs	r1, #0
 8000f38:	a807      	add	r0, sp, #28
 8000f3a:	f002 fd5b 	bl	80039f4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b93      	ldr	r3, [pc, #588]	; (800118c <main+0x264>)
  HAL_GPIO_WritePin(mcp23008_reset_GPIO_Port, mcp23008_reset_Pin, GPIO_PIN_SET);
 8000f40:	4893      	ldr	r0, [pc, #588]	; (8001190 <main+0x268>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 8000f44:	4c93      	ldr	r4, [pc, #588]	; (8001194 <main+0x26c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f4e:	f002 0201 	and.w	r2, r2, #1
 8000f52:	9205      	str	r2, [sp, #20]
 8000f54:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f58:	f042 0202 	orr.w	r2, r2, #2
 8000f5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(mcp23008_reset_GPIO_Port, mcp23008_reset_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(mcp23008_reset_GPIO_Port, mcp23008_reset_Pin, GPIO_PIN_SET);
 8000f66:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	9306      	str	r3, [sp, #24]
 8000f6a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(mcp23008_reset_GPIO_Port, mcp23008_reset_Pin, GPIO_PIN_SET);
 8000f6c:	f001 f964 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	4887      	ldr	r0, [pc, #540]	; (8001190 <main+0x268>)
 8000f74:	2108      	movs	r1, #8
 8000f76:	f001 f95f 	bl	8002238 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	a907      	add	r1, sp, #28
 8000f80:	4883      	ldr	r0, [pc, #524]	; (8001190 <main+0x268>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2601      	movs	r6, #1
 8000f84:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f001 f89c 	bl	80020c8 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x00909BEB;
 8000f90:	4881      	ldr	r0, [pc, #516]	; (8001198 <main+0x270>)
 8000f92:	4b82      	ldr	r3, [pc, #520]	; (800119c <main+0x274>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	6225      	str	r5, [r4, #32]
  hi2c1.Init.Timing = 0x00909BEB;
 8000f96:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f9a:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9c:	e9c4 5602 	strd	r5, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa8:	f001 fab9 	bl	800251e <HAL_I2C_Init>
 8000fac:	4601      	mov	r1, r0
 8000fae:	b108      	cbz	r0, 8000fb4 <main+0x8c>
 8000fb0:	b672      	cpsid	i
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x8a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f001 fc31 	bl	800281c <HAL_I2CEx_ConfigAnalogFilter>
 8000fba:	4601      	mov	r1, r0
 8000fbc:	b108      	cbz	r0, 8000fc2 <main+0x9a>
 8000fbe:	b672      	cpsid	i
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <main+0x98>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f001 fc50 	bl	8002868 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b108      	cbz	r0, 8000fd0 <main+0xa8>
 8000fcc:	b672      	cpsid	i
  while (1)
 8000fce:	e7fe      	b.n	8000fce <main+0xa6>
  huart2.Instance = USART2;
 8000fd0:	4873      	ldr	r0, [pc, #460]	; (80011a0 <main+0x278>)
  huart2.Init.BaudRate = 115200;
 8000fd2:	4974      	ldr	r1, [pc, #464]	; (80011a4 <main+0x27c>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd4:	6103      	str	r3, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8000fd6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fda:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fde:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fee:	f002 fc9a 	bl	8003926 <HAL_UART_Init>
 8000ff2:	b108      	cbz	r0, 8000ff8 <main+0xd0>
 8000ff4:	b672      	cpsid	i
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <main+0xce>
 	 mcp23008_info(&mcp23008_handle);
 8000ff8:	4c6b      	ldr	r4, [pc, #428]	; (80011a8 <main+0x280>)
     HAL_GPIO_WritePin(mcp23008_reset_GPIO_Port, mcp23008_reset_Pin, 1); /**< make the reset pin on the slave device is constantly high during communication */
 8000ffa:	4865      	ldr	r0, [pc, #404]	; (8001190 <main+0x268>)
	  				mcp23008_basic_get_interrupt_flag(MCP23008_GPIO_PIN_0, &int_flag);
 8000ffc:	4d6b      	ldr	r5, [pc, #428]	; (80011ac <main+0x284>)
     HAL_GPIO_WritePin(mcp23008_reset_GPIO_Port, mcp23008_reset_Pin, 1); /**< make the reset pin on the slave device is constantly high during communication */
 8000ffe:	4632      	mov	r2, r6
 8001000:	4631      	mov	r1, r6
 8001002:	f001 f919 	bl	8002238 <HAL_GPIO_WritePin>
     mcp23008_basic_initialize(MCP23008_I2C_ADDRESS_PIN_A110);		     /**< initialise chip and set i2c pin level (A2, A1, A0) */
 8001006:	2006      	movs	r0, #6
 8001008:	f000 fdee 	bl	8001be8 <mcp23008_basic_initialize>
 	 mcp23008_info(&mcp23008_handle);
 800100c:	4620      	mov	r0, r4
 800100e:	f000 fdb7 	bl	8001b80 <mcp23008_info>
 	 mcp23008_interface_debug_print("Chip name :\t%s\n\r", mcp23008_handle.info.chip_name);
 8001012:	f104 011c 	add.w	r1, r4, #28
 8001016:	4866      	ldr	r0, [pc, #408]	; (80011b0 <main+0x288>)
	  				btn_press_status = mcp23008_basic_gpio_read(MCP23008_GPIO_PIN_0);
 8001018:	4e66      	ldr	r6, [pc, #408]	; (80011b4 <main+0x28c>)
 	 mcp23008_interface_debug_print("Chip name :\t%s\n\r", mcp23008_handle.info.chip_name);
 800101a:	f000 ff75 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Manufacturer: \t%s\n\r",  mcp23008_handle.info.manufacturer_name);
 800101e:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8001022:	4865      	ldr	r0, [pc, #404]	; (80011b8 <main+0x290>)
 8001024:	f000 ff70 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Interface: \t%s\n\r",  mcp23008_handle.info.interface);
 8001028:	f104 013f 	add.w	r1, r4, #63	; 0x3f
 800102c:	4863      	ldr	r0, [pc, #396]	; (80011bc <main+0x294>)
 800102e:	f000 ff6b 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Supply voltage max : \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_max_v);
 8001032:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001034:	f7ff fa88 	bl	8000548 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4860      	ldr	r0, [pc, #384]	; (80011c0 <main+0x298>)
 800103e:	f000 ff63 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Supply voltage min: \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_min_v);
 8001042:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001044:	f7ff fa80 	bl	8000548 <__aeabi_f2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	485d      	ldr	r0, [pc, #372]	; (80011c4 <main+0x29c>)
 800104e:	f000 ff5b 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Maximum current: \t%0.1fmA\n\r",  mcp23008_handle.info.max_current_ma);
 8001052:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001054:	f7ff fa78 	bl	8000548 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	485a      	ldr	r0, [pc, #360]	; (80011c8 <main+0x2a0>)
 800105e:	f000 ff53 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Temperature Max: \t%.1fC\n\r",  mcp23008_handle.info.temperature_max);
 8001062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001064:	f7ff fa70 	bl	8000548 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4857      	ldr	r0, [pc, #348]	; (80011cc <main+0x2a4>)
 800106e:	f000 ff4b 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Temperature Min: \t%.1fC\n\r",  mcp23008_handle.info.temperature_min);
 8001072:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001074:	f7ff fa68 	bl	8000548 <__aeabi_f2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4854      	ldr	r0, [pc, #336]	; (80011d0 <main+0x2a8>)
 800107e:	f000 ff43 	bl	8001f08 <mcp23008_interface_debug_print>
 	 mcp23008_interface_debug_print("Driver version: \tV%.1f.%.2d\n\r", ( mcp23008_handle.info.driver_version / 1000), (uint8_t)( mcp23008_handle.info.driver_version - (uint8_t)( mcp23008_handle.info.driver_version / 100)*100));
 8001082:	ed94 8a16 	vldr	s16, [r4, #88]	; 0x58
 8001086:	eddf 7a53 	vldr	s15, [pc, #332]	; 80011d4 <main+0x2ac>
	  switch((int)test.state)
 800108a:	4c53      	ldr	r4, [pc, #332]	; (80011d8 <main+0x2b0>)
 	 mcp23008_interface_debug_print("Driver version: \tV%.1f.%.2d\n\r", ( mcp23008_handle.info.driver_version / 1000), (uint8_t)( mcp23008_handle.info.driver_version - (uint8_t)( mcp23008_handle.info.driver_version / 100)*100));
 800108c:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8001090:	ee17 0a90 	vmov	r0, s15
 8001094:	f7ff fa58 	bl	8000548 <__aeabi_f2d>
 8001098:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80011dc <main+0x2b4>
 800109c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80010a0:	2264      	movs	r2, #100	; 0x64
 80010a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a6:	edcd 7a03 	vstr	s15, [sp, #12]
 80010aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80010ae:	fb13 f302 	smulbb	r3, r3, r2
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	4602      	mov	r2, r0
 80010bc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80010c0:	4847      	ldr	r0, [pc, #284]	; (80011e0 <main+0x2b8>)
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	edcd 7a03 	vstr	s15, [sp, #12]
 80010ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	460b      	mov	r3, r1
 80010d2:	f000 ff19 	bl	8001f08 <mcp23008_interface_debug_print>
	  switch((int)test.state)
 80010d6:	7823      	ldrb	r3, [r4, #0]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d8fd      	bhi.n	80010d8 <main+0x1b0>
 80010dc:	e8df f003 	tbb	[pc, r3]
 80010e0:	321e1803 	.word	0x321e1803
 80010e4:	4b3a      	.short	0x4b3a
	  				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_7, MCP23008_OUTPUT);
 80010e6:	2100      	movs	r1, #0
 80010e8:	2007      	movs	r0, #7
 80010ea:	f000 fe83 	bl	8001df4 <mcp23008_basic_gpio_set_direction>
	  				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_6, MCP23008_OUTPUT);
 80010ee:	2100      	movs	r1, #0
 80010f0:	2006      	movs	r0, #6
 80010f2:	f000 fe7f 	bl	8001df4 <mcp23008_basic_gpio_set_direction>
	  				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_5, MCP23008_OUTPUT);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2005      	movs	r0, #5
 80010fa:	f000 fe7b 	bl	8001df4 <mcp23008_basic_gpio_set_direction>
	  				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_0, MCP23008_INPUT);
 80010fe:	2101      	movs	r1, #1
 8001100:	2000      	movs	r0, #0
 8001102:	f000 fe77 	bl	8001df4 <mcp23008_basic_gpio_set_direction>
	  				mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_1, MCP23008_INPUT_PULLUP);
 8001106:	2110      	movs	r1, #16
 8001108:	2001      	movs	r0, #1
 800110a:	f000 fe73 	bl	8001df4 <mcp23008_basic_gpio_set_direction>
	  				break;
 800110e:	e7e2      	b.n	80010d6 <main+0x1ae>
	  				mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_7, MCP23008_GPIO_HIGH);
 8001110:	2101      	movs	r1, #1
 8001112:	2007      	movs	r0, #7
 8001114:	f000 fe66 	bl	8001de4 <mcp23008_basic_gpio_write>
	  					mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_6, MCP23008_GPIO_LOW);
 8001118:	2100      	movs	r1, #0
 800111a:	e00f      	b.n	800113c <main+0x214>
	  				if(mcp23008_basic_gpio_read(MCP23008_GPIO_PIN_1))
 800111c:	2001      	movs	r0, #1
 800111e:	f000 fe99 	bl	8001e54 <mcp23008_basic_gpio_read>
 8001122:	4601      	mov	r1, r0
 8001124:	b100      	cbz	r0, 8001128 <main+0x200>
	  					mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_5, MCP23008_GPIO_HIGH);
 8001126:	2101      	movs	r1, #1
	  				  	mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_5, MCP23008_GPIO_LOW);
 8001128:	2005      	movs	r0, #5
 800112a:	f000 fe5b 	bl	8001de4 <mcp23008_basic_gpio_write>
	  				btn_press_status = mcp23008_basic_gpio_read(MCP23008_GPIO_PIN_0);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fe90 	bl	8001e54 <mcp23008_basic_gpio_read>
 8001134:	6030      	str	r0, [r6, #0]
	  				if(btn_press_status == MCP23008_GPIO_LOW){
 8001136:	2800      	cmp	r0, #0
 8001138:	d1ee      	bne.n	8001118 <main+0x1f0>
	  					mcp23008_basic_gpio_write(MCP23008_GPIO_PIN_6, MCP23008_GPIO_HIGH);
 800113a:	2101      	movs	r1, #1
 800113c:	2006      	movs	r0, #6
 800113e:	f000 fe51 	bl	8001de4 <mcp23008_basic_gpio_write>
 8001142:	e7c8      	b.n	80010d6 <main+0x1ae>
	  				mcp23008_basic_gpio_toggle(MCP23008_GPIO_PIN_5);
 8001144:	2005      	movs	r0, #5
 8001146:	f000 fe95 	bl	8001e74 <mcp23008_basic_gpio_toggle>
	  				mcp23008_interface_delay_ms(500);
 800114a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114e:	f000 fed9 	bl	8001f04 <mcp23008_interface_delay_ms>
	  				break;
 8001152:	e7c0      	b.n	80010d6 <main+0x1ae>
	  				mcp23008_basic_interrupt_enable(MCP23008_GPIO_PIN_0, MCP23008_interrupt_FALLING_EDGE);
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f000 fe98 	bl	8001e8c <mcp23008_basic_interrupt_enable>
	  				mcp23008_basic_interrupt_disable(MCP23008_GPIO_PIN_1);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fea9 	bl	8001eb4 <mcp23008_basic_interrupt_disable>
	  				mcp23008_basic_get_interrupt_flag(MCP23008_GPIO_PIN_0, &int_flag);
 8001162:	4912      	ldr	r1, [pc, #72]	; (80011ac <main+0x284>)
 8001164:	2000      	movs	r0, #0
 8001166:	f000 feb3 	bl	8001ed0 <mcp23008_basic_get_interrupt_flag>
	  				if(int_flag){
 800116a:	782b      	ldrb	r3, [r5, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0b2      	beq.n	80010d6 <main+0x1ae>
	  					mcp23008_basic_clr_interrupt_flag();
 8001170:	f000 fea8 	bl	8001ec4 <mcp23008_basic_clr_interrupt_flag>
 8001174:	e7af      	b.n	80010d6 <main+0x1ae>
	  				mcp23008_basic_pin_write_all(MCP23008_GPIO_HIGH);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 fe66 	bl	8001e48 <mcp23008_basic_pin_write_all>
	  				mcp23008_interface_delay_ms(500);
 800117c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001180:	f000 fec0 	bl	8001f04 <mcp23008_interface_delay_ms>
	  				mcp23008_basic_pin_write_all(MCP23008_GPIO_LOW);
 8001184:	2000      	movs	r0, #0
 8001186:	f000 fe5f 	bl	8001e48 <mcp23008_basic_pin_write_all>
 800118a:	e7de      	b.n	800114a <main+0x222>
 800118c:	40021000 	.word	0x40021000
 8001190:	48000400 	.word	0x48000400
 8001194:	200001fc 	.word	0x200001fc
 8001198:	40005400 	.word	0x40005400
 800119c:	00909beb 	.word	0x00909beb
 80011a0:	20000250 	.word	0x20000250
 80011a4:	40004400 	.word	0x40004400
 80011a8:	200002d8 	.word	0x200002d8
 80011ac:	200002d4 	.word	0x200002d4
 80011b0:	08006820 	.word	0x08006820
 80011b4:	200001f8 	.word	0x200001f8
 80011b8:	08006831 	.word	0x08006831
 80011bc:	08006845 	.word	0x08006845
 80011c0:	08006856 	.word	0x08006856
 80011c4:	08006875 	.word	0x08006875
 80011c8:	08006893 	.word	0x08006893
 80011cc:	080068af 	.word	0x080068af
 80011d0:	080068c9 	.word	0x080068c9
 80011d4:	447a0000 	.word	0x447a0000
 80011d8:	20000338 	.word	0x20000338
 80011dc:	42c80000 	.word	0x42c80000
 80011e0:	080068e3 	.word	0x080068e3

080011e4 <serial_print>:
{
 80011e4:	460a      	mov	r2, r1
	HAL_UART_Transmit(&huart2, (const char *) pString, u8Length, HAL_MAX_DELAY);
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	4601      	mov	r1, r0
 80011ec:	4801      	ldr	r0, [pc, #4]	; (80011f4 <serial_print+0x10>)
 80011ee:	f002 bb0d 	b.w	800380c <HAL_UART_Transmit>
 80011f2:	bf00      	nop
 80011f4:	20000250 	.word	0x20000250

080011f8 <i2c_write>:
{
 80011f8:	b507      	push	{r0, r1, r2, lr}
 80011fa:	4613      	mov	r3, r2
	err = HAL_I2C_Master_Transmit(&hi2c1, (addr<<1), (uint8_t *)buf, len,1000);
 80011fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	460a      	mov	r2, r1
 8001204:	0041      	lsls	r1, r0, #1
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <i2c_write+0x20>)
 8001208:	f001 f9da 	bl	80025c0 <HAL_I2C_Master_Transmit>
}
 800120c:	3800      	subs	r0, #0
 800120e:	bf18      	it	ne
 8001210:	2001      	movne	r0, #1
 8001212:	b003      	add	sp, #12
 8001214:	f85d fb04 	ldr.w	pc, [sp], #4
 8001218:	200001fc 	.word	0x200001fc

0800121c <i2c_read>:
{
 800121c:	b507      	push	{r0, r1, r2, lr}
 800121e:	4613      	mov	r3, r2
	err = HAL_I2C_Master_Receive(&hi2c1, (addr<<1), (uint8_t *)buf, len, 1000);
 8001220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001224:	9200      	str	r2, [sp, #0]
 8001226:	460a      	mov	r2, r1
 8001228:	0041      	lsls	r1, r0, #1
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <i2c_read+0x20>)
 800122c:	f001 fa5e 	bl	80026ec <HAL_I2C_Master_Receive>
}
 8001230:	3800      	subs	r0, #0
 8001232:	bf18      	it	ne
 8001234:	2001      	movne	r0, #1
 8001236:	b003      	add	sp, #12
 8001238:	f85d fb04 	ldr.w	pc, [sp], #4
 800123c:	200001fc 	.word	0x200001fc

08001240 <Error_Handler>:
 8001240:	b672      	cpsid	i
  while (1)
 8001242:	e7fe      	b.n	8001242 <Error_Handler+0x2>

08001244 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MspInit+0x2c>)
 8001246:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	661a      	str	r2, [r3, #96]	; 0x60
 800124e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001250:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	f002 0201 	and.w	r2, r2, #1
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800125c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001260:	659a      	str	r2, [r3, #88]	; 0x58
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126c:	b002      	add	sp, #8
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001274:	b510      	push	{r4, lr}
 8001276:	b09c      	sub	sp, #112	; 0x70
 8001278:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	2214      	movs	r2, #20
 800127c:	2100      	movs	r1, #0
 800127e:	a802      	add	r0, sp, #8
 8001280:	f002 fbb8 	bl	80039f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	2254      	movs	r2, #84	; 0x54
 8001286:	2100      	movs	r1, #0
 8001288:	a807      	add	r0, sp, #28
 800128a:	f002 fbb3 	bl	80039f4 <memset>
  if(hi2c->Instance==I2C1)
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_I2C_MspInit+0x78>)
 8001292:	429a      	cmp	r2, r3
 8001294:	d128      	bne.n	80012e8 <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001296:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800129a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129c:	f001 ffd4 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	b108      	cbz	r0, 80012a6 <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 80012a2:	f7ff ffcd 	bl	8001240 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4c12      	ldr	r4, [pc, #72]	; (80012f0 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80012b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012bc:	22c0      	movs	r2, #192	; 0xc0
 80012be:	2312      	movs	r3, #18
 80012c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2100      	movs	r1, #0
 80012c6:	2303      	movs	r3, #3
 80012c8:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012cc:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f000 fef9 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80012de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e8:	b01c      	add	sp, #112	; 0x70
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	b09c      	sub	sp, #112	; 0x70
 80012fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	2214      	movs	r2, #20
 8001300:	2100      	movs	r1, #0
 8001302:	a802      	add	r0, sp, #8
 8001304:	f002 fb76 	bl	80039f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	2254      	movs	r2, #84	; 0x54
 800130a:	2100      	movs	r1, #0
 800130c:	a807      	add	r0, sp, #28
 800130e:	f002 fb71 	bl	80039f4 <memset>
  if(huart->Instance==USART2)
 8001312:	6822      	ldr	r2, [r4, #0]
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_UART_MspInit+0x7c>)
 8001316:	429a      	cmp	r2, r3
 8001318:	d129      	bne.n	800136e <HAL_UART_MspInit+0x76>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800131a:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800131e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001320:	f001 ff92 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	b108      	cbz	r0, 800132a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001326:	f7ff ff8b 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_UART_MspInit+0x80>)
 800132c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800132e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001332:	659a      	str	r2, [r3, #88]	; 0x58
 8001334:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001336:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001340:	f042 0201 	orr.w	r2, r2, #1
 8001344:	64da      	str	r2, [r3, #76]	; 0x4c
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	9b01      	ldr	r3, [sp, #4]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	220c      	movs	r2, #12
 8001352:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001364:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001368:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f000 fead 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800136e:	b01c      	add	sp, #112	; 0x70
 8001370:	bd10      	pop	{r4, pc}
 8001372:	bf00      	nop
 8001374:	40004400 	.word	0x40004400
 8001378:	40021000 	.word	0x40021000

0800137c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler>

0800137e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler>

08001380 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler>

08001382 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler>

08001384 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler>

08001386 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 be1e 	b.w	8001fcc <HAL_IncTick>

08001390 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001390:	2001      	movs	r0, #1
 8001392:	4770      	bx	lr

08001394 <_kill>:

int _kill(int pid, int sig)
{
 8001394:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001396:	f002 faf5 	bl	8003984 <__errno>
 800139a:	2316      	movs	r3, #22
 800139c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800139e:	f04f 30ff 	mov.w	r0, #4294967295
 80013a2:	bd08      	pop	{r3, pc}

080013a4 <_exit>:

void _exit (int status)
{
 80013a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80013a6:	f002 faed 	bl	8003984 <__errno>
 80013aa:	2316      	movs	r3, #22
 80013ac:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80013ae:	e7fe      	b.n	80013ae <_exit+0xa>

080013b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	460d      	mov	r5, r1
 80013b4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	460e      	mov	r6, r1
 80013b8:	1b73      	subs	r3, r6, r5
 80013ba:	429c      	cmp	r4, r3
 80013bc:	dc01      	bgt.n	80013c2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80013be:	4620      	mov	r0, r4
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80013c2:	f3af 8000 	nop.w
 80013c6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	e7f5      	b.n	80013b8 <_read+0x8>

080013cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	460d      	mov	r5, r1
 80013d0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	460e      	mov	r6, r1
 80013d4:	1b73      	subs	r3, r6, r5
 80013d6:	429c      	cmp	r4, r3
 80013d8:	dc01      	bgt.n	80013de <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80013da:	4620      	mov	r0, r4
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80013de:	f816 0b01 	ldrb.w	r0, [r6], #1
 80013e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	e7f5      	b.n	80013d4 <_write+0x8>

080013e8 <_close>:

int _close(int file)
{
	return -1;
}
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	4770      	bx	lr

080013ee <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80013ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80013f4:	2000      	movs	r0, #0
 80013f6:	4770      	bx	lr

080013f8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80013f8:	2001      	movs	r0, #1
 80013fa:	4770      	bx	lr

080013fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80013fc:	2000      	movs	r0, #0
 80013fe:	4770      	bx	lr

08001400 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <_sbrk+0x30>)
 8001402:	6811      	ldr	r1, [r2, #0]
{
 8001404:	b510      	push	{r4, lr}
 8001406:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001408:	b909      	cbnz	r1, 800140e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <_sbrk+0x34>)
 800140c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	6810      	ldr	r0, [r2, #0]
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <_sbrk+0x38>)
 8001412:	4c0a      	ldr	r4, [pc, #40]	; (800143c <_sbrk+0x3c>)
 8001414:	4403      	add	r3, r0
 8001416:	1b09      	subs	r1, r1, r4
 8001418:	428b      	cmp	r3, r1
 800141a:	d906      	bls.n	800142a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800141c:	f002 fab2 	bl	8003984 <__errno>
 8001420:	230c      	movs	r3, #12
 8001422:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001424:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001428:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800142a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800142c:	e7fc      	b.n	8001428 <_sbrk+0x28>
 800142e:	bf00      	nop
 8001430:	2000033c 	.word	0x2000033c
 8001434:	200003b8 	.word	0x200003b8
 8001438:	20010000 	.word	0x20010000
 800143c:	00000400 	.word	0x00000400

08001440 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001440:	4a03      	ldr	r2, [pc, #12]	; (8001450 <SystemInit+0x10>)
 8001442:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001446:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800148c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff fff2 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f002 fa85 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001486:	f7ff fd4f 	bl	8000f28 <main>

0800148a <LoopForever>:

LoopForever:
    b LoopForever
 800148a:	e7fe      	b.n	800148a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800148c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001498:	0800703c 	.word	0x0800703c
  ldr r2, =_sbss
 800149c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80014a0:	200003b4 	.word	0x200003b4

080014a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_IRQHandler>

080014a6 <a_mcp23008_i2c_write>:
 *          - 0 success
 *          - 1 failed to write
 * @note none
 */

uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
 80014a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a8:	461c      	mov	r4, r3

    uint8_t temp_buffer[u8Length + 1];
 80014aa:	3308      	adds	r3, #8
 80014ac:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
 80014b0:	af00      	add	r7, sp, #0
    uint8_t temp_buffer[u8Length + 1];
 80014b2:	ebad 0d03 	sub.w	sp, sp, r3
uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
 80014b6:	4605      	mov	r5, r0
	temp_buffer[0] = u8Reg;
 80014b8:	4668      	mov	r0, sp
uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
 80014ba:	460e      	mov	r6, r1
	temp_buffer[0] = u8Reg;
 80014bc:	f800 6b01 	strb.w	r6, [r0], #1
uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
 80014c0:	4611      	mov	r1, r2
	for(int index = 1; index < u8Length + 1; index++){
		temp_buffer[index] = pBuf[index - 1];
 80014c2:	4622      	mov	r2, r4
 80014c4:	f002 fa88 	bl	80039d8 <memcpy>
	}

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)temp_buffer, (u8Length + 1)) != 0) /**< write data */ {
 80014c8:	68ab      	ldr	r3, [r5, #8]
 80014ca:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 80014ce:	1c62      	adds	r2, r4, #1
 80014d0:	4669      	mov	r1, sp
 80014d2:	4798      	blx	r3
            return 1; /**< write fail */
        }
    return 0; /**< success */
}
 80014d4:	3800      	subs	r0, #0
 80014d6:	bf18      	it	ne
 80014d8:	2001      	movne	r0, #1
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014de <a_mcp23008_i2c_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed to read
 * @note none
 */
uint8_t a_mcp23008_i2c_read(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
 80014de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014e0:	4604      	mov	r4, r0
 80014e2:	4615      	mov	r5, r2
 80014e4:	461e      	mov	r6, r3
 80014e6:	f88d 1007 	strb.w	r1, [sp, #7]

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)&u8Reg, 1) != 0) /**< write reg */ {
 80014ea:	6883      	ldr	r3, [r0, #8]
 80014ec:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80014f0:	2201      	movs	r2, #1
 80014f2:	f10d 0107 	add.w	r1, sp, #7
 80014f6:	4798      	blx	r3
 80014f8:	b950      	cbnz	r0, 8001510 <a_mcp23008_i2c_read+0x32>
            return 1; /**< write fail */
        }

    if (pHandle->i2c_read(pHandle->i2c_address, pBuf, u8Length) != 0) /**< read data */ {
 80014fa:	68e3      	ldr	r3, [r4, #12]
 80014fc:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8001500:	4632      	mov	r2, r6
 8001502:	4629      	mov	r1, r5
 8001504:	4798      	blx	r3
            return 1; /**< write fail */
 8001506:	3800      	subs	r0, #0
 8001508:	bf18      	it	ne
 800150a:	2001      	movne	r0, #1
            return 1; /**< read fail */
        }
    return 0;
}
 800150c:	b002      	add	sp, #8
 800150e:	bd70      	pop	{r4, r5, r6, pc}
            return 1; /**< write fail */
 8001510:	2001      	movs	r0, #1
 8001512:	e7fb      	b.n	800150c <a_mcp23008_i2c_read+0x2e>

08001514 <a_mcp23008_print_error_msg>:
* @note   none
*/
void a_mcp23008_print_error_msg(mcp23008_handle_t *const pHandle, char *const pBuffer)
{
#ifdef MCP23008_DEBUG_MODE
    pHandle->debug_print("MCP23008: failed to %s.\r\n", pBuffer);
 8001514:	6943      	ldr	r3, [r0, #20]
 8001516:	4801      	ldr	r0, [pc, #4]	; (800151c <a_mcp23008_print_error_msg+0x8>)
 8001518:	4718      	bx	r3
 800151a:	bf00      	nop
 800151c:	0800694c 	.word	0x0800694c

08001520 <mcp23008_init>:
 *            - 1 i2c or spi initialization failed
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t mcp23008_init(mcp23008_handle_t *const pHandle) {
 8001520:	b538      	push	{r3, r4, r5, lr}

    if (pHandle == NULL)
 8001522:	4604      	mov	r4, r0
 8001524:	2800      	cmp	r0, #0
 8001526:	d02a      	beq.n	800157e <mcp23008_init+0x5e>
        return 2;
    if (pHandle->debug_print == NULL)
 8001528:	6943      	ldr	r3, [r0, #20]
 800152a:	b11b      	cbz	r3, 8001534 <mcp23008_init+0x14>
        return 3;

    if (pHandle->receive_callback == NULL) {
 800152c:	6982      	ldr	r2, [r0, #24]
 800152e:	b91a      	cbnz	r2, 8001538 <mcp23008_init+0x18>
        pHandle->debug_print("mcp23008: receive_callback\n");
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <mcp23008_init+0x64>)
    if (pHandle->delay_ms == NULL) {
        pHandle->debug_print("mcp23008: delay_ms\n");
    }

    if (pHandle->i2c_init == NULL) {
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
 8001532:	4798      	blx	r3
        return 3;
 8001534:	2003      	movs	r0, #3
 8001536:	e01e      	b.n	8001576 <mcp23008_init+0x56>
    if (pHandle->delay_ms == NULL) {
 8001538:	6902      	ldr	r2, [r0, #16]
 800153a:	b90a      	cbnz	r2, 8001540 <mcp23008_init+0x20>
        pHandle->debug_print("mcp23008: delay_ms\n");
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <mcp23008_init+0x68>)
 800153e:	4798      	blx	r3
    if (pHandle->i2c_init == NULL) {
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	b913      	cbnz	r3, 800154a <mcp23008_init+0x2a>
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
 8001544:	6963      	ldr	r3, [r4, #20]
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <mcp23008_init+0x6c>)
 8001548:	e7f3      	b.n	8001532 <mcp23008_init+0x12>
        return 3;
    }

    if (pHandle->i2c_deinit == NULL) {
 800154a:	6862      	ldr	r2, [r4, #4]
 800154c:	b912      	cbnz	r2, 8001554 <mcp23008_init+0x34>
        pHandle->debug_print("mcp23008: i2c_deint is null\n");
 800154e:	6963      	ldr	r3, [r4, #20]
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <mcp23008_init+0x70>)
 8001552:	e7ee      	b.n	8001532 <mcp23008_init+0x12>
        return 3;
    }

    if (pHandle->i2c_read == NULL) {
 8001554:	68e2      	ldr	r2, [r4, #12]
 8001556:	b912      	cbnz	r2, 800155e <mcp23008_init+0x3e>
        pHandle->debug_print("mcp23008: i2c_read is null\n");
 8001558:	6963      	ldr	r3, [r4, #20]
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <mcp23008_init+0x74>)
 800155c:	e7e9      	b.n	8001532 <mcp23008_init+0x12>
        return 3;
    }
    if (pHandle->i2c_write == NULL) {
 800155e:	68a2      	ldr	r2, [r4, #8]
 8001560:	b912      	cbnz	r2, 8001568 <mcp23008_init+0x48>
        pHandle->debug_print("mcp23008: i2c_write is null\n");
 8001562:	6963      	ldr	r3, [r4, #20]
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <mcp23008_init+0x78>)
 8001566:	e7e4      	b.n	8001532 <mcp23008_init+0x12>
        return 3;
    }
    if (pHandle->i2c_init()) {
 8001568:	4798      	blx	r3
 800156a:	2501      	movs	r5, #1
 800156c:	b120      	cbz	r0, 8001578 <mcp23008_init+0x58>
        pHandle->debug_print("mcp23008: i2c initialize failed\n");
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <mcp23008_init+0x7c>)
 8001570:	6963      	ldr	r3, [r4, #20]
 8001572:	4798      	blx	r3
        return 1;
 8001574:	4628      	mov	r0, r5
    }

    pHandle->inited = 1; /* flag complete initialization */

    return 0;
}
 8001576:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->inited = 1; /* flag complete initialization */
 8001578:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    return 0;
 800157c:	e7fb      	b.n	8001576 <mcp23008_init+0x56>
        return 2;
 800157e:	2002      	movs	r0, #2
 8001580:	e7f9      	b.n	8001576 <mcp23008_init+0x56>
 8001582:	bf00      	nop
 8001584:	08006966 	.word	0x08006966
 8001588:	08006982 	.word	0x08006982
 800158c:	08006996 	.word	0x08006996
 8001590:	080069b8 	.word	0x080069b8
 8001594:	080069d5 	.word	0x080069d5
 8001598:	080069f1 	.word	0x080069f1
 800159c:	08006a0e 	.word	0x08006a0e

080015a0 <mcp23008_set_addr_pin>:
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp23008_set_addr_pin(mcp23008_handle_t *const pHandle, mcp23008_address_pin_t address_pin)
{
    if (pHandle == NULL) /**< check handle */
 80015a0:	b148      	cbz	r0, 80015b6 <mcp23008_set_addr_pin+0x16>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 80015a2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d107      	bne.n	80015ba <mcp23008_set_addr_pin+0x1a>
        return 3; /**< return error */

    pHandle->i2c_address = (MCP23008_ADDRESS_DEFAULT | address_pin);
 80015aa:	f041 0120 	orr.w	r1, r1, #32
 80015ae:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c

    return 0;
 80015b2:	2000      	movs	r0, #0
 80015b4:	4770      	bx	lr
        return 2; /**< return error */
 80015b6:	2002      	movs	r0, #2
 80015b8:	4770      	bx	lr
        return 3; /**< return error */
 80015ba:	2003      	movs	r0, #3
}
 80015bc:	4770      	bx	lr
	...

080015c0 <mcp23008_set_pin_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set pin mode
 * @note   none
 */
uint8_t mcp23008_set_pin_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_mode_t mode) {
 80015c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80015c4:	4688      	mov	r8, r1
 80015c6:	4616      	mov	r6, r2

    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 80015c8:	4604      	mov	r4, r0
 80015ca:	b338      	cbz	r0, 800161c <mcp23008_set_pin_mode+0x5c>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 80015cc:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
 80015d0:	2f01      	cmp	r7, #1
 80015d2:	d125      	bne.n	8001620 <mcp23008_set_pin_mode+0x60>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
 80015d4:	2100      	movs	r1, #0
 80015d6:	463b      	mov	r3, r7
 80015d8:	f10d 0207 	add.w	r2, sp, #7
 80015dc:	f7ff ff7f 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 80015e0:	4601      	mov	r1, r0
 80015e2:	b138      	cbz	r0, 80015f4 <mcp23008_set_pin_mode+0x34>
        a_mcp23008_print_error_msg(pHandle, "set pin mode");
 80015e4:	4620      	mov	r0, r4
 80015e6:	490f      	ldr	r1, [pc, #60]	; (8001624 <mcp23008_set_pin_mode+0x64>)
 80015e8:	f7ff ff94 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
 80015ec:	2001      	movs	r0, #1
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin mode");
        return 1;
    }
    return 0;
}
 80015ee:	b002      	add	sp, #8
 80015f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status &= ~(1 << pin);
 80015f4:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80015f8:	fa07 f208 	lsl.w	r2, r7, r8
 80015fc:	ea25 0502 	bic.w	r5, r5, r2
    status |= (mode << pin);
 8001600:	fa06 f208 	lsl.w	r2, r6, r8
 8001604:	432a      	orrs	r2, r5
 8001606:	f88d 2007 	strb.w	r2, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
 800160a:	463b      	mov	r3, r7
 800160c:	f10d 0207 	add.w	r2, sp, #7
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff ff48 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 8001616:	2800      	cmp	r0, #0
 8001618:	d0e9      	beq.n	80015ee <mcp23008_set_pin_mode+0x2e>
 800161a:	e7e3      	b.n	80015e4 <mcp23008_set_pin_mode+0x24>
        return 2; /**< return error */
 800161c:	2002      	movs	r0, #2
 800161e:	e7e6      	b.n	80015ee <mcp23008_set_pin_mode+0x2e>
        return 3; /**< return error */
 8001620:	2003      	movs	r0, #3
 8001622:	e7e4      	b.n	80015ee <mcp23008_set_pin_mode+0x2e>
 8001624:	08006a2f 	.word	0x08006a2f

08001628 <mcp23008_pin_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_pin_write(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_logic_level_t logic_level) {
 8001628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800162a:	460f      	mov	r7, r1
 800162c:	4616      	mov	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 800162e:	4605      	mov	r5, r0
 8001630:	b330      	cbz	r0, 8001680 <mcp23008_pin_write+0x58>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 8001632:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8001636:	2c01      	cmp	r4, #1
 8001638:	d124      	bne.n	8001684 <mcp23008_pin_write+0x5c>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
 800163a:	4623      	mov	r3, r4
 800163c:	f10d 0207 	add.w	r2, sp, #7
 8001640:	210a      	movs	r1, #10
 8001642:	f7ff ff4c 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001646:	b130      	cbz	r0, 8001656 <mcp23008_pin_write+0x2e>
        a_mcp23008_print_error_msg(pHandle,"read latch register");
 8001648:	4910      	ldr	r1, [pc, #64]	; (800168c <mcp23008_pin_write+0x64>)
    }
    status &= ~(1 << pin);
    status |= (logic_level << pin);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "write pin");
 800164a:	4628      	mov	r0, r5
 800164c:	f7ff ff62 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 8001650:	4620      	mov	r0, r4
 8001652:	b003      	add	sp, #12
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status &= ~(1 << pin);
 8001656:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800165a:	fa04 f207 	lsl.w	r2, r4, r7
 800165e:	ea23 0302 	bic.w	r3, r3, r2
    status |= (logic_level << pin);
 8001662:	fa06 f207 	lsl.w	r2, r6, r7
 8001666:	431a      	orrs	r2, r3
 8001668:	f88d 2007 	strb.w	r2, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
 800166c:	4623      	mov	r3, r4
 800166e:	f10d 0207 	add.w	r2, sp, #7
 8001672:	210a      	movs	r1, #10
 8001674:	4628      	mov	r0, r5
 8001676:	f7ff ff16 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 800167a:	b128      	cbz	r0, 8001688 <mcp23008_pin_write+0x60>
        a_mcp23008_print_error_msg(pHandle, "write pin");
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <mcp23008_pin_write+0x68>)
 800167e:	e7e4      	b.n	800164a <mcp23008_pin_write+0x22>
        return 2; /**< return error */
 8001680:	2402      	movs	r4, #2
 8001682:	e7e5      	b.n	8001650 <mcp23008_pin_write+0x28>
        return 3; /**< return error */
 8001684:	2403      	movs	r4, #3
 8001686:	e7e3      	b.n	8001650 <mcp23008_pin_write+0x28>
    return 0;
 8001688:	4604      	mov	r4, r0
 800168a:	e7e1      	b.n	8001650 <mcp23008_pin_write+0x28>
 800168c:	08006a3c 	.word	0x08006a3c
 8001690:	08006a50 	.word	0x08006a50

08001694 <mcp23008_pin_write_all>:
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_pin_write_all(mcp23008_handle_t *const pHandle, mcp23008_port_logic_level_t logic_level)
{
 8001694:	b513      	push	{r0, r1, r4, lr}
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 8001696:	4604      	mov	r4, r0
 8001698:	b1e0      	cbz	r0, 80016d4 <mcp23008_pin_write_all+0x40>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 800169a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d11a      	bne.n	80016d8 <mcp23008_pin_write_all+0x44>
        return 3; /**< return error */

    if(logic_level == HIGH)
 80016a2:	2901      	cmp	r1, #1
 80016a4:	d111      	bne.n	80016ca <mcp23008_pin_write_all+0x36>
    {
        status = 0xff;
 80016a6:	23ff      	movs	r3, #255	; 0xff
 80016a8:	f88d 3007 	strb.w	r3, [sp, #7]
    }else if(logic_level == LOW){
        status = 0x00;
    }

    err = a_mcp23008_i2c_write(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
 80016ac:	2301      	movs	r3, #1
 80016ae:	f10d 0207 	add.w	r2, sp, #7
 80016b2:	210a      	movs	r1, #10
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7ff fef6 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 80016ba:	b120      	cbz	r0, 80016c6 <mcp23008_pin_write_all+0x32>
        a_mcp23008_print_error_msg(pHandle, "write all pins");
 80016bc:	4620      	mov	r0, r4
 80016be:	4907      	ldr	r1, [pc, #28]	; (80016dc <mcp23008_pin_write_all+0x48>)
 80016c0:	f7ff ff28 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
 80016c4:	2001      	movs	r0, #1
    }

   return 0;
}
 80016c6:	b002      	add	sp, #8
 80016c8:	bd10      	pop	{r4, pc}
    }else if(logic_level == LOW){
 80016ca:	2900      	cmp	r1, #0
 80016cc:	d1ee      	bne.n	80016ac <mcp23008_pin_write_all+0x18>
        status = 0x00;
 80016ce:	f88d 1007 	strb.w	r1, [sp, #7]
 80016d2:	e7eb      	b.n	80016ac <mcp23008_pin_write_all+0x18>
        return 2; /**< return error */
 80016d4:	2002      	movs	r0, #2
 80016d6:	e7f6      	b.n	80016c6 <mcp23008_pin_write_all+0x32>
        return 3; /**< return error */
 80016d8:	2003      	movs	r0, #3
 80016da:	e7f4      	b.n	80016c6 <mcp23008_pin_write_all+0x32>
 80016dc:	08006a5a 	.word	0x08006a5a

080016e0 <mcp23008_pin_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed read pin
 * @note    none
 */
uint8_t mcp23008_pin_read(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_logic_level_t *logic_level) {
 80016e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016e2:	460e      	mov	r6, r1
 80016e4:	4615      	mov	r5, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 80016e6:	4604      	mov	r4, r0
 80016e8:	b1d0      	cbz	r0, 8001720 <mcp23008_pin_read+0x40>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 80016ea:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
 80016ee:	2f01      	cmp	r7, #1
 80016f0:	d118      	bne.n	8001724 <mcp23008_pin_read+0x44>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_GENERAL_PURPOSE_REG, (uint8_t *) &status, 1);
 80016f2:	463b      	mov	r3, r7
 80016f4:	f10d 0207 	add.w	r2, sp, #7
 80016f8:	2109      	movs	r1, #9
 80016fa:	f7ff fef0 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 80016fe:	b130      	cbz	r0, 800170e <mcp23008_pin_read+0x2e>
        a_mcp23008_print_error_msg(pHandle, "read latch register");
 8001700:	4620      	mov	r0, r4
 8001702:	4909      	ldr	r1, [pc, #36]	; (8001728 <mcp23008_pin_read+0x48>)
 8001704:	f7ff ff06 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
 8001708:	4638      	mov	r0, r7
    }
    *logic_level = (mcp23008_port_logic_level_t) ((status & pinMask[pin]) >> pin);
    return 0;
}
 800170a:	b003      	add	sp, #12
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *logic_level = (mcp23008_port_logic_level_t) ((status & pinMask[pin]) >> pin);
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <mcp23008_pin_read+0x4c>)
 8001710:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001714:	5d9b      	ldrb	r3, [r3, r6]
 8001716:	400b      	ands	r3, r1
 8001718:	fa43 f106 	asr.w	r1, r3, r6
 800171c:	7029      	strb	r1, [r5, #0]
    return 0;
 800171e:	e7f4      	b.n	800170a <mcp23008_pin_read+0x2a>
        return 2; /**< return error */
 8001720:	2002      	movs	r0, #2
 8001722:	e7f2      	b.n	800170a <mcp23008_pin_read+0x2a>
        return 3; /**< return error */
 8001724:	2003      	movs	r0, #3
 8001726:	e7f0      	b.n	800170a <mcp23008_pin_read+0x2a>
 8001728:	08006a3c 	.word	0x08006a3c
 800172c:	08006c1f 	.word	0x08006c1f

08001730 <mcp23008_set_pin_pullup_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set pull-up mode
 * @note    none
 */
uint8_t mcp23008_set_pin_pullup_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
 8001730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001732:	460f      	mov	r7, r1
 8001734:	4616      	mov	r6, r2

    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 8001736:	4605      	mov	r5, r0
 8001738:	b330      	cbz	r0, 8001788 <mcp23008_set_pin_pullup_mode+0x58>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 800173a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800173e:	2c01      	cmp	r4, #1
 8001740:	d124      	bne.n	800178c <mcp23008_set_pin_pullup_mode+0x5c>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *)&status, 1);
 8001742:	4623      	mov	r3, r4
 8001744:	f10d 0207 	add.w	r2, sp, #7
 8001748:	2106      	movs	r1, #6
 800174a:	f7ff fec8 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 800174e:	b130      	cbz	r0, 800175e <mcp23008_set_pin_pullup_mode+0x2e>
        a_mcp23008_print_error_msg(pHandle, "read pull-up register");
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <mcp23008_set_pin_pullup_mode+0x64>)
    }
    status &= ~(1 << pin);
    status |= (enable << pin);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
 8001752:	4628      	mov	r0, r5
 8001754:	f7ff fede 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 8001758:	4620      	mov	r0, r4
 800175a:	b003      	add	sp, #12
 800175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status &= ~(1 << pin);
 800175e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001762:	fa04 f207 	lsl.w	r2, r4, r7
 8001766:	ea23 0302 	bic.w	r3, r3, r2
    status |= (enable << pin);
 800176a:	fa06 f207 	lsl.w	r2, r6, r7
 800176e:	431a      	orrs	r2, r3
 8001770:	f88d 2007 	strb.w	r2, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *) &status, 1);
 8001774:	4623      	mov	r3, r4
 8001776:	f10d 0207 	add.w	r2, sp, #7
 800177a:	2106      	movs	r1, #6
 800177c:	4628      	mov	r0, r5
 800177e:	f7ff fe92 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 8001782:	b128      	cbz	r0, 8001790 <mcp23008_set_pin_pullup_mode+0x60>
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <mcp23008_set_pin_pullup_mode+0x68>)
 8001786:	e7e4      	b.n	8001752 <mcp23008_set_pin_pullup_mode+0x22>
        return 2; /**< return error */
 8001788:	2402      	movs	r4, #2
 800178a:	e7e5      	b.n	8001758 <mcp23008_set_pin_pullup_mode+0x28>
        return 3; /**< return error */
 800178c:	2403      	movs	r4, #3
 800178e:	e7e3      	b.n	8001758 <mcp23008_set_pin_pullup_mode+0x28>
    return 0;
 8001790:	4604      	mov	r4, r0
 8001792:	e7e1      	b.n	8001758 <mcp23008_set_pin_pullup_mode+0x28>
 8001794:	08006a69 	.word	0x08006a69
 8001798:	08006a7f 	.word	0x08006a7f

0800179c <mcp23008_set_pin_input_polarity_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set polarity
 * @note    none
 */
uint8_t mcp23008_set_pin_input_polarity_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_polarity_t polarity) {
 800179c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800179e:	460f      	mov	r7, r1
 80017a0:	4616      	mov	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 80017a2:	4605      	mov	r5, r0
 80017a4:	b330      	cbz	r0, 80017f4 <mcp23008_set_pin_input_polarity_mode+0x58>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 80017a6:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 80017aa:	2c01      	cmp	r4, #1
 80017ac:	d124      	bne.n	80017f8 <mcp23008_set_pin_input_polarity_mode+0x5c>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
 80017ae:	4623      	mov	r3, r4
 80017b0:	f10d 0207 	add.w	r2, sp, #7
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff fe92 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 80017ba:	b130      	cbz	r0, 80017ca <mcp23008_set_pin_input_polarity_mode+0x2e>
        a_mcp23008_print_error_msg(pHandle, "read input polarity");
 80017bc:	4910      	ldr	r1, [pc, #64]	; (8001800 <mcp23008_set_pin_input_polarity_mode+0x64>)
    }
    status &= ~(1 << pin);
    status |= (polarity << pin);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
 80017be:	4628      	mov	r0, r5
 80017c0:	f7ff fea8 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 80017c4:	4620      	mov	r0, r4
 80017c6:	b003      	add	sp, #12
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status &= ~(1 << pin);
 80017ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017ce:	fa04 f207 	lsl.w	r2, r4, r7
 80017d2:	ea23 0302 	bic.w	r3, r3, r2
    status |= (polarity << pin);
 80017d6:	fa06 f207 	lsl.w	r2, r6, r7
 80017da:	431a      	orrs	r2, r3
 80017dc:	f88d 2007 	strb.w	r2, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
 80017e0:	4623      	mov	r3, r4
 80017e2:	f10d 0207 	add.w	r2, sp, #7
 80017e6:	4621      	mov	r1, r4
 80017e8:	4628      	mov	r0, r5
 80017ea:	f7ff fe5c 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 80017ee:	b128      	cbz	r0, 80017fc <mcp23008_set_pin_input_polarity_mode+0x60>
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <mcp23008_set_pin_input_polarity_mode+0x68>)
 80017f2:	e7e4      	b.n	80017be <mcp23008_set_pin_input_polarity_mode+0x22>
        return 2; /**< return error */
 80017f4:	2402      	movs	r4, #2
 80017f6:	e7e5      	b.n	80017c4 <mcp23008_set_pin_input_polarity_mode+0x28>
        return 3; /**< return error */
 80017f8:	2403      	movs	r4, #3
 80017fa:	e7e3      	b.n	80017c4 <mcp23008_set_pin_input_polarity_mode+0x28>
    return 0;
 80017fc:	4604      	mov	r4, r0
 80017fe:	e7e1      	b.n	80017c4 <mcp23008_set_pin_input_polarity_mode+0x28>
 8001800:	08006a8f 	.word	0x08006a8f
 8001804:	08006aa3 	.word	0x08006aa3

08001808 <mcp23008_set_pin_interrupt>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set interrupt
 * @note    none
 */
uint8_t mcp23008_set_pin_interrupt(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
 8001808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800180a:	460f      	mov	r7, r1
 800180c:	4616      	mov	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 800180e:	4605      	mov	r5, r0
 8001810:	b330      	cbz	r0, 8001860 <mcp23008_set_pin_interrupt+0x58>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 8001812:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8001816:	2c01      	cmp	r4, #1
 8001818:	d124      	bne.n	8001864 <mcp23008_set_pin_interrupt+0x5c>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
 800181a:	4623      	mov	r3, r4
 800181c:	f10d 0207 	add.w	r2, sp, #7
 8001820:	2102      	movs	r1, #2
 8001822:	f7ff fe5c 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001826:	b130      	cbz	r0, 8001836 <mcp23008_set_pin_interrupt+0x2e>
        a_mcp23008_print_error_msg(pHandle, "read interrupt");
 8001828:	4910      	ldr	r1, [pc, #64]	; (800186c <mcp23008_set_pin_interrupt+0x64>)
    }
    status &= ~(1 << pin);
    status |= (enable << pin);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
 800182a:	4628      	mov	r0, r5
 800182c:	f7ff fe72 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 8001830:	4620      	mov	r0, r4
 8001832:	b003      	add	sp, #12
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status &= ~(1 << pin);
 8001836:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800183a:	fa04 f207 	lsl.w	r2, r4, r7
 800183e:	ea23 0302 	bic.w	r3, r3, r2
    status |= (enable << pin);
 8001842:	fa06 f207 	lsl.w	r2, r6, r7
 8001846:	431a      	orrs	r2, r3
 8001848:	f88d 2007 	strb.w	r2, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
 800184c:	4623      	mov	r3, r4
 800184e:	f10d 0207 	add.w	r2, sp, #7
 8001852:	2102      	movs	r1, #2
 8001854:	4628      	mov	r0, r5
 8001856:	f7ff fe26 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 800185a:	b128      	cbz	r0, 8001868 <mcp23008_set_pin_interrupt+0x60>
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <mcp23008_set_pin_interrupt+0x68>)
 800185e:	e7e4      	b.n	800182a <mcp23008_set_pin_interrupt+0x22>
        return 2; /**< return error */
 8001860:	2402      	movs	r4, #2
 8001862:	e7e5      	b.n	8001830 <mcp23008_set_pin_interrupt+0x28>
        return 3; /**< return error */
 8001864:	2403      	movs	r4, #3
 8001866:	e7e3      	b.n	8001830 <mcp23008_set_pin_interrupt+0x28>
    return 0;
 8001868:	4604      	mov	r4, r0
 800186a:	e7e1      	b.n	8001830 <mcp23008_set_pin_interrupt+0x28>
 800186c:	08006aba 	.word	0x08006aba
 8001870:	08006ac9 	.word	0x08006ac9

08001874 <mcp23008_get_interrupt_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed to get interrupt flag status
 * @note    none
 */
uint8_t mcp23008_get_interrupt_flag(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_interrupt_flag_t *flag) {
 8001874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001876:	460e      	mov	r6, r1
 8001878:	4615      	mov	r5, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 800187a:	4604      	mov	r4, r0
 800187c:	b1d0      	cbz	r0, 80018b4 <mcp23008_get_interrupt_flag+0x40>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 800187e:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
 8001882:	2f01      	cmp	r7, #1
 8001884:	d118      	bne.n	80018b8 <mcp23008_get_interrupt_flag+0x44>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_FLAG_REG, (uint8_t *) &status, 1);
 8001886:	463b      	mov	r3, r7
 8001888:	f10d 0207 	add.w	r2, sp, #7
 800188c:	2107      	movs	r1, #7
 800188e:	f7ff fe26 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001892:	b130      	cbz	r0, 80018a2 <mcp23008_get_interrupt_flag+0x2e>
        a_mcp23008_print_error_msg(pHandle, "read pin interrupt status");
 8001894:	4620      	mov	r0, r4
 8001896:	4909      	ldr	r1, [pc, #36]	; (80018bc <mcp23008_get_interrupt_flag+0x48>)
 8001898:	f7ff fe3c 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
 800189c:	4638      	mov	r0, r7
    }

    *flag = (mcp23008_interrupt_flag_t) ((status & pinMask[pin]) >> pin);
    return 0;
}
 800189e:	b003      	add	sp, #12
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *flag = (mcp23008_interrupt_flag_t) ((status & pinMask[pin]) >> pin);
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <mcp23008_get_interrupt_flag+0x4c>)
 80018a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80018a8:	5d9b      	ldrb	r3, [r3, r6]
 80018aa:	400b      	ands	r3, r1
 80018ac:	fa43 f106 	asr.w	r1, r3, r6
 80018b0:	7029      	strb	r1, [r5, #0]
    return 0;
 80018b2:	e7f4      	b.n	800189e <mcp23008_get_interrupt_flag+0x2a>
        return 2; /**< return error */
 80018b4:	2002      	movs	r0, #2
 80018b6:	e7f2      	b.n	800189e <mcp23008_get_interrupt_flag+0x2a>
        return 3; /**< return error */
 80018b8:	2003      	movs	r0, #3
 80018ba:	e7f0      	b.n	800189e <mcp23008_get_interrupt_flag+0x2a>
 80018bc:	08006adb 	.word	0x08006adb
 80018c0:	08006c1f 	.word	0x08006c1f

080018c4 <mcp23008_clear_interrupt_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed to get interrupt flag status
 * @note    none
 */
uint8_t mcp23008_clear_interrupt_flag(mcp23008_handle_t *const pHandle/*, mcp23008_gpio_port_t pin, mcp23008_interrupt_flag_t flag*/) {
 80018c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 80018c6:	4604      	mov	r4, r0
 80018c8:	b1c0      	cbz	r0, 80018fc <mcp23008_clear_interrupt_flag+0x38>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 80018ca:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
 80018ce:	2d01      	cmp	r5, #1
 80018d0:	d116      	bne.n	8001900 <mcp23008_clear_interrupt_flag+0x3c>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_FLAG_REG, (uint8_t *) &status, 1);
 80018d2:	462b      	mov	r3, r5
 80018d4:	f10d 0207 	add.w	r2, sp, #7
 80018d8:	2107      	movs	r1, #7
 80018da:	f7ff fe00 	bl	80014de <a_mcp23008_i2c_read>
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_CAPTURED_REG, (uint8_t *) &status, 1);
 80018de:	462b      	mov	r3, r5
 80018e0:	f10d 0207 	add.w	r2, sp, #7
 80018e4:	2108      	movs	r1, #8
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fdf9 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 80018ec:	b120      	cbz	r0, 80018f8 <mcp23008_clear_interrupt_flag+0x34>
        a_mcp23008_print_error_msg(pHandle, "read interrupt flag");
 80018ee:	4620      	mov	r0, r4
 80018f0:	4904      	ldr	r1, [pc, #16]	; (8001904 <mcp23008_clear_interrupt_flag+0x40>)
 80018f2:	f7ff fe0f 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
 80018f6:	4628      	mov	r0, r5
    {
        pHandle->debug_print("mcp23008: failed to clear pin interrupt flag\n\r");
        return 1;
    }*/
    return 0;
}
 80018f8:	b003      	add	sp, #12
 80018fa:	bd30      	pop	{r4, r5, pc}
        return 2; /**< return error */
 80018fc:	2002      	movs	r0, #2
 80018fe:	e7fb      	b.n	80018f8 <mcp23008_clear_interrupt_flag+0x34>
        return 3; /**< return error */
 8001900:	2003      	movs	r0, #3
 8001902:	e7f9      	b.n	80018f8 <mcp23008_clear_interrupt_flag+0x34>
 8001904:	08006af5 	.word	0x08006af5

08001908 <mcp23008_set_intrrupt_pin_output_level>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set interrupt logic output logic level
 * @note    none
 */
uint8_t mcp23008_set_intrrupt_pin_output_level(mcp23008_handle_t *const pHandle, mcp23008_interrupt_polarity_t logic_level) {
 8001908:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800190a:	460e      	mov	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 800190c:	4605      	mov	r5, r0
 800190e:	b318      	cbz	r0, 8001958 <mcp23008_set_intrrupt_pin_output_level+0x50>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 8001910:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8001914:	2c01      	cmp	r4, #1
 8001916:	d121      	bne.n	800195c <mcp23008_set_intrrupt_pin_output_level+0x54>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 8001918:	4623      	mov	r3, r4
 800191a:	f10d 0207 	add.w	r2, sp, #7
 800191e:	2105      	movs	r1, #5
 8001920:	f7ff fddd 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001924:	b130      	cbz	r0, 8001934 <mcp23008_set_intrrupt_pin_output_level+0x2c>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
 8001926:	490f      	ldr	r1, [pc, #60]	; (8001964 <mcp23008_set_intrrupt_pin_output_level+0x5c>)
    }
    status &= ~(1 << 1);
    status |= (logic_level << 1);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
 8001928:	4628      	mov	r0, r5
 800192a:	f7ff fdf3 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 800192e:	4620      	mov	r0, r4
 8001930:	b002      	add	sp, #8
 8001932:	bd70      	pop	{r4, r5, r6, pc}
    status &= ~(1 << 1);
 8001934:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001938:	f023 0302 	bic.w	r3, r3, #2
    status |= (logic_level << 1);
 800193c:	ea43 0146 	orr.w	r1, r3, r6, lsl #1
 8001940:	f88d 1007 	strb.w	r1, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 8001944:	4623      	mov	r3, r4
 8001946:	f10d 0207 	add.w	r2, sp, #7
 800194a:	2105      	movs	r1, #5
 800194c:	4628      	mov	r0, r5
 800194e:	f7ff fdaa 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 8001952:	b128      	cbz	r0, 8001960 <mcp23008_set_intrrupt_pin_output_level+0x58>
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
 8001954:	4904      	ldr	r1, [pc, #16]	; (8001968 <mcp23008_set_intrrupt_pin_output_level+0x60>)
 8001956:	e7e7      	b.n	8001928 <mcp23008_set_intrrupt_pin_output_level+0x20>
        return 2; /**< return error */
 8001958:	2402      	movs	r4, #2
 800195a:	e7e8      	b.n	800192e <mcp23008_set_intrrupt_pin_output_level+0x26>
        return 3; /**< return error */
 800195c:	2403      	movs	r4, #3
 800195e:	e7e6      	b.n	800192e <mcp23008_set_intrrupt_pin_output_level+0x26>
    return 0;
 8001960:	4604      	mov	r4, r0
 8001962:	e7e4      	b.n	800192e <mcp23008_set_intrrupt_pin_output_level+0x26>
 8001964:	08006b09 	.word	0x08006b09
 8001968:	08006b1b 	.word	0x08006b1b

0800196c <mcp23008_set_interrupt_pin_output_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt putput mode
 * @note    none
 */
uint8_t mcp23008_set_interrupt_pin_output_mode(mcp23008_handle_t *const pHandle, mcp23008_interrupt_open_drain_mode_t mode) {
 800196c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800196e:	460e      	mov	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 8001970:	4605      	mov	r5, r0
 8001972:	b318      	cbz	r0, 80019bc <mcp23008_set_interrupt_pin_output_mode+0x50>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 8001974:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8001978:	2c01      	cmp	r4, #1
 800197a:	d121      	bne.n	80019c0 <mcp23008_set_interrupt_pin_output_mode+0x54>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 800197c:	4623      	mov	r3, r4
 800197e:	f10d 0207 	add.w	r2, sp, #7
 8001982:	2105      	movs	r1, #5
 8001984:	f7ff fdab 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001988:	b130      	cbz	r0, 8001998 <mcp23008_set_interrupt_pin_output_mode+0x2c>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
 800198a:	490f      	ldr	r1, [pc, #60]	; (80019c8 <mcp23008_set_interrupt_pin_output_mode+0x5c>)
    }
    status &= ~(1 << 2);
    status |= (mode << 2);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
 800198c:	4628      	mov	r0, r5
 800198e:	f7ff fdc1 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 8001992:	4620      	mov	r0, r4
 8001994:	b002      	add	sp, #8
 8001996:	bd70      	pop	{r4, r5, r6, pc}
    status &= ~(1 << 2);
 8001998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800199c:	f023 0304 	bic.w	r3, r3, #4
    status |= (mode << 2);
 80019a0:	ea43 0186 	orr.w	r1, r3, r6, lsl #2
 80019a4:	f88d 1007 	strb.w	r1, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 80019a8:	4623      	mov	r3, r4
 80019aa:	f10d 0207 	add.w	r2, sp, #7
 80019ae:	2105      	movs	r1, #5
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fd78 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 80019b6:	b128      	cbz	r0, 80019c4 <mcp23008_set_interrupt_pin_output_mode+0x58>
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
 80019b8:	4904      	ldr	r1, [pc, #16]	; (80019cc <mcp23008_set_interrupt_pin_output_mode+0x60>)
 80019ba:	e7e7      	b.n	800198c <mcp23008_set_interrupt_pin_output_mode+0x20>
        return 2; /**< return error */
 80019bc:	2402      	movs	r4, #2
 80019be:	e7e8      	b.n	8001992 <mcp23008_set_interrupt_pin_output_mode+0x26>
        return 3; /**< return error */
 80019c0:	2403      	movs	r4, #3
 80019c2:	e7e6      	b.n	8001992 <mcp23008_set_interrupt_pin_output_mode+0x26>
    return 0;
 80019c4:	4604      	mov	r4, r0
 80019c6:	e7e4      	b.n	8001992 <mcp23008_set_interrupt_pin_output_mode+0x26>
 80019c8:	08006b09 	.word	0x08006b09
 80019cc:	08006b36 	.word	0x08006b36

080019d0 <mcp23008_set_ineterrupt_compare_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt compare mode
 * @note    none
 */
uint8_t mcp23008_set_ineterrupt_compare_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_interrupt_compare_value_t mode) {
 80019d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019d2:	460f      	mov	r7, r1
 80019d4:	4616      	mov	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 80019d6:	4605      	mov	r5, r0
 80019d8:	b330      	cbz	r0, 8001a28 <mcp23008_set_ineterrupt_compare_mode+0x58>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 80019da:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 80019de:	2c01      	cmp	r4, #1
 80019e0:	d124      	bne.n	8001a2c <mcp23008_set_ineterrupt_compare_mode+0x5c>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
 80019e2:	4623      	mov	r3, r4
 80019e4:	f10d 0207 	add.w	r2, sp, #7
 80019e8:	2104      	movs	r1, #4
 80019ea:	f7ff fd78 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 80019ee:	b130      	cbz	r0, 80019fe <mcp23008_set_ineterrupt_compare_mode+0x2e>
        a_mcp23008_print_error_msg(pHandle, "read interrupt on change control reg");
 80019f0:	4910      	ldr	r1, [pc, #64]	; (8001a34 <mcp23008_set_ineterrupt_compare_mode+0x64>)
    }
    status &= ~(1 << pin);
    status |= (mode << pin);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
 80019f2:	4628      	mov	r0, r5
 80019f4:	f7ff fd8e 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 80019f8:	4620      	mov	r0, r4
 80019fa:	b003      	add	sp, #12
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status &= ~(1 << pin);
 80019fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a02:	fa04 f207 	lsl.w	r2, r4, r7
 8001a06:	ea23 0302 	bic.w	r3, r3, r2
    status |= (mode << pin);
 8001a0a:	fa06 f207 	lsl.w	r2, r6, r7
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	f88d 2007 	strb.w	r2, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
 8001a14:	4623      	mov	r3, r4
 8001a16:	f10d 0207 	add.w	r2, sp, #7
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f7ff fd42 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 8001a22:	b128      	cbz	r0, 8001a30 <mcp23008_set_ineterrupt_compare_mode+0x60>
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
 8001a24:	4904      	ldr	r1, [pc, #16]	; (8001a38 <mcp23008_set_ineterrupt_compare_mode+0x68>)
 8001a26:	e7e4      	b.n	80019f2 <mcp23008_set_ineterrupt_compare_mode+0x22>
        return 2; /**< return error */
 8001a28:	2402      	movs	r4, #2
 8001a2a:	e7e5      	b.n	80019f8 <mcp23008_set_ineterrupt_compare_mode+0x28>
        return 3; /**< return error */
 8001a2c:	2403      	movs	r4, #3
 8001a2e:	e7e3      	b.n	80019f8 <mcp23008_set_ineterrupt_compare_mode+0x28>
    return 0;
 8001a30:	4604      	mov	r4, r0
 8001a32:	e7e1      	b.n	80019f8 <mcp23008_set_ineterrupt_compare_mode+0x28>
 8001a34:	08006b54 	.word	0x08006b54
 8001a38:	08006b79 	.word	0x08006b79

08001a3c <mcp23008_set_default_compare_value>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set interrupt default value
 * @note    none
 */
uint8_t mcp23008_set_default_compare_value(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_interrupt_default_value_t value) {
 8001a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a3e:	460f      	mov	r7, r1
 8001a40:	4616      	mov	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
 8001a42:	4605      	mov	r5, r0
 8001a44:	b330      	cbz	r0, 8001a94 <mcp23008_set_default_compare_value+0x58>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 8001a46:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8001a4a:	2c01      	cmp	r4, #1
 8001a4c:	d124      	bne.n	8001a98 <mcp23008_set_default_compare_value+0x5c>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_DEFAULT_VALUE_REG, (uint8_t *) &status, 1);
 8001a4e:	4623      	mov	r3, r4
 8001a50:	f10d 0207 	add.w	r2, sp, #7
 8001a54:	2103      	movs	r1, #3
 8001a56:	f7ff fd42 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001a5a:	b130      	cbz	r0, 8001a6a <mcp23008_set_default_compare_value+0x2e>
        a_mcp23008_print_error_msg(pHandle, "read default compare value reg");
 8001a5c:	4910      	ldr	r1, [pc, #64]	; (8001aa0 <mcp23008_set_default_compare_value+0x64>)
    }
    status &= ~(1 << pin);
    status |= (value << pin);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DEFAULT_VALUE_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin default compare value");
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f7ff fd58 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;

}
 8001a64:	4620      	mov	r0, r4
 8001a66:	b003      	add	sp, #12
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status &= ~(1 << pin);
 8001a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a6e:	fa04 f207 	lsl.w	r2, r4, r7
 8001a72:	ea23 0302 	bic.w	r3, r3, r2
    status |= (value << pin);
 8001a76:	fa06 f207 	lsl.w	r2, r6, r7
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	f88d 2007 	strb.w	r2, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DEFAULT_VALUE_REG, (uint8_t *) &status, 1);
 8001a80:	4623      	mov	r3, r4
 8001a82:	f10d 0207 	add.w	r2, sp, #7
 8001a86:	2103      	movs	r1, #3
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f7ff fd0c 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 8001a8e:	b128      	cbz	r0, 8001a9c <mcp23008_set_default_compare_value+0x60>
        a_mcp23008_print_error_msg(pHandle, "set pin default compare value");
 8001a90:	4904      	ldr	r1, [pc, #16]	; (8001aa4 <mcp23008_set_default_compare_value+0x68>)
 8001a92:	e7e4      	b.n	8001a5e <mcp23008_set_default_compare_value+0x22>
        return 2; /**< return error */
 8001a94:	2402      	movs	r4, #2
 8001a96:	e7e5      	b.n	8001a64 <mcp23008_set_default_compare_value+0x28>
        return 3; /**< return error */
 8001a98:	2403      	movs	r4, #3
 8001a9a:	e7e3      	b.n	8001a64 <mcp23008_set_default_compare_value+0x28>
    return 0;
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	e7e1      	b.n	8001a64 <mcp23008_set_default_compare_value+0x28>
 8001aa0:	08006b94 	.word	0x08006b94
 8001aa4:	08006bb3 	.word	0x08006bb3

08001aa8 <mcp23008_set_slew_rate>:
 * @return status code
 *          - 0 success
 *          - 1 failed set slew rate
 * @note    none
 */
uint8_t mcp23008_set_slew_rate(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
 8001aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001aaa:	460e      	mov	r6, r1
    uint8_t err;
    uint8_t status;

    enable = !enable;

    if (pHandle == NULL) /**< check handle */
 8001aac:	4605      	mov	r5, r0
 8001aae:	b330      	cbz	r0, 8001afe <mcp23008_set_slew_rate+0x56>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 8001ab0:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8001ab4:	2c01      	cmp	r4, #1
 8001ab6:	d124      	bne.n	8001b02 <mcp23008_set_slew_rate+0x5a>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 8001ab8:	4623      	mov	r3, r4
 8001aba:	f10d 0207 	add.w	r2, sp, #7
 8001abe:	2105      	movs	r1, #5
 8001ac0:	f7ff fd0d 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001ac4:	b130      	cbz	r0, 8001ad4 <mcp23008_set_slew_rate+0x2c>
        a_mcp23008_print_error_msg(pHandle,"read expander reg");
 8001ac6:	4911      	ldr	r1, [pc, #68]	; (8001b0c <mcp23008_set_slew_rate+0x64>)
    }
    status &= ~(1 << 4);
    status |= (enable << 4);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f7ff fd23 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 8001ace:	4620      	mov	r0, r4
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
    status &= ~(1 << 4);
 8001ad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    enable = !enable;
 8001ad8:	fab6 f186 	clz	r1, r6
    status &= ~(1 << 4);
 8001adc:	f023 0310 	bic.w	r3, r3, #16
    enable = !enable;
 8001ae0:	0949      	lsrs	r1, r1, #5
    status |= (enable << 4);
 8001ae2:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8001ae6:	f88d 1007 	strb.w	r1, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 8001aea:	4623      	mov	r3, r4
 8001aec:	f10d 0207 	add.w	r2, sp, #7
 8001af0:	2105      	movs	r1, #5
 8001af2:	4628      	mov	r0, r5
 8001af4:	f7ff fcd7 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 8001af8:	b128      	cbz	r0, 8001b06 <mcp23008_set_slew_rate+0x5e>
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
 8001afa:	4905      	ldr	r1, [pc, #20]	; (8001b10 <mcp23008_set_slew_rate+0x68>)
 8001afc:	e7e4      	b.n	8001ac8 <mcp23008_set_slew_rate+0x20>
        return 2; /**< return error */
 8001afe:	2402      	movs	r4, #2
 8001b00:	e7e5      	b.n	8001ace <mcp23008_set_slew_rate+0x26>
        return 3; /**< return error */
 8001b02:	2403      	movs	r4, #3
 8001b04:	e7e3      	b.n	8001ace <mcp23008_set_slew_rate+0x26>
    return 0;
 8001b06:	4604      	mov	r4, r0
 8001b08:	e7e1      	b.n	8001ace <mcp23008_set_slew_rate+0x26>
 8001b0a:	bf00      	nop
 8001b0c:	08006b09 	.word	0x08006b09
 8001b10:	08006bd1 	.word	0x08006bd1

08001b14 <mcp23008_set_sequencial_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set sequential operation mode
 * @note    none
 */
uint8_t mcp23008_set_sequencial_mode(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
 8001b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b16:	460e      	mov	r6, r1
    uint8_t err;
    uint8_t status;

    enable = !enable;

    if (pHandle == NULL) /**< check handle */
 8001b18:	4605      	mov	r5, r0
 8001b1a:	b330      	cbz	r0, 8001b6a <mcp23008_set_sequencial_mode+0x56>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
 8001b1c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8001b20:	2c01      	cmp	r4, #1
 8001b22:	d124      	bne.n	8001b6e <mcp23008_set_sequencial_mode+0x5a>
        return 3; /**< return error */

    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 8001b24:	4623      	mov	r3, r4
 8001b26:	f10d 0207 	add.w	r2, sp, #7
 8001b2a:	2105      	movs	r1, #5
 8001b2c:	f7ff fcd7 	bl	80014de <a_mcp23008_i2c_read>
    if (err != 0) {
 8001b30:	b130      	cbz	r0, 8001b40 <mcp23008_set_sequencial_mode+0x2c>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
 8001b32:	4911      	ldr	r1, [pc, #68]	; (8001b78 <mcp23008_set_sequencial_mode+0x64>)
    }
    status &= ~(1 << 5);
    status |= (enable << 5);
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
 8001b34:	4628      	mov	r0, r5
 8001b36:	f7ff fced 	bl	8001514 <a_mcp23008_print_error_msg>
        return 1;
    }
    return 0;
}
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
    status &= ~(1 << 5);
 8001b40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    enable = !enable;
 8001b44:	fab6 f186 	clz	r1, r6
    status &= ~(1 << 5);
 8001b48:	f023 0320 	bic.w	r3, r3, #32
    enable = !enable;
 8001b4c:	0949      	lsrs	r1, r1, #5
    status |= (enable << 5);
 8001b4e:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 8001b52:	f88d 1007 	strb.w	r1, [sp, #7]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
 8001b56:	4623      	mov	r3, r4
 8001b58:	f10d 0207 	add.w	r2, sp, #7
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f7ff fca1 	bl	80014a6 <a_mcp23008_i2c_write>
    if (err != 0) {
 8001b64:	b128      	cbz	r0, 8001b72 <mcp23008_set_sequencial_mode+0x5e>
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
 8001b66:	4905      	ldr	r1, [pc, #20]	; (8001b7c <mcp23008_set_sequencial_mode+0x68>)
 8001b68:	e7e4      	b.n	8001b34 <mcp23008_set_sequencial_mode+0x20>
        return 2; /**< return error */
 8001b6a:	2402      	movs	r4, #2
 8001b6c:	e7e5      	b.n	8001b3a <mcp23008_set_sequencial_mode+0x26>
        return 3; /**< return error */
 8001b6e:	2403      	movs	r4, #3
 8001b70:	e7e3      	b.n	8001b3a <mcp23008_set_sequencial_mode+0x26>
    return 0;
 8001b72:	4604      	mov	r4, r0
 8001b74:	e7e1      	b.n	8001b3a <mcp23008_set_sequencial_mode+0x26>
 8001b76:	bf00      	nop
 8001b78:	08006b09 	.word	0x08006b09
 8001b7c:	08006bdf 	.word	0x08006bdf

08001b80 <mcp23008_info>:
 * @return     status code
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */
uint8_t mcp23008_info(mcp23008_handle_t *const pHandle) {
 8001b80:	b510      	push	{r4, lr}

    strncpy(pHandle->info.chip_name, CHIP_NAME, 10); /**< copy chip name */
 8001b82:	4910      	ldr	r1, [pc, #64]	; (8001bc4 <mcp23008_info+0x44>)
uint8_t mcp23008_info(mcp23008_handle_t *const pHandle) {
 8001b84:	4604      	mov	r4, r0
    strncpy(pHandle->info.chip_name, CHIP_NAME, 10); /**< copy chip name */
 8001b86:	220a      	movs	r2, #10
 8001b88:	301c      	adds	r0, #28
 8001b8a:	f002 fba5 	bl	80042d8 <strncpy>
    strncpy(pHandle->info.interface, INTERFACE, 5); /**< copy interface name */
 8001b8e:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <mcp23008_info+0x48>)
 8001b90:	2205      	movs	r2, #5
 8001b92:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 8001b96:	f002 fb9f 	bl	80042d8 <strncpy>
    strncpy(pHandle->info.manufacturer_name, MANUFACTURER_NAME, 25); /**< copy manufacturer name */
 8001b9a:	490c      	ldr	r1, [pc, #48]	; (8001bcc <mcp23008_info+0x4c>)
 8001b9c:	2219      	movs	r2, #25
 8001b9e:	f104 0026 	add.w	r0, r4, #38	; 0x26
 8001ba2:	f002 fb99 	bl	80042d8 <strncpy>
    pHandle->info.supply_voltage_max_v = SUPPLY_VOLTAGE_MAX; /**< set minimal supply voltage */
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <mcp23008_info+0x50>)
 8001ba8:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->info.supply_voltage_min_v = SUPPLY_VOLTAGE_MIN; /**< set maximum supply voltage */
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <mcp23008_info+0x54>)
 8001bac:	6463      	str	r3, [r4, #68]	; 0x44
    pHandle->info.max_current_ma = MAX_CURRENT; /**< set maximum current */
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <mcp23008_info+0x58>)
 8001bb0:	64e3      	str	r3, [r4, #76]	; 0x4c
    pHandle->info.temperature_max = TEMPERATURE_MAX; /**< set minimal temperature */
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <mcp23008_info+0x5c>)
 8001bb4:	6563      	str	r3, [r4, #84]	; 0x54
    pHandle->info.temperature_min = TEMPERATURE_MIN; /**< set maximum temperature */
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <mcp23008_info+0x60>)
 8001bb8:	6523      	str	r3, [r4, #80]	; 0x50
    pHandle->info.driver_version = DRIVER_VERSION; /**< set driver version */
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <mcp23008_info+0x64>)
 8001bbc:	65a3      	str	r3, [r4, #88]	; 0x58

    return 0; /**< success */
}
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	bd10      	pop	{r4, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08006bfd 	.word	0x08006bfd
 8001bc8:	08006c06 	.word	0x08006c06
 8001bcc:	08006c0a 	.word	0x08006c0a
 8001bd0:	40b00000 	.word	0x40b00000
 8001bd4:	3e99999a 	.word	0x3e99999a
 8001bd8:	43160000 	.word	0x43160000
 8001bdc:	42fa0000 	.word	0x42fa0000
 8001be0:	c2200000 	.word	0xc2200000
 8001be4:	447a0000 	.word	0x447a0000

08001be8 <mcp23008_basic_initialize>:
 * @return status code
 *          - 0 success
 *          - 1 initialize failed
 * @note    none
 */
uint8_t mcp23008_basic_initialize(mcp23008_address_pin_t addr_pin) {
 8001be8:	b537      	push	{r0, r1, r2, r4, r5, lr}

    volatile uint8_t err;
    volatile uint8_t index;

    /*link function*/
    DRIVER_MCP23008_LINK_INIT(&mcp23008_handle, mcp23008_handle_t);
 8001bea:	4d76      	ldr	r5, [pc, #472]	; (8001dc4 <mcp23008_basic_initialize+0x1dc>)
 8001bec:	2244      	movs	r2, #68	; 0x44
 8001bee:	2100      	movs	r1, #0
uint8_t mcp23008_basic_initialize(mcp23008_address_pin_t addr_pin) {
 8001bf0:	4604      	mov	r4, r0
    DRIVER_MCP23008_LINK_INIT(&mcp23008_handle, mcp23008_handle_t);
 8001bf2:	f105 001c 	add.w	r0, r5, #28
 8001bf6:	f001 fefd 	bl	80039f4 <memset>
    DRIVER_MCP23008_LINK_I2C_INIT(&mcp23008_handle, mcp23008_interface_i2c_init);
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <mcp23008_basic_initialize+0x1e0>)
 8001bfc:	602b      	str	r3, [r5, #0]
    DRIVER_MCP23008_LINK_I2C_DEINIT(&mcp23008_handle, mcp23008_interface_i2c_deinit);
 8001bfe:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <mcp23008_basic_initialize+0x1e4>)
 8001c00:	606b      	str	r3, [r5, #4]
    DRIVER_MCP23008_LINK_I2C_READ(&mcp23008_handle, mcp23008_interface_i2c_read);
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <mcp23008_basic_initialize+0x1e8>)
 8001c04:	60eb      	str	r3, [r5, #12]
    DRIVER_MCP23008_LINK_I2C_WRITE(&mcp23008_handle, mcp23008_interface_i2c_write);
 8001c06:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <mcp23008_basic_initialize+0x1ec>)
 8001c08:	60ab      	str	r3, [r5, #8]
    DRIVER_MCP23008_LINK_DELAY_MS(&mcp23008_handle, mcp23008_interface_delay_ms);
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <mcp23008_basic_initialize+0x1f0>)
 8001c0c:	612b      	str	r3, [r5, #16]
    DRIVER_MCP23008_LINK_DEBUG_PRINT(&mcp23008_handle, mcp23008_interface_debug_print);
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <mcp23008_basic_initialize+0x1f4>)
 8001c10:	616b      	str	r3, [r5, #20]
    DRIVER_MCP23008_LINK_RECEIVE_CALLBACK(&mcp23008_handle, mcp23008_interface_receive_callback);

    /*mcp23008 initialize*/
    err = mcp23008_init(&mcp23008_handle);
 8001c12:	4628      	mov	r0, r5
    DRIVER_MCP23008_LINK_RECEIVE_CALLBACK(&mcp23008_handle, mcp23008_interface_receive_callback);
 8001c14:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <mcp23008_basic_initialize+0x1f8>)
 8001c16:	61ab      	str	r3, [r5, #24]
    err = mcp23008_init(&mcp23008_handle);
 8001c18:	f7ff fc82 	bl	8001520 <mcp23008_init>
 8001c1c:	f88d 0006 	strb.w	r0, [sp, #6]
    if (err) {
 8001c20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c24:	b12b      	cbz	r3, 8001c32 <mcp23008_basic_initialize+0x4a>

    /*clear all interrupt*/
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
        err = (mcp23008_clear_interrupt_flag(&mcp23008_handle/*, index, MCP23008_BOOL_FALSE*/) != 0);
        if (err) {
            return err;
 8001c26:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8001c2a:	b2e4      	uxtb	r4, r4

    /* wait 10 ms */
    mcp23008_interface_delay_ms(10);

    return 0; /**< Initialize success */
}
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	b003      	add	sp, #12
 8001c30:	bd30      	pop	{r4, r5, pc}
    err = mcp23008_set_addr_pin(&mcp23008_handle, addr_pin);
 8001c32:	4621      	mov	r1, r4
 8001c34:	4628      	mov	r0, r5
 8001c36:	f7ff fcb3 	bl	80015a0 <mcp23008_set_addr_pin>
 8001c3a:	f88d 0006 	strb.w	r0, [sp, #6]
    if (err) {
 8001c3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c42:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ed      	bne.n	8001c26 <mcp23008_basic_initialize+0x3e>
    err = mcp23008_set_intrrupt_pin_output_level(&mcp23008_handle, MCP23008_interrupt_ACTIVE_LOW);
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	f7ff fe5c 	bl	8001908 <mcp23008_set_intrrupt_pin_output_level>
 8001c50:	f88d 0006 	strb.w	r0, [sp, #6]
    if (err) {
 8001c54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e4      	bne.n	8001c26 <mcp23008_basic_initialize+0x3e>
    err = mcp23008_set_interrupt_pin_output_mode(&mcp23008_handle, MCP23008_interrupt_OPEN_DRAIN_OUTPUT);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4628      	mov	r0, r5
 8001c60:	f7ff fe84 	bl	800196c <mcp23008_set_interrupt_pin_output_mode>
 8001c64:	f88d 0006 	strb.w	r0, [sp, #6]
    if (err) {
 8001c68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c6c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1d8      	bne.n	8001c26 <mcp23008_basic_initialize+0x3e>
    err = mcp23008_set_slew_rate(&mcp23008_handle, MCP23008_BOOL_FALSE);
 8001c74:	4628      	mov	r0, r5
 8001c76:	f7ff ff17 	bl	8001aa8 <mcp23008_set_slew_rate>
 8001c7a:	f88d 0006 	strb.w	r0, [sp, #6]
    if (err) {
 8001c7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1cf      	bne.n	8001c26 <mcp23008_basic_initialize+0x3e>
    err = mcp23008_set_sequencial_mode(&mcp23008_handle, MCP23008_BOOL_TRUE);
 8001c86:	2101      	movs	r1, #1
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f7ff ff43 	bl	8001b14 <mcp23008_set_sequencial_mode>
 8001c8e:	f88d 0006 	strb.w	r0, [sp, #6]
    if (err) {
 8001c92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c96:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1c3      	bne.n	8001c26 <mcp23008_basic_initialize+0x3e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001c9e:	f88d 4007 	strb.w	r4, [sp, #7]
 8001ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	d923      	bls.n	8001cf2 <mcp23008_basic_initialize+0x10a>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001caa:	2300      	movs	r3, #0
        err = mcp23008_set_pin_input_polarity_mode(&mcp23008_handle, index, MCP23008_POLARITY_SAME_LOGIC_STATE);
 8001cac:	4d45      	ldr	r5, [pc, #276]	; (8001dc4 <mcp23008_basic_initialize+0x1dc>)
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001cae:	f88d 3007 	strb.w	r3, [sp, #7]
 8001cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	d92e      	bls.n	8001d18 <mcp23008_basic_initialize+0x130>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001cba:	2300      	movs	r3, #0
        err = (mcp23008_set_pin_pullup_mode(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
 8001cbc:	4d41      	ldr	r5, [pc, #260]	; (8001dc4 <mcp23008_basic_initialize+0x1dc>)
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001cbe:	f88d 3007 	strb.w	r3, [sp, #7]
 8001cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d93a      	bls.n	8001d40 <mcp23008_basic_initialize+0x158>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001cca:	2300      	movs	r3, #0
        err = (mcp23008_set_pin_interrupt(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
 8001ccc:	4d3d      	ldr	r5, [pc, #244]	; (8001dc4 <mcp23008_basic_initialize+0x1dc>)
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001cce:	f88d 3007 	strb.w	r3, [sp, #7]
 8001cd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d949      	bls.n	8001d6e <mcp23008_basic_initialize+0x186>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001cda:	2300      	movs	r3, #0
        err = (mcp23008_clear_interrupt_flag(&mcp23008_handle/*, index, MCP23008_BOOL_FALSE*/) != 0);
 8001cdc:	4d39      	ldr	r5, [pc, #228]	; (8001dc4 <mcp23008_basic_initialize+0x1dc>)
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001cde:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ce6:	2b07      	cmp	r3, #7
 8001ce8:	d958      	bls.n	8001d9c <mcp23008_basic_initialize+0x1b4>
    mcp23008_interface_delay_ms(10);
 8001cea:	200a      	movs	r0, #10
 8001cec:	f000 f90a 	bl	8001f04 <mcp23008_interface_delay_ms>
    return 0; /**< Initialize success */
 8001cf0:	e79c      	b.n	8001c2c <mcp23008_basic_initialize+0x44>
        err = mcp23008_set_ineterrupt_compare_mode(&mcp23008_handle, index, MCP23008_interrupt_COMP_TO_DEFAULT_VALUE);
 8001cf2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f7ff fe69 	bl	80019d0 <mcp23008_set_ineterrupt_compare_mode>
 8001cfe:	f88d 0006 	strb.w	r0, [sp, #6]
        if (err) {
 8001d02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d18d      	bne.n	8001c26 <mcp23008_basic_initialize+0x3e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d16:	e7c4      	b.n	8001ca2 <mcp23008_basic_initialize+0xba>
        err = mcp23008_set_pin_input_polarity_mode(&mcp23008_handle, index, MCP23008_POLARITY_SAME_LOGIC_STATE);
 8001d18:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4628      	mov	r0, r5
 8001d20:	f7ff fd3c 	bl	800179c <mcp23008_set_pin_input_polarity_mode>
 8001d24:	f88d 0006 	strb.w	r0, [sp, #6]
        if (err) {
 8001d28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f af7a 	bne.w	8001c26 <mcp23008_basic_initialize+0x3e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d3e:	e7b8      	b.n	8001cb2 <mcp23008_basic_initialize+0xca>
        err = (mcp23008_set_pin_pullup_mode(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
 8001d40:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4628      	mov	r0, r5
 8001d48:	f7ff fcf2 	bl	8001730 <mcp23008_set_pin_pullup_mode>
 8001d4c:	3800      	subs	r0, #0
 8001d4e:	bf18      	it	ne
 8001d50:	2001      	movne	r0, #1
 8001d52:	f88d 0006 	strb.w	r0, [sp, #6]
        if (err) {
 8001d56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f47f af63 	bne.w	8001c26 <mcp23008_basic_initialize+0x3e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d6c:	e7a9      	b.n	8001cc2 <mcp23008_basic_initialize+0xda>
        err = (mcp23008_set_pin_interrupt(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
 8001d6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001d72:	2200      	movs	r2, #0
 8001d74:	4628      	mov	r0, r5
 8001d76:	f7ff fd47 	bl	8001808 <mcp23008_set_pin_interrupt>
 8001d7a:	3800      	subs	r0, #0
 8001d7c:	bf18      	it	ne
 8001d7e:	2001      	movne	r0, #1
 8001d80:	f88d 0006 	strb.w	r0, [sp, #6]
        if (err) {
 8001d84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f af4c 	bne.w	8001c26 <mcp23008_basic_initialize+0x3e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001d8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d9a:	e79a      	b.n	8001cd2 <mcp23008_basic_initialize+0xea>
        err = (mcp23008_clear_interrupt_flag(&mcp23008_handle/*, index, MCP23008_BOOL_FALSE*/) != 0);
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f7ff fd91 	bl	80018c4 <mcp23008_clear_interrupt_flag>
 8001da2:	3800      	subs	r0, #0
 8001da4:	bf18      	it	ne
 8001da6:	2001      	movne	r0, #1
 8001da8:	f88d 0006 	strb.w	r0, [sp, #6]
        if (err) {
 8001dac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f47f af38 	bne.w	8001c26 <mcp23008_basic_initialize+0x3e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
 8001db6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f88d 3007 	strb.w	r3, [sp, #7]
 8001dc2:	e78e      	b.n	8001ce2 <mcp23008_basic_initialize+0xfa>
 8001dc4:	20000340 	.word	0x20000340
 8001dc8:	08001ee1 	.word	0x08001ee1
 8001dcc:	08001ee5 	.word	0x08001ee5
 8001dd0:	08001ee9 	.word	0x08001ee9
 8001dd4:	08001ef7 	.word	0x08001ef7
 8001dd8:	08001f05 	.word	0x08001f05
 8001ddc:	08001f09 	.word	0x08001f09
 8001de0:	08001f51 	.word	0x08001f51

08001de4 <mcp23008_basic_gpio_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_gpio_write(mcp23008_gpio_port_t GPIOx, mcp23008_port_logic_level_t level) {
 8001de4:	460a      	mov	r2, r1

    err = mcp23008_pin_write(&mcp23008_handle, GPIOx, level);
 8001de6:	4601      	mov	r1, r0
 8001de8:	4801      	ldr	r0, [pc, #4]	; (8001df0 <mcp23008_basic_gpio_write+0xc>)
 8001dea:	f7ff bc1d 	b.w	8001628 <mcp23008_pin_write>
 8001dee:	bf00      	nop
 8001df0:	20000340 	.word	0x20000340

08001df4 <mcp23008_basic_gpio_set_direction>:
    if (direction == MCP23008_INPUT_PULLUP) {
 8001df4:	2910      	cmp	r1, #16
uint8_t mcp23008_basic_gpio_set_direction(mcp23008_gpio_port_t GPIOx, mcp23008_port_mode_t direction) {
 8001df6:	b510      	push	{r4, lr}
 8001df8:	460a      	mov	r2, r1
 8001dfa:	4604      	mov	r4, r0
    if (direction == MCP23008_INPUT_PULLUP) {
 8001dfc:	d113      	bne.n	8001e26 <mcp23008_basic_gpio_set_direction+0x32>
        if (mcp23008_set_pin_pullup_mode(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE) != 0) {
 8001dfe:	4601      	mov	r1, r0
 8001e00:	2201      	movs	r2, #1
 8001e02:	4810      	ldr	r0, [pc, #64]	; (8001e44 <mcp23008_basic_gpio_set_direction+0x50>)
 8001e04:	f7ff fc94 	bl	8001730 <mcp23008_set_pin_pullup_mode>
 8001e08:	b108      	cbz	r0, 8001e0e <mcp23008_basic_gpio_set_direction+0x1a>
            return 1; /**< failed to execute routine */
 8001e0a:	2001      	movs	r0, #1
}
 8001e0c:	bd10      	pop	{r4, pc}
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, MCP23008_INPUT) != 0) {
 8001e0e:	480d      	ldr	r0, [pc, #52]	; (8001e44 <mcp23008_basic_gpio_set_direction+0x50>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	4621      	mov	r1, r4
 8001e14:	f7ff fbd4 	bl	80015c0 <mcp23008_set_pin_mode>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d1f6      	bne.n	8001e0a <mcp23008_basic_gpio_set_direction+0x16>
    mcp23008_interface_delay_ms(50);
 8001e1c:	2032      	movs	r0, #50	; 0x32
 8001e1e:	f000 f871 	bl	8001f04 <mcp23008_interface_delay_ms>
    return 0; /**< success */
 8001e22:	2000      	movs	r0, #0
 8001e24:	e7f2      	b.n	8001e0c <mcp23008_basic_gpio_set_direction+0x18>
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, direction) != 0) {
 8001e26:	4601      	mov	r1, r0
 8001e28:	4806      	ldr	r0, [pc, #24]	; (8001e44 <mcp23008_basic_gpio_set_direction+0x50>)
 8001e2a:	f7ff fbc9 	bl	80015c0 <mcp23008_set_pin_mode>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d1eb      	bne.n	8001e0a <mcp23008_basic_gpio_set_direction+0x16>
 8001e32:	4604      	mov	r4, r0
            mcp23008_basic_gpio_write(index, MCP23008_GPIO_LOW);
 8001e34:	b2e0      	uxtb	r0, r4
 8001e36:	2100      	movs	r1, #0
        for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) /**< clear port after setting the direction */
 8001e38:	3401      	adds	r4, #1
            mcp23008_basic_gpio_write(index, MCP23008_GPIO_LOW);
 8001e3a:	f7ff ffd3 	bl	8001de4 <mcp23008_basic_gpio_write>
        for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) /**< clear port after setting the direction */
 8001e3e:	2c08      	cmp	r4, #8
 8001e40:	d1f8      	bne.n	8001e34 <mcp23008_basic_gpio_set_direction+0x40>
 8001e42:	e7eb      	b.n	8001e1c <mcp23008_basic_gpio_set_direction+0x28>
 8001e44:	20000340 	.word	0x20000340

08001e48 <mcp23008_basic_pin_write_all>:
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_basic_pin_write_all(mcp23008_port_logic_level_t logic_level)
{
 8001e48:	4601      	mov	r1, r0
    err = mcp23008_pin_write_all(&mcp23008_handle, logic_level);
 8001e4a:	4801      	ldr	r0, [pc, #4]	; (8001e50 <mcp23008_basic_pin_write_all+0x8>)
 8001e4c:	f7ff bc22 	b.w	8001694 <mcp23008_pin_write_all>
 8001e50:	20000340 	.word	0x20000340

08001e54 <mcp23008_basic_gpio_read>:
 * @brief basic example to read gpio port
 * @param[in] GPIOx is the gpio port to read
 * @return GPIO read status (pin level)
 * @note    none
 */
uint8_t mcp23008_basic_gpio_read(mcp23008_gpio_port_t GPIOx) {
 8001e54:	b507      	push	{r0, r1, r2, lr}
 8001e56:	4601      	mov	r1, r0

    volatile uint8_t status;
    err = mcp23008_pin_read(&mcp23008_handle, GPIOx, (int *) &status);
 8001e58:	f10d 0207 	add.w	r2, sp, #7
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <mcp23008_basic_gpio_read+0x1c>)
 8001e5e:	f7ff fc3f 	bl	80016e0 <mcp23008_pin_read>
    if(err != 0)
 8001e62:	b910      	cbnz	r0, 8001e6a <mcp23008_basic_gpio_read+0x16>
    {
       return err;
    }
    return status; /**< success */
 8001e64:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001e68:	b2c0      	uxtb	r0, r0
}
 8001e6a:	b003      	add	sp, #12
 8001e6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e70:	20000340 	.word	0x20000340

08001e74 <mcp23008_basic_gpio_toggle>:
 * @return status code
 *          - 0 success
 *          - 1 failed to toggle
 * @note    none
 */
uint8_t mcp23008_basic_gpio_toggle(mcp23008_gpio_port_t GPIOx) {
 8001e74:	b510      	push	{r4, lr}
 8001e76:	4604      	mov	r4, r0

   err = mcp23008_basic_gpio_write(GPIOx, !mcp23008_basic_gpio_read(GPIOx));
 8001e78:	f7ff ffec 	bl	8001e54 <mcp23008_basic_gpio_read>
 8001e7c:	fab0 f180 	clz	r1, r0
 8001e80:	0949      	lsrs	r1, r1, #5
 8001e82:	4620      	mov	r0, r4
   return err; /**< return error code */
}
 8001e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   err = mcp23008_basic_gpio_write(GPIOx, !mcp23008_basic_gpio_read(GPIOx));
 8001e88:	f7ff bfac 	b.w	8001de4 <mcp23008_basic_gpio_write>

08001e8c <mcp23008_basic_interrupt_enable>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_interrupt_enable(mcp23008_gpio_port_t GPIOx, mcp23008_interrupt_default_value_t edge_select) {
 8001e8c:	b538      	push	{r3, r4, r5, lr}

    err = mcp23008_set_pin_interrupt(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE);
 8001e8e:	2201      	movs	r2, #1
uint8_t mcp23008_basic_interrupt_enable(mcp23008_gpio_port_t GPIOx, mcp23008_interrupt_default_value_t edge_select) {
 8001e90:	4604      	mov	r4, r0
 8001e92:	460d      	mov	r5, r1
    err = mcp23008_set_pin_interrupt(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE);
 8001e94:	4601      	mov	r1, r0
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <mcp23008_basic_interrupt_enable+0x24>)
 8001e98:	f7ff fcb6 	bl	8001808 <mcp23008_set_pin_interrupt>
    if(err)
 8001e9c:	b930      	cbnz	r0, 8001eac <mcp23008_basic_interrupt_enable+0x20>
    {
        return err; /**< failed to execute routine */
    }
    err = mcp23008_set_default_compare_value(&mcp23008_handle, GPIOx, edge_select);
 8001e9e:	462a      	mov	r2, r5
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <mcp23008_basic_interrupt_enable+0x24>)
    return err; /**< return error code */
}
 8001ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    err = mcp23008_set_default_compare_value(&mcp23008_handle, GPIOx, edge_select);
 8001ea8:	f7ff bdc8 	b.w	8001a3c <mcp23008_set_default_compare_value>
}
 8001eac:	bd38      	pop	{r3, r4, r5, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000340 	.word	0x20000340

08001eb4 <mcp23008_basic_interrupt_disable>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_interrupt_disable(mcp23008_gpio_port_t GPIOx) {
 8001eb4:	4601      	mov	r1, r0

   err = mcp23008_set_pin_interrupt(&mcp23008_handle, GPIOx, MCP23008_BOOL_FALSE);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4801      	ldr	r0, [pc, #4]	; (8001ec0 <mcp23008_basic_interrupt_disable+0xc>)
 8001eba:	f7ff bca5 	b.w	8001808 <mcp23008_set_pin_interrupt>
 8001ebe:	bf00      	nop
 8001ec0:	20000340 	.word	0x20000340

08001ec4 <mcp23008_basic_clr_interrupt_flag>:
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_clr_interrupt_flag(void) {
   err = mcp23008_clear_interrupt_flag(&mcp23008_handle/*, GPIOx, MCP23008_interrupt_CLEAR*/);
 8001ec4:	4801      	ldr	r0, [pc, #4]	; (8001ecc <mcp23008_basic_clr_interrupt_flag+0x8>)
 8001ec6:	f7ff bcfd 	b.w	80018c4 <mcp23008_clear_interrupt_flag>
 8001eca:	bf00      	nop
 8001ecc:	20000340 	.word	0x20000340

08001ed0 <mcp23008_basic_get_interrupt_flag>:
 * @param[in] GPIOx is the gpio port to clear interrupt flag
 * @param[out] *flag_status point to the interrupt flag status
 * @return interrupt status flag
 * @note    none
 */
uint8_t mcp23008_basic_get_interrupt_flag(mcp23008_gpio_port_t GPIOx, uint8_t *flag_status) {
 8001ed0:	460a      	mov	r2, r1

    err = mcp23008_get_interrupt_flag(&mcp23008_handle, GPIOx, (uint8_t *) flag_status);
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4801      	ldr	r0, [pc, #4]	; (8001edc <mcp23008_basic_get_interrupt_flag+0xc>)
 8001ed6:	f7ff bccd 	b.w	8001874 <mcp23008_get_interrupt_flag>
 8001eda:	bf00      	nop
 8001edc:	20000340 	.word	0x20000340

08001ee0 <mcp23008_interface_i2c_init>:
    /*call your i2c initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	4770      	bx	lr

08001ee4 <mcp23008_interface_i2c_deinit>:
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	4770      	bx	lr

08001ee8 <mcp23008_interface_i2c_read>:
 * @return     status code
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mcp23008_interface_i2c_read(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
 8001ee8:	b508      	push	{r3, lr}
    /*call your i2c read function here*/
    /*user code begin */
   if(i2c_read(u8Addr, pBuf, u8Length) != 0){
 8001eea:	f7ff f997 	bl	800121c <i2c_read>
	   return 1;
   }
    /*user code end*/
    return 0; /**< success */
}
 8001eee:	3800      	subs	r0, #0
 8001ef0:	bf18      	it	ne
 8001ef2:	2001      	movne	r0, #1
 8001ef4:	bd08      	pop	{r3, pc}

08001ef6 <mcp23008_interface_i2c_write>:
 * @return    status code
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mcp23008_interface_i2c_write(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
 8001ef6:	b508      	push	{r3, lr}
    /*call your i2c write function here*/
    /*user code begin */
	   if(i2c_write(u8Addr, pBuf, u8Length)!= 0){
 8001ef8:	f7ff f97e 	bl	80011f8 <i2c_write>
		   return 1;
	   }
    /*user code end*/
    return 0; /**< success */
}
 8001efc:	3800      	subs	r0, #0
 8001efe:	bf18      	it	ne
 8001f00:	2001      	movne	r0, #1
 8001f02:	bd08      	pop	{r3, pc}

08001f04 <mcp23008_interface_delay_ms>:
 * @note      none
 */
void mcp23008_interface_delay_ms(uint32_t U32Ms){
    /*call your delay function here*/
    /*user code begin */
    HAL_Delay(U32Ms);
 8001f04:	f000 b874 	b.w	8001ff0 <HAL_Delay>

08001f08 <mcp23008_interface_debug_print>:
/**
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp23008_interface_debug_print(const char *const fmt, ...) {
 8001f08:	b40f      	push	{r0, r1, r2, r3}
 8001f0a:	b570      	push	{r4, r5, r6, lr}
 8001f0c:	b0c2      	sub	sp, #264	; 0x108
 8001f0e:	ac46      	add	r4, sp, #280	; 0x118
#ifdef MCP23008_DEBUG_MODE
    volatile char str[256];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char)*256);
 8001f10:	f44f 7580 	mov.w	r5, #256	; 0x100
void mcp23008_interface_debug_print(const char *const fmt, ...) {
 8001f14:	f854 6b04 	ldr.w	r6, [r4], #4
    memset((char *) str, 0, sizeof (char)*256);
 8001f18:	462a      	mov	r2, r5
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	a802      	add	r0, sp, #8
 8001f1e:	f001 fd69 	bl	80039f4 <memset>
    va_start(args, fmt);
    vsnprintf((char *) str, 256, (char const *) fmt, args);
 8001f22:	4623      	mov	r3, r4
 8001f24:	4632      	mov	r2, r6
 8001f26:	4629      	mov	r1, r5
 8001f28:	a802      	add	r0, sp, #8
    va_start(args, fmt);
 8001f2a:	9401      	str	r4, [sp, #4]
    vsnprintf((char *) str, 256, (char const *) fmt, args);
 8001f2c:	f002 fa12 	bl	8004354 <vsniprintf>
    va_end(args);

    len = strlen((char *) str);
 8001f30:	a802      	add	r0, sp, #8
 8001f32:	f7fe f94d 	bl	80001d0 <strlen>
 8001f36:	b2c0      	uxtb	r0, r0
 8001f38:	f88d 0003 	strb.w	r0, [sp, #3]
//    EUSART1_Write_Text((const char *) str, len);
    (void)serial_print((uint8_t *)str, len);
 8001f3c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001f40:	a802      	add	r0, sp, #8
 8001f42:	f7ff f94f 	bl	80011e4 <serial_print>

    /*user code end*/
#endif
}
 8001f46:	b042      	add	sp, #264	; 0x108
 8001f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f4c:	b004      	add	sp, #16
 8001f4e:	4770      	bx	lr

08001f50 <mcp23008_interface_receive_callback>:
 * @note      none
 */
void mcp23008_interface_receive_callback(uint8_t type) {
    /*call your interrupt callback function here*/
    /*user code begin */
    switch (type) {
 8001f50:	2807      	cmp	r0, #7
 8001f52:	d902      	bls.n	8001f5a <mcp23008_interface_receive_callback+0xa>
//            mcp23008_interface_debug_print("mcp23008: GP7 interrupt\n");
            break;
        }

        default:
            mcp23008_interface_debug_print("mcp23008:false interrupt t\n");
 8001f54:	4801      	ldr	r0, [pc, #4]	; (8001f5c <mcp23008_interface_receive_callback+0xc>)
 8001f56:	f7ff bfd7 	b.w	8001f08 <mcp23008_interface_debug_print>
            break;
    }

    /*user code end*/

}
 8001f5a:	4770      	bx	lr
 8001f5c:	08006c27 	.word	0x08006c27

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_InitTick+0x40>)
{
 8001f64:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001f66:	7818      	ldrb	r0, [r3, #0]
 8001f68:	b908      	cbnz	r0, 8001f6e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f6a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f6e:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HAL_InitTick+0x44>)
 8001f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f74:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f78:	6810      	ldr	r0, [r2, #0]
 8001f7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f7e:	f000 f88f 	bl	80020a0 <HAL_SYSTICK_Config>
 8001f82:	4604      	mov	r4, r0
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f88:	2d0f      	cmp	r5, #15
 8001f8a:	d8ee      	bhi.n	8001f6a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4629      	mov	r1, r5
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 f852 	bl	800203c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_InitTick+0x48>)
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	601d      	str	r5, [r3, #0]
  return status;
 8001f9e:	e7e5      	b.n	8001f6c <HAL_InitTick+0xc>
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000008 	.word	0x20000008

08001fac <HAL_Init>:
{
 8001fac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fae:	2003      	movs	r0, #3
 8001fb0:	f000 f832 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb4:	200f      	movs	r0, #15
 8001fb6:	f7ff ffd3 	bl	8001f60 <HAL_InitTick>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b918      	cbnz	r0, 8001fc6 <HAL_Init+0x1a>
    HAL_MspInit();
 8001fbe:	f7ff f941 	bl	8001244 <HAL_MspInit>
}
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001fc6:	2401      	movs	r4, #1
 8001fc8:	e7fb      	b.n	8001fc2 <HAL_Init+0x16>
	...

08001fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x10>)
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_IncTick+0x14>)
 8001fd0:	6811      	ldr	r1, [r2, #0]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	200003a0 	.word	0x200003a0
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fe4:	4b01      	ldr	r3, [pc, #4]	; (8001fec <HAL_GetTick+0x8>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	200003a0 	.word	0x200003a0

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff fff6 	bl	8001fe4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001ffa:	bf1c      	itt	ne
 8001ffc:	4b05      	ldrne	r3, [pc, #20]	; (8002014 <HAL_Delay+0x24>)
 8001ffe:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002000:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8002002:	bf18      	it	ne
 8002004:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	f7ff ffed 	bl	8001fe4 <HAL_GetTick>
 800200a:	1b43      	subs	r3, r0, r5
 800200c:	42a3      	cmp	r3, r4
 800200e:	d3fa      	bcc.n	8002006 <HAL_Delay+0x16>
  {
  }
}
 8002010:	bd38      	pop	{r3, r4, r5, pc}
 8002012:	bf00      	nop
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800201a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002028:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002034:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	68dc      	ldr	r4, [r3, #12]
 8002042:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002046:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	2d04      	cmp	r5, #4
 800204e:	bf28      	it	cs
 8002050:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002058:	bf8c      	ite	hi
 800205a:	3c03      	subhi	r4, #3
 800205c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205e:	fa03 f505 	lsl.w	r5, r3, r5
 8002062:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002066:	40a3      	lsls	r3, r4
 8002068:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800206e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	bfac      	ite	ge
 8002076:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	4a08      	ldrlt	r2, [pc, #32]	; (800209c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	bfb8      	it	lt
 8002082:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	b2db      	uxtb	r3, r3
 8002088:	bfaa      	itet	ge
 800208a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002094:	bd30      	pop	{r4, r5, pc}
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00
 800209c:	e000ed14 	.word	0xe000ed14

080020a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	3801      	subs	r0, #1
 80020a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80020a6:	d20b      	bcs.n	80020c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	21f0      	movs	r1, #240	; 0xf0
 80020b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ba:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80020c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020cc:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8002234 <HAL_GPIO_Init+0x16c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d0:	4c56      	ldr	r4, [pc, #344]	; (800222c <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 80020d2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d4:	680a      	ldr	r2, [r1, #0]
 80020d6:	fa32 f503 	lsrs.w	r5, r2, r3
 80020da:	d102      	bne.n	80020e2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80020dc:	b003      	add	sp, #12
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e2:	2501      	movs	r5, #1
 80020e4:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80020e8:	ea18 0202 	ands.w	r2, r8, r2
 80020ec:	f000 8098 	beq.w	8002220 <HAL_GPIO_Init+0x158>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f0:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020f2:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f4:	f006 0503 	and.w	r5, r6, #3
 80020f8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020fc:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002100:	1e6f      	subs	r7, r5, #1
 8002102:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002104:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002108:	d834      	bhi.n	8002174 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800210a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800210c:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002110:	68cf      	ldr	r7, [r1, #12]
 8002112:	fa07 f70e 	lsl.w	r7, r7, lr
 8002116:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800211a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800211c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800211e:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002122:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8002126:	409f      	lsls	r7, r3
 8002128:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800212c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800212e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002130:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002134:	688f      	ldr	r7, [r1, #8]
 8002136:	fa07 f70e 	lsl.w	r7, r7, lr
 800213a:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213e:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8002140:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002142:	d119      	bne.n	8002178 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8002144:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002148:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800214c:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002150:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002154:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002158:	f04f 0b0f 	mov.w	fp, #15
 800215c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002160:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002164:	690f      	ldr	r7, [r1, #16]
 8002166:	fa07 f70a 	lsl.w	r7, r7, sl
 800216a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 800216e:	f8c8 7020 	str.w	r7, [r8, #32]
 8002172:	e001      	b.n	8002178 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002174:	2d03      	cmp	r5, #3
 8002176:	d1da      	bne.n	800212e <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8002178:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800217a:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800217e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002182:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002184:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002188:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800218a:	d049      	beq.n	8002220 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002190:	f045 0501 	orr.w	r5, r5, #1
 8002194:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002198:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800219c:	f023 0703 	bic.w	r7, r3, #3
 80021a0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80021a4:	f005 0501 	and.w	r5, r5, #1
 80021a8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80021ac:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ae:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80021b4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80021ba:	f04f 0e0f 	mov.w	lr, #15
 80021be:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ca:	d02b      	beq.n	8002224 <HAL_GPIO_Init+0x15c>
 80021cc:	4d18      	ldr	r5, [pc, #96]	; (8002230 <HAL_GPIO_Init+0x168>)
 80021ce:	42a8      	cmp	r0, r5
 80021d0:	d02a      	beq.n	8002228 <HAL_GPIO_Init+0x160>
 80021d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021d6:	42a8      	cmp	r0, r5
 80021d8:	bf0c      	ite	eq
 80021da:	2502      	moveq	r5, #2
 80021dc:	2507      	movne	r5, #7
 80021de:	fa05 f50c 	lsl.w	r5, r5, ip
 80021e2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 80021e8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80021ea:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ec:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80021f0:	bf0c      	ite	eq
 80021f2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80021f4:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 80021f6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80021f8:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021fa:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80021fe:	bf0c      	ite	eq
 8002200:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002202:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8002204:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8002206:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002208:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 800220c:	bf0c      	ite	eq
 800220e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002210:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8002212:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8002214:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002216:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8002218:	bf54      	ite	pl
 800221a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800221c:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 800221e:	6025      	str	r5, [r4, #0]
    position++;
 8002220:	3301      	adds	r3, #1
 8002222:	e757      	b.n	80020d4 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002224:	2500      	movs	r5, #0
 8002226:	e7da      	b.n	80021de <HAL_GPIO_Init+0x116>
 8002228:	2501      	movs	r5, #1
 800222a:	e7d8      	b.n	80021de <HAL_GPIO_Init+0x116>
 800222c:	40010400 	.word	0x40010400
 8002230:	48000400 	.word	0x48000400
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	b10a      	cbz	r2, 800223e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800223a:	6181      	str	r1, [r0, #24]
 800223c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002240:	4770      	bx	lr

08002242 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002242:	6803      	ldr	r3, [r0, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002248:	bf44      	itt	mi
 800224a:	2200      	movmi	r2, #0
 800224c:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002252:	bf5e      	ittt	pl
 8002254:	699a      	ldrpl	r2, [r3, #24]
 8002256:	f042 0201 	orrpl.w	r2, r2, #1
 800225a:	619a      	strpl	r2, [r3, #24]
  }
}
 800225c:	4770      	bx	lr
	...

08002260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002260:	b530      	push	{r4, r5, lr}
 8002262:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002264:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002266:	432b      	orrs	r3, r5
 8002268:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <I2C_TransferConfig+0x28>)
 800226e:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002270:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002274:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002276:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800227a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800227e:	ea20 0002 	bic.w	r0, r0, r2
 8002282:	4303      	orrs	r3, r0
 8002284:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002286:	bd30      	pop	{r4, r5, pc}
 8002288:	03ff63ff 	.word	0x03ff63ff

0800228c <I2C_IsErrorOccurred>:
{
 800228c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8002290:	6803      	ldr	r3, [r0, #0]
 8002292:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002294:	f014 0410 	ands.w	r4, r4, #16
{
 8002298:	4605      	mov	r5, r0
 800229a:	4688      	mov	r8, r1
 800229c:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800229e:	d079      	beq.n	8002394 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a0:	2210      	movs	r2, #16
 80022a2:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022aa:	682b      	ldr	r3, [r5, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	0694      	lsls	r4, r2, #26
 80022b0:	d436      	bmi.n	8002320 <I2C_IsErrorOccurred+0x94>
 80022b2:	b10e      	cbz	r6, 80022b8 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 80022b4:	2404      	movs	r4, #4
 80022b6:	e039      	b.n	800232c <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80022b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80022bc:	d0f6      	beq.n	80022ac <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff fe91 	bl	8001fe4 <HAL_GetTick>
 80022c2:	1bc0      	subs	r0, r0, r7
 80022c4:	4540      	cmp	r0, r8
 80022c6:	d802      	bhi.n	80022ce <I2C_IsErrorOccurred+0x42>
 80022c8:	f1b8 0f00 	cmp.w	r8, #0
 80022cc:	d1ed      	bne.n	80022aa <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80022d2:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022d6:	6998      	ldr	r0, [r3, #24]
 80022d8:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 80022da:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022dc:	d50a      	bpl.n	80022f4 <I2C_IsErrorOccurred+0x68>
 80022de:	0449      	lsls	r1, r1, #17
 80022e0:	d408      	bmi.n	80022f4 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 80022e2:	2a20      	cmp	r2, #32
 80022e4:	d006      	beq.n	80022f4 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ec:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80022ee:	f7ff fe79 	bl	8001fe4 <HAL_GetTick>
 80022f2:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	699c      	ldr	r4, [r3, #24]
 80022f8:	f014 0420 	ands.w	r4, r4, #32
 80022fc:	d1d5      	bne.n	80022aa <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022fe:	f7ff fe71 	bl	8001fe4 <HAL_GetTick>
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	2819      	cmp	r0, #25
 8002306:	d9f5      	bls.n	80022f4 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 800230a:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	f043 0320 	orr.w	r3, r3, #32
 8002312:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8002314:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8002316:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800231e:	e7e9      	b.n	80022f4 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8002320:	2e00      	cmp	r6, #0
 8002322:	d1c7      	bne.n	80022b4 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002324:	2220      	movs	r2, #32
 8002326:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002328:	2404      	movs	r4, #4
    status = HAL_ERROR;
 800232a:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002330:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002332:	bf41      	itttt	mi
 8002334:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8002338:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800233a:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 800233e:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002340:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002342:	bf41      	itttt	mi
 8002344:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8002348:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800234c:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 800234e:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002350:	0592      	lsls	r2, r2, #22
 8002352:	d521      	bpl.n	8002398 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002354:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002358:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800235c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800235e:	4628      	mov	r0, r5
 8002360:	f7ff ff6f 	bl	8002242 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002364:	682a      	ldr	r2, [r5, #0]
 8002366:	6853      	ldr	r3, [r2, #4]
 8002368:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800236c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002370:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800237a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800237c:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800237e:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8002380:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002382:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002386:	2300      	movs	r3, #0
 8002388:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800238c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8002390:	2601      	movs	r6, #1
 8002392:	e003      	b.n	800239c <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8002394:	4626      	mov	r6, r4
 8002396:	e7c9      	b.n	800232c <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8002398:	2e00      	cmp	r6, #0
 800239a:	d1e0      	bne.n	800235e <I2C_IsErrorOccurred+0xd2>
}
 800239c:	4630      	mov	r0, r6
 800239e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080023a2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80023a2:	b570      	push	{r4, r5, r6, lr}
 80023a4:	4604      	mov	r4, r0
 80023a6:	460d      	mov	r5, r1
 80023a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	079b      	lsls	r3, r3, #30
 80023b0:	d501      	bpl.n	80023b6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80023b2:	2000      	movs	r0, #0
}
 80023b4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b6:	4632      	mov	r2, r6
 80023b8:	4629      	mov	r1, r5
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7ff ff66 	bl	800228c <I2C_IsErrorOccurred>
 80023c0:	b9a0      	cbnz	r0, 80023ec <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	1c6a      	adds	r2, r5, #1
 80023c4:	d0f1      	beq.n	80023aa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7ff fe0d 	bl	8001fe4 <HAL_GetTick>
 80023ca:	1b80      	subs	r0, r0, r6
 80023cc:	42a8      	cmp	r0, r5
 80023ce:	d801      	bhi.n	80023d4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80023d0:	2d00      	cmp	r5, #0
 80023d2:	d1ea      	bne.n	80023aa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023d6:	f043 0320 	orr.w	r3, r3, #32
 80023da:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	2320      	movs	r3, #32
 80023de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80023e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
 80023ee:	e7e1      	b.n	80023b4 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080023f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	4604      	mov	r4, r0
 80023f4:	460d      	mov	r5, r1
 80023f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	075b      	lsls	r3, r3, #29
 80023fe:	d40e      	bmi.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002400:	4632      	mov	r2, r6
 8002402:	4629      	mov	r1, r5
 8002404:	4620      	mov	r0, r4
 8002406:	f7ff ff41 	bl	800228c <I2C_IsErrorOccurred>
 800240a:	bb38      	cbnz	r0, 800245c <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	0691      	lsls	r1, r2, #26
 8002412:	d525      	bpl.n	8002460 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	0752      	lsls	r2, r2, #29
 8002418:	d503      	bpl.n	8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 800241a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800241c:	b10a      	cbz	r2, 8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 800241e:	2000      	movs	r0, #0
}
 8002420:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002428:	bf1c      	itt	ne
 800242a:	2210      	movne	r2, #16
 800242c:	61da      	strne	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242e:	f04f 0120 	mov.w	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002432:	bf18      	it	ne
 8002434:	2204      	movne	r2, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002436:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002438:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002440:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002444:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002450:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002458:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
 800245e:	e7df      	b.n	8002420 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7ff fdc0 	bl	8001fe4 <HAL_GetTick>
 8002464:	1b80      	subs	r0, r0, r6
 8002466:	42a8      	cmp	r0, r5
 8002468:	d801      	bhi.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 800246a:	2d00      	cmp	r5, #0
 800246c:	d1c4      	bne.n	80023f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800246e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002470:	f043 0320 	orr.w	r3, r3, #32
 8002474:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002476:	2320      	movs	r3, #32
 8002478:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800247c:	2300      	movs	r3, #0
 800247e:	e7eb      	b.n	8002458 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>

08002480 <I2C_WaitOnFlagUntilTimeout>:
{
 8002480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002484:	9f06      	ldr	r7, [sp, #24]
 8002486:	4604      	mov	r4, r0
 8002488:	4688      	mov	r8, r1
 800248a:	4616      	mov	r6, r2
 800248c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	6993      	ldr	r3, [r2, #24]
 8002492:	ea38 0303 	bics.w	r3, r8, r3
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	42b3      	cmp	r3, r6
 800249e:	d001      	beq.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80024a0:	2000      	movs	r0, #0
 80024a2:	e015      	b.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80024a4:	1c6b      	adds	r3, r5, #1
 80024a6:	d0f3      	beq.n	8002490 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a8:	f7ff fd9c 	bl	8001fe4 <HAL_GetTick>
 80024ac:	1bc0      	subs	r0, r0, r7
 80024ae:	42a8      	cmp	r0, r5
 80024b0:	d801      	bhi.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x36>
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	d1eb      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024b8:	f043 0320 	orr.w	r3, r3, #32
 80024bc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024be:	2320      	movs	r3, #32
 80024c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80024ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80024ce:	2001      	movs	r0, #1
}
 80024d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	4604      	mov	r4, r0
 80024d8:	460d      	mov	r5, r1
 80024da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	069b      	lsls	r3, r3, #26
 80024e2:	d501      	bpl.n	80024e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80024e4:	2000      	movs	r0, #0
}
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e8:	4632      	mov	r2, r6
 80024ea:	4629      	mov	r1, r5
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff fecd 	bl	800228c <I2C_IsErrorOccurred>
 80024f2:	b990      	cbnz	r0, 800251a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f4:	f7ff fd76 	bl	8001fe4 <HAL_GetTick>
 80024f8:	1b80      	subs	r0, r0, r6
 80024fa:	42a8      	cmp	r0, r5
 80024fc:	d801      	bhi.n	8002502 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80024fe:	2d00      	cmp	r5, #0
 8002500:	d1ec      	bne.n	80024dc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002502:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800250a:	2320      	movs	r3, #32
 800250c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	2300      	movs	r3, #0
 8002512:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002516:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800251a:	2001      	movs	r0, #1
 800251c:	e7e3      	b.n	80024e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800251e <HAL_I2C_Init>:
{
 800251e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002520:	4604      	mov	r4, r0
 8002522:	2800      	cmp	r0, #0
 8002524:	d04a      	beq.n	80025bc <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002526:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800252a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800252e:	b91b      	cbnz	r3, 8002538 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002530:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002534:	f7fe fe9e 	bl	8001274 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	2324      	movs	r3, #36	; 0x24
 800253a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002548:	6862      	ldr	r2, [r4, #4]
 800254a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002556:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002558:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255c:	2901      	cmp	r1, #1
 800255e:	d124      	bne.n	80025aa <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002564:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800256c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002570:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002578:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800257a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800257e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002580:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002582:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002586:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002588:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800259e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80025a8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ae:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025b0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025b2:	bf04      	itt	eq
 80025b4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80025b8:	605a      	streq	r2, [r3, #4]
 80025ba:	e7d4      	b.n	8002566 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80025bc:	2001      	movs	r0, #1
 80025be:	e7f3      	b.n	80025a8 <HAL_I2C_Init+0x8a>

080025c0 <HAL_I2C_Master_Transmit>:
{
 80025c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80025c4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80025ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	2b20      	cmp	r3, #32
{
 80025ce:	4604      	mov	r4, r0
 80025d0:	460e      	mov	r6, r1
 80025d2:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d4:	f040 8086 	bne.w	80026e4 <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 80025d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f000 8081 	beq.w	80026e4 <HAL_I2C_Master_Transmit+0x124>
 80025e2:	f04f 0a01 	mov.w	sl, #1
 80025e6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80025ea:	f7ff fcfb 	bl	8001fe4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ee:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80025f0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025f2:	9000      	str	r0, [sp, #0]
 80025f4:	4652      	mov	r2, sl
 80025f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025fa:	4620      	mov	r0, r4
 80025fc:	f7ff ff40 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8002600:	b118      	cbz	r0, 800260a <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
}
 8002604:	b002      	add	sp, #8
 8002606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800260a:	2321      	movs	r3, #33	; 0x21
 800260c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002610:	2310      	movs	r3, #16
 8002612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002616:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002618:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800261e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002622:	b29b      	uxth	r3, r3
 8002624:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8002626:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_I2C_Master_Transmit+0x128>)
 800262a:	d926      	bls.n	800267a <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800262c:	22ff      	movs	r2, #255	; 0xff
 800262e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002630:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002636:	4631      	mov	r1, r6
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fe11 	bl	8002260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800263e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	462a      	mov	r2, r5
 8002644:	4639      	mov	r1, r7
 8002646:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002648:	b9fb      	cbnz	r3, 800268a <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264a:	f7ff ff43 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800264e:	2800      	cmp	r0, #0
 8002650:	d1d7      	bne.n	8002602 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	2120      	movs	r1, #32
 8002656:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800265e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002662:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800266c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002670:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002674:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002678:	e7c4      	b.n	8002604 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800267a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800267c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800267e:	b292      	uxth	r2, r2
 8002680:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	e7d5      	b.n	8002636 <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	f7ff fe8a 	bl	80023a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800268e:	2800      	cmp	r0, #0
 8002690:	d1b7      	bne.n	8002602 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	f813 1b01 	ldrb.w	r1, [r3], #1
 800269a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800269c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800269e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026aa:	3a01      	subs	r2, #1
 80026ac:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ae:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80026b0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0c3      	beq.n	800263e <HAL_I2C_Master_Transmit+0x7e>
 80026b6:	2a00      	cmp	r2, #0
 80026b8:	d1c1      	bne.n	800263e <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ba:	9500      	str	r5, [sp, #0]
 80026bc:	463b      	mov	r3, r7
 80026be:	2180      	movs	r1, #128	; 0x80
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff fedd 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d19b      	bne.n	8002602 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2bff      	cmp	r3, #255	; 0xff
 80026d0:	d903      	bls.n	80026da <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026d6:	9000      	str	r0, [sp, #0]
 80026d8:	e7ab      	b.n	8002632 <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80026da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026dc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80026de:	b292      	uxth	r2, r2
 80026e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026e2:	e7ce      	b.n	8002682 <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 80026e4:	2002      	movs	r0, #2
 80026e6:	e78d      	b.n	8002604 <HAL_I2C_Master_Transmit+0x44>
 80026e8:	80002000 	.word	0x80002000

080026ec <HAL_I2C_Master_Receive>:
{
 80026ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80026f0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80026f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f8:	2b20      	cmp	r3, #32
{
 80026fa:	4604      	mov	r4, r0
 80026fc:	460e      	mov	r6, r1
 80026fe:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002700:	f040 8087 	bne.w	8002812 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8002704:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002708:	2b01      	cmp	r3, #1
 800270a:	f000 8082 	beq.w	8002812 <HAL_I2C_Master_Receive+0x126>
 800270e:	f04f 0a01 	mov.w	sl, #1
 8002712:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002716:	f7ff fc65 	bl	8001fe4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800271a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800271c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800271e:	9000      	str	r0, [sp, #0]
 8002720:	4652      	mov	r2, sl
 8002722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002726:	4620      	mov	r0, r4
 8002728:	f7ff feaa 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 800272c:	b118      	cbz	r0, 8002736 <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
}
 8002730:	b002      	add	sp, #8
 8002732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002736:	2322      	movs	r3, #34	; 0x22
 8002738:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800273c:	2310      	movs	r3, #16
 800273e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002742:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002744:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800274a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800274e:	b29b      	uxth	r3, r3
 8002750:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8002752:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <HAL_I2C_Master_Receive+0x12c>)
 8002756:	d926      	bls.n	80027a6 <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002758:	22ff      	movs	r2, #255	; 0xff
 800275a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800275c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800275e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002762:	4631      	mov	r1, r6
 8002764:	4620      	mov	r0, r4
 8002766:	f7ff fd7b 	bl	8002260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800276a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276e:	462a      	mov	r2, r5
 8002770:	4639      	mov	r1, r7
 8002772:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002774:	b9fb      	cbnz	r3, 80027b6 <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002776:	f7ff fead 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800277a:	2800      	cmp	r0, #0
 800277c:	d1d7      	bne.n	800272e <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	2120      	movs	r1, #32
 8002782:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800278a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800278e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002798:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800279c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80027a4:	e7c4      	b.n	8002730 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80027a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80027aa:	b292      	uxth	r2, r2
 80027ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	e7d5      	b.n	8002762 <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b6:	f7ff fe1b 	bl	80023f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d1b7      	bne.n	800272e <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027c4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80027c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80027c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80027ca:	3301      	adds	r3, #1
 80027cc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027d8:	3a01      	subs	r2, #1
 80027da:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027dc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80027de:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0c2      	beq.n	800276a <HAL_I2C_Master_Receive+0x7e>
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d1c0      	bne.n	800276a <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e8:	9500      	str	r5, [sp, #0]
 80027ea:	463b      	mov	r3, r7
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fe46 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d19a      	bne.n	800272e <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2bff      	cmp	r3, #255	; 0xff
 80027fe:	d903      	bls.n	8002808 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002800:	22ff      	movs	r2, #255	; 0xff
 8002802:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002804:	9000      	str	r0, [sp, #0]
 8002806:	e7aa      	b.n	800275e <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8002808:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800280a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800280c:	b292      	uxth	r2, r2
 800280e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002810:	e7cd      	b.n	80027ae <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8002812:	2002      	movs	r0, #2
 8002814:	e78c      	b.n	8002730 <HAL_I2C_Master_Receive+0x44>
 8002816:	bf00      	nop
 8002818:	80002400 	.word	0x80002400

0800281c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800281c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002822:	2b20      	cmp	r3, #32
 8002824:	b2dc      	uxtb	r4, r3
 8002826:	d11d      	bne.n	8002864 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800282c:	2b01      	cmp	r3, #1
 800282e:	d019      	beq.n	8002864 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	2324      	movs	r3, #36	; 0x24
 8002832:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4311      	orrs	r1, r2
 800284c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002856:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002858:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800285c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002860:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002862:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002864:	2002      	movs	r0, #2
 8002866:	e7fc      	b.n	8002862 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002868 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002868:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800286e:	2b20      	cmp	r3, #32
 8002870:	b2dc      	uxtb	r4, r3
 8002872:	d11c      	bne.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002874:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002878:	2b01      	cmp	r3, #1
 800287a:	d018      	beq.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	2324      	movs	r3, #36	; 0x24
 800287e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002882:	6803      	ldr	r3, [r0, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800288c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800288e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002892:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002896:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80028aa:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80028ac:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80028ae:	2002      	movs	r0, #2
 80028b0:	e7fc      	b.n	80028ac <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080028b4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80028b6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80028b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000

080028c4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d0:	d11d      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d6:	d101      	bne.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028d8:	2000      	movs	r0, #0
 80028da:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2132      	movs	r1, #50	; 0x32
 80028ee:	434b      	muls	r3, r1
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f8:	6951      	ldr	r1, [r2, #20]
 80028fa:	0549      	lsls	r1, r1, #21
 80028fc:	d500      	bpl.n	8002900 <HAL_PWREx_ControlVoltageScaling+0x3c>
 80028fe:	b923      	cbnz	r3, 800290a <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002900:	6953      	ldr	r3, [r2, #20]
 8002902:	055b      	lsls	r3, r3, #21
 8002904:	d5e8      	bpl.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8002906:	2003      	movs	r0, #3
}
 8002908:	4770      	bx	lr
        wait_loop_index--;
 800290a:	3b01      	subs	r3, #1
 800290c:	e7f4      	b.n	80028f8 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002912:	bf1f      	itttt	ne
 8002914:	6813      	ldrne	r3, [r2, #0]
 8002916:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800291a:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800291e:	6013      	strne	r3, [r2, #0]
 8002920:	e7da      	b.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x14>
 8002922:	bf00      	nop
 8002924:	40007000 	.word	0x40007000
 8002928:	20000000 	.word	0x20000000
 800292c:	000f4240 	.word	0x000f4240

08002930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002930:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002932:	4d1e      	ldr	r5, [pc, #120]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002934:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002936:	00da      	lsls	r2, r3, #3
{
 8002938:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800293a:	d518      	bpl.n	800296e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800293c:	f7ff ffba 	bl	80028b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002940:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002944:	d123      	bne.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002946:	2c80      	cmp	r4, #128	; 0x80
 8002948:	d929      	bls.n	800299e <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294a:	2ca0      	cmp	r4, #160	; 0xa0
 800294c:	bf8c      	ite	hi
 800294e:	2002      	movhi	r0, #2
 8002950:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	4303      	orrs	r3, r0
 800295c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002964:	1a18      	subs	r0, r3, r0
 8002966:	bf18      	it	ne
 8002968:	2001      	movne	r0, #1
 800296a:	b003      	add	sp, #12
 800296c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	65ab      	str	r3, [r5, #88]	; 0x58
 8002976:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002980:	f7ff ff98 	bl	80028b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002984:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	65ab      	str	r3, [r5, #88]	; 0x58
 800298c:	e7d8      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800298e:	2c80      	cmp	r4, #128	; 0x80
 8002990:	d807      	bhi.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002992:	d008      	beq.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002994:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002998:	4258      	negs	r0, r3
 800299a:	4158      	adcs	r0, r3
 800299c:	e7d9      	b.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800299e:	2000      	movs	r0, #0
 80029a0:	e7d7      	b.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80029a2:	2003      	movs	r0, #3
 80029a4:	e7d5      	b.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a6:	2002      	movs	r0, #2
 80029a8:	e7d3      	b.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40022000 	.word	0x40022000

080029b4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x8c>)
 80029b6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ba:	f012 020c 	ands.w	r2, r2, #12
 80029be:	d005      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x18>
 80029c0:	2a0c      	cmp	r2, #12
 80029c2:	d115      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029c8:	2901      	cmp	r1, #1
 80029ca:	d118      	bne.n	80029fe <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029cc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80029ce:	481d      	ldr	r0, [pc, #116]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029d0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029d2:	bf55      	itete	pl
 80029d4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029da:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029de:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80029e2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e6:	b34a      	cbz	r2, 8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029e8:	2a0c      	cmp	r2, #12
 80029ea:	d009      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x4c>
 80029ec:	2000      	movs	r0, #0
  return sysclockfreq;
 80029ee:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029f0:	2a04      	cmp	r2, #4
 80029f2:	d022      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029f4:	2a08      	cmp	r2, #8
 80029f6:	4814      	ldr	r0, [pc, #80]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f8:	bf18      	it	ne
 80029fa:	2000      	movne	r0, #0
 80029fc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029fe:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002a06:	2a02      	cmp	r2, #2
 8002a08:	d015      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x82>
 8002a0a:	490f      	ldr	r1, [pc, #60]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a0c:	2a03      	cmp	r2, #3
 8002a0e:	bf08      	it	eq
 8002a10:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a12:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002a1a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a1c:	68d8      	ldr	r0, [r3, #12]
 8002a1e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a22:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a26:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a28:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a2a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a2c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002a30:	fbb2 f0f0 	udiv	r0, r2, r0
 8002a34:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a38:	e7eb      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002a3a:	4804      	ldr	r0, [pc, #16]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	0800691c 	.word	0x0800691c
 8002a48:	007a1200 	.word	0x007a1200
 8002a4c:	00f42400 	.word	0x00f42400

08002a50 <HAL_RCC_OscConfig>:
{
 8002a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002a54:	4605      	mov	r5, r0
 8002a56:	b908      	cbnz	r0, 8002a5c <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8002a58:	2001      	movs	r0, #1
 8002a5a:	e047      	b.n	8002aec <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5c:	4c94      	ldr	r4, [pc, #592]	; (8002cb0 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a5e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a60:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a62:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a64:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a66:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a6e:	d575      	bpl.n	8002b5c <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a70:	b11e      	cbz	r6, 8002a7a <HAL_RCC_OscConfig+0x2a>
 8002a72:	2e0c      	cmp	r6, #12
 8002a74:	d154      	bne.n	8002b20 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a76:	2f01      	cmp	r7, #1
 8002a78:	d152      	bne.n	8002b20 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	0798      	lsls	r0, r3, #30
 8002a7e:	d502      	bpl.n	8002a86 <HAL_RCC_OscConfig+0x36>
 8002a80:	69ab      	ldr	r3, [r5, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0e8      	beq.n	8002a58 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	6a28      	ldr	r0, [r5, #32]
 8002a8a:	0719      	lsls	r1, r3, #28
 8002a8c:	bf56      	itet	pl
 8002a8e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002a92:	6823      	ldrmi	r3, [r4, #0]
 8002a94:	091b      	lsrpl	r3, r3, #4
 8002a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a9a:	4298      	cmp	r0, r3
 8002a9c:	d929      	bls.n	8002af2 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9e:	f7ff ff47 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d1d8      	bne.n	8002a58 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	6a2a      	ldr	r2, [r5, #32]
 8002ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	69ea      	ldr	r2, [r5, #28]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ac6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac8:	f7ff ff74 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002acc:	68a3      	ldr	r3, [r4, #8]
 8002ace:	4a79      	ldr	r2, [pc, #484]	; (8002cb4 <HAL_RCC_OscConfig+0x264>)
 8002ad0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	40d8      	lsrs	r0, r3
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x268>)
 8002ade:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002ae0:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	f7ff fa3c 	bl	8001f60 <HAL_InitTick>
        if(status != HAL_OK)
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d037      	beq.n	8002b5c <HAL_RCC_OscConfig+0x10c>
}
 8002aec:	b003      	add	sp, #12
 8002aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	f043 0308 	orr.w	r3, r3, #8
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b00:	4303      	orrs	r3, r0
 8002b02:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	69ea      	ldr	r2, [r5, #28]
 8002b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b10:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b12:	2e00      	cmp	r6, #0
 8002b14:	d1d8      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b16:	f7ff ff0b 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d0d4      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x78>
 8002b1e:	e79b      	b.n	8002a58 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b20:	69ab      	ldr	r3, [r5, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03a      	beq.n	8002b9c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b2e:	f7ff fa59 	bl	8001fe4 <HAL_GetTick>
 8002b32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	079a      	lsls	r2, r3, #30
 8002b38:	d528      	bpl.n	8002b8c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	6a2a      	ldr	r2, [r5, #32]
 8002b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4e:	6863      	ldr	r3, [r4, #4]
 8002b50:	69ea      	ldr	r2, [r5, #28]
 8002b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b5a:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5c:	682b      	ldr	r3, [r5, #0]
 8002b5e:	07d8      	lsls	r0, r3, #31
 8002b60:	d42d      	bmi.n	8002bbe <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	682b      	ldr	r3, [r5, #0]
 8002b64:	0799      	lsls	r1, r3, #30
 8002b66:	d46b      	bmi.n	8002c40 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	0718      	lsls	r0, r3, #28
 8002b6c:	f100 80a8 	bmi.w	8002cc0 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	0759      	lsls	r1, r3, #29
 8002b74:	f100 80ce 	bmi.w	8002d14 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	0699      	lsls	r1, r3, #26
 8002b7c:	f100 8137 	bmi.w	8002dee <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b80:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 815d 	bne.w	8002e42 <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8002b88:	2000      	movs	r0, #0
 8002b8a:	e7af      	b.n	8002aec <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fa2a 	bl	8001fe4 <HAL_GetTick>
 8002b90:	eba0 0008 	sub.w	r0, r0, r8
 8002b94:	2802      	cmp	r0, #2
 8002b96:	d9cd      	bls.n	8002b34 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8002b98:	2003      	movs	r0, #3
 8002b9a:	e7a7      	b.n	8002aec <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fa1e 	bl	8001fe4 <HAL_GetTick>
 8002ba8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	079b      	lsls	r3, r3, #30
 8002bae:	d5d5      	bpl.n	8002b5c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fa18 	bl	8001fe4 <HAL_GetTick>
 8002bb4:	eba0 0008 	sub.w	r0, r0, r8
 8002bb8:	2802      	cmp	r0, #2
 8002bba:	d9f6      	bls.n	8002baa <HAL_RCC_OscConfig+0x15a>
 8002bbc:	e7ec      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bbe:	2e08      	cmp	r6, #8
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_OscConfig+0x17a>
 8002bc2:	2e0c      	cmp	r6, #12
 8002bc4:	d108      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bc6:	2f03      	cmp	r7, #3
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	039a      	lsls	r2, r3, #14
 8002bce:	d5c8      	bpl.n	8002b62 <HAL_RCC_OscConfig+0x112>
 8002bd0:	686b      	ldr	r3, [r5, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1c5      	bne.n	8002b62 <HAL_RCC_OscConfig+0x112>
 8002bd6:	e73f      	b.n	8002a58 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd8:	686b      	ldr	r3, [r5, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d110      	bne.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002be8:	f7ff f9fc 	bl	8001fe4 <HAL_GetTick>
 8002bec:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	039b      	lsls	r3, r3, #14
 8002bf2:	d4b6      	bmi.n	8002b62 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7ff f9f6 	bl	8001fe4 <HAL_GetTick>
 8002bf8:	eba0 0008 	sub.w	r0, r0, r8
 8002bfc:	2864      	cmp	r0, #100	; 0x64
 8002bfe:	d9f6      	bls.n	8002bee <HAL_RCC_OscConfig+0x19e>
 8002c00:	e7ca      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c06:	d104      	bne.n	8002c12 <HAL_RCC_OscConfig+0x1c2>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	e7e6      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c18:	6022      	str	r2, [r4, #0]
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c20:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8002c26:	f7ff f9dd 	bl	8001fe4 <HAL_GetTick>
 8002c2a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	0398      	lsls	r0, r3, #14
 8002c30:	d597      	bpl.n	8002b62 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c32:	f7ff f9d7 	bl	8001fe4 <HAL_GetTick>
 8002c36:	eba0 0008 	sub.w	r0, r0, r8
 8002c3a:	2864      	cmp	r0, #100	; 0x64
 8002c3c:	d9f6      	bls.n	8002c2c <HAL_RCC_OscConfig+0x1dc>
 8002c3e:	e7ab      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c40:	2e04      	cmp	r6, #4
 8002c42:	d003      	beq.n	8002c4c <HAL_RCC_OscConfig+0x1fc>
 8002c44:	2e0c      	cmp	r6, #12
 8002c46:	d110      	bne.n	8002c6a <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c48:	2f02      	cmp	r7, #2
 8002c4a:	d10e      	bne.n	8002c6a <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	0559      	lsls	r1, r3, #21
 8002c50:	d503      	bpl.n	8002c5a <HAL_RCC_OscConfig+0x20a>
 8002c52:	68eb      	ldr	r3, [r5, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f43f aeff 	beq.w	8002a58 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	6863      	ldr	r3, [r4, #4]
 8002c5c:	692a      	ldr	r2, [r5, #16]
 8002c5e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002c62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c66:	6063      	str	r3, [r4, #4]
 8002c68:	e77e      	b.n	8002b68 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c6a:	68eb      	ldr	r3, [r5, #12]
 8002c6c:	b17b      	cbz	r3, 8002c8e <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c76:	f7ff f9b5 	bl	8001fe4 <HAL_GetTick>
 8002c7a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	055a      	lsls	r2, r3, #21
 8002c80:	d4eb      	bmi.n	8002c5a <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c82:	f7ff f9af 	bl	8001fe4 <HAL_GetTick>
 8002c86:	1bc0      	subs	r0, r0, r7
 8002c88:	2802      	cmp	r0, #2
 8002c8a:	d9f7      	bls.n	8002c7c <HAL_RCC_OscConfig+0x22c>
 8002c8c:	e784      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c94:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c96:	f7ff f9a5 	bl	8001fe4 <HAL_GetTick>
 8002c9a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	055b      	lsls	r3, r3, #21
 8002ca0:	f57f af62 	bpl.w	8002b68 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7ff f99e 	bl	8001fe4 <HAL_GetTick>
 8002ca8:	1bc0      	subs	r0, r0, r7
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d9f6      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
 8002cae:	e773      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08006901 	.word	0x08006901
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc0:	696b      	ldr	r3, [r5, #20]
 8002cc2:	b19b      	cbz	r3, 8002cec <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8002cc4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f988 	bl	8001fe4 <HAL_GetTick>
 8002cd4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002cda:	079a      	lsls	r2, r3, #30
 8002cdc:	f53f af48 	bmi.w	8002b70 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff f980 	bl	8001fe4 <HAL_GetTick>
 8002ce4:	1bc0      	subs	r0, r0, r7
 8002ce6:	2802      	cmp	r0, #2
 8002ce8:	d9f5      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x286>
 8002cea:	e755      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8002cec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002cf8:	f7ff f974 	bl	8001fe4 <HAL_GetTick>
 8002cfc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cfe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d02:	079b      	lsls	r3, r3, #30
 8002d04:	f57f af34 	bpl.w	8002b70 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d08:	f7ff f96c 	bl	8001fe4 <HAL_GetTick>
 8002d0c:	1bc0      	subs	r0, r0, r7
 8002d0e:	2802      	cmp	r0, #2
 8002d10:	d9f5      	bls.n	8002cfe <HAL_RCC_OscConfig+0x2ae>
 8002d12:	e741      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d16:	00d8      	lsls	r0, r3, #3
 8002d18:	d429      	bmi.n	8002d6e <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d2c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d30:	4f96      	ldr	r7, [pc, #600]	; (8002f8c <HAL_RCC_OscConfig+0x53c>)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	05d9      	lsls	r1, r3, #23
 8002d36:	d51d      	bpl.n	8002d74 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d38:	68ab      	ldr	r3, [r5, #8]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d12b      	bne.n	8002d96 <HAL_RCC_OscConfig+0x346>
 8002d3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002d4a:	f7ff f94b 	bl	8001fe4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d52:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d54:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d58:	079b      	lsls	r3, r3, #30
 8002d5a:	d542      	bpl.n	8002de2 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8002d5c:	f1b8 0f00 	cmp.w	r8, #0
 8002d60:	f43f af0a 	beq.w	8002b78 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d6c:	e704      	b.n	8002b78 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	f04f 0800 	mov.w	r8, #0
 8002d72:	e7dd      	b.n	8002d30 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002d7c:	f7ff f932 	bl	8001fe4 <HAL_GetTick>
 8002d80:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	05da      	lsls	r2, r3, #23
 8002d86:	d4d7      	bmi.n	8002d38 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7ff f92c 	bl	8001fe4 <HAL_GetTick>
 8002d8c:	eba0 0009 	sub.w	r0, r0, r9
 8002d90:	2802      	cmp	r0, #2
 8002d92:	d9f6      	bls.n	8002d82 <HAL_RCC_OscConfig+0x332>
 8002d94:	e700      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x358>
 8002d9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002da6:	e7ca      	b.n	8002d3e <HAL_RCC_OscConfig+0x2ee>
 8002da8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002db4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002db8:	f022 0204 	bic.w	r2, r2, #4
 8002dbc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1c2      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8002dc4:	f7ff f90e 	bl	8001fe4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002dcc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002dd2:	0798      	lsls	r0, r3, #30
 8002dd4:	d5c2      	bpl.n	8002d5c <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7ff f905 	bl	8001fe4 <HAL_GetTick>
 8002dda:	1bc0      	subs	r0, r0, r7
 8002ddc:	4548      	cmp	r0, r9
 8002dde:	d9f6      	bls.n	8002dce <HAL_RCC_OscConfig+0x37e>
 8002de0:	e6da      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7ff f8ff 	bl	8001fe4 <HAL_GetTick>
 8002de6:	1bc0      	subs	r0, r0, r7
 8002de8:	4548      	cmp	r0, r9
 8002dea:	d9b3      	bls.n	8002d54 <HAL_RCC_OscConfig+0x304>
 8002dec:	e6d4      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002df0:	b19b      	cbz	r3, 8002e1a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 8002df2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002dfe:	f7ff f8f1 	bl	8001fe4 <HAL_GetTick>
 8002e02:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e04:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002e08:	079a      	lsls	r2, r3, #30
 8002e0a:	f53f aeb9 	bmi.w	8002b80 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0e:	f7ff f8e9 	bl	8001fe4 <HAL_GetTick>
 8002e12:	1bc0      	subs	r0, r0, r7
 8002e14:	2802      	cmp	r0, #2
 8002e16:	d9f5      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3b4>
 8002e18:	e6be      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8002e1a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002e26:	f7ff f8dd 	bl	8001fe4 <HAL_GetTick>
 8002e2a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e2c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002e30:	079b      	lsls	r3, r3, #30
 8002e32:	f57f aea5 	bpl.w	8002b80 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e36:	f7ff f8d5 	bl	8001fe4 <HAL_GetTick>
 8002e3a:	1bc0      	subs	r0, r0, r7
 8002e3c:	2802      	cmp	r0, #2
 8002e3e:	d9f5      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3dc>
 8002e40:	e6aa      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	f040 8088 	bne.w	8002f58 <HAL_RCC_OscConfig+0x508>
      pll_config = RCC->PLLCFGR;
 8002e48:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002e4c:	f003 0103 	and.w	r1, r3, #3
 8002e50:	4291      	cmp	r1, r2
 8002e52:	d122      	bne.n	8002e9a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e54:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002e56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e5a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e60:	d11b      	bne.n	8002e9a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e62:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002e64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e68:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e6c:	d115      	bne.n	8002e9a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e6e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8002e70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e74:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002e78:	d10f      	bne.n	8002e9a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002e7c:	0852      	lsrs	r2, r2, #1
 8002e7e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002e82:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e84:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e8a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e8c:	0852      	lsrs	r2, r2, #1
 8002e8e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002e92:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002e98:	d045      	beq.n	8002f26 <HAL_RCC_OscConfig+0x4d6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e9a:	2e0c      	cmp	r6, #12
 8002e9c:	f43f addc 	beq.w	8002a58 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	015e      	lsls	r6, r3, #5
 8002ea4:	f53f add8 	bmi.w	8002a58 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002eb0:	f7ff f898 	bl	8001fe4 <HAL_GetTick>
 8002eb4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	0198      	lsls	r0, r3, #6
 8002eba:	d42e      	bmi.n	8002f1a <HAL_RCC_OscConfig+0x4ca>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	68e2      	ldr	r2, [r4, #12]
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ecc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002ece:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002ed2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002eda:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002edc:	0852      	lsrs	r2, r2, #1
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002ee4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002eee:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	68e3      	ldr	r3, [r4, #12]
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002f00:	f7ff f870 	bl	8001fe4 <HAL_GetTick>
 8002f04:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	0199      	lsls	r1, r3, #6
 8002f0a:	f53f ae3d 	bmi.w	8002b88 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7ff f869 	bl	8001fe4 <HAL_GetTick>
 8002f12:	1b40      	subs	r0, r0, r5
 8002f14:	2802      	cmp	r0, #2
 8002f16:	d9f6      	bls.n	8002f06 <HAL_RCC_OscConfig+0x4b6>
 8002f18:	e63e      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7ff f863 	bl	8001fe4 <HAL_GetTick>
 8002f1e:	1b80      	subs	r0, r0, r6
 8002f20:	2802      	cmp	r0, #2
 8002f22:	d9c8      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x466>
 8002f24:	e638      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	019a      	lsls	r2, r3, #6
 8002f2a:	f53f ae2d 	bmi.w	8002b88 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f34:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f36:	68e3      	ldr	r3, [r4, #12]
 8002f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002f3e:	f7ff f851 	bl	8001fe4 <HAL_GetTick>
 8002f42:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	019b      	lsls	r3, r3, #6
 8002f48:	f53f ae1e 	bmi.w	8002b88 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7ff f84a 	bl	8001fe4 <HAL_GetTick>
 8002f50:	1b40      	subs	r0, r0, r5
 8002f52:	2802      	cmp	r0, #2
 8002f54:	d9f6      	bls.n	8002f44 <HAL_RCC_OscConfig+0x4f4>
 8002f56:	e61f      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f58:	2e0c      	cmp	r6, #12
 8002f5a:	f43f ad7d 	beq.w	8002a58 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f66:	f7ff f83d 	bl	8001fe4 <HAL_GetTick>
 8002f6a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002f72:	d104      	bne.n	8002f7e <HAL_RCC_OscConfig+0x52e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f74:	68e1      	ldr	r1, [r4, #12]
 8002f76:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_RCC_OscConfig+0x544>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	60e2      	str	r2, [r4, #12]
 8002f7c:	e604      	b.n	8002b88 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7ff f831 	bl	8001fe4 <HAL_GetTick>
 8002f82:	1b40      	subs	r0, r0, r5
 8002f84:	2802      	cmp	r0, #2
 8002f86:	d9f1      	bls.n	8002f6c <HAL_RCC_OscConfig+0x51c>
 8002f88:	e606      	b.n	8002b98 <HAL_RCC_OscConfig+0x148>
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	019d808c 	.word	0x019d808c
 8002f94:	feeefffc 	.word	0xfeeefffc

08002f98 <HAL_RCC_ClockConfig>:
{
 8002f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	b910      	cbnz	r0, 8002fa8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
}
 8002fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	; (80030d8 <HAL_RCC_ClockConfig+0x140>)
 8002faa:	6813      	ldr	r3, [r2, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d32c      	bcc.n	800300e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	0786      	lsls	r6, r0, #30
 8002fb8:	d434      	bmi.n	8003024 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	07c1      	lsls	r1, r0, #31
 8002fbc:	d43f      	bmi.n	800303e <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbe:	6821      	ldr	r1, [r4, #0]
 8002fc0:	078a      	lsls	r2, r1, #30
 8002fc2:	d468      	bmi.n	8003096 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4a44      	ldr	r2, [pc, #272]	; (80030d8 <HAL_RCC_ClockConfig+0x140>)
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	42ab      	cmp	r3, r5
 8002fce:	d86f      	bhi.n	80030b0 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	f011 0f04 	tst.w	r1, #4
 8002fd4:	4d41      	ldr	r5, [pc, #260]	; (80030dc <HAL_RCC_ClockConfig+0x144>)
 8002fd6:	d177      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	070b      	lsls	r3, r1, #28
 8002fda:	d506      	bpl.n	8002fea <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fdc:	68ab      	ldr	r3, [r5, #8]
 8002fde:	6922      	ldr	r2, [r4, #16]
 8002fe0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002fe4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fe8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fea:	f7ff fce3 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002fee:	68ab      	ldr	r3, [r5, #8]
 8002ff0:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_RCC_ClockConfig+0x148>)
 8002ff2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	40d8      	lsrs	r0, r3
 8003002:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 8003004:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003006:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <HAL_RCC_ClockConfig+0x150>)
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	f7fe bfa9 	b.w	8001f60 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	f023 0307 	bic.w	r3, r3, #7
 8003014:	430b      	orrs	r3, r1
 8003016:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003018:	6813      	ldr	r3, [r2, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	428b      	cmp	r3, r1
 8003020:	d1bf      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xa>
 8003022:	e7c7      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003024:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <HAL_RCC_ClockConfig+0x144>)
 8003026:	68a6      	ldr	r6, [r4, #8]
 8003028:	6891      	ldr	r1, [r2, #8]
 800302a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800302e:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	bf81      	itttt	hi
 8003032:	6893      	ldrhi	r3, [r2, #8]
 8003034:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8003038:	4333      	orrhi	r3, r6
 800303a:	6093      	strhi	r3, [r2, #8]
 800303c:	e7bd      	b.n	8002fba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	6862      	ldr	r2, [r4, #4]
 8003040:	4e26      	ldr	r6, [pc, #152]	; (80030dc <HAL_RCC_ClockConfig+0x144>)
 8003042:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003046:	d11a      	bne.n	800307e <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304c:	d0a9      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800304e:	68b3      	ldr	r3, [r6, #8]
 8003050:	f023 0303 	bic.w	r3, r3, #3
 8003054:	4313      	orrs	r3, r2
 8003056:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003058:	f7fe ffc4 	bl	8001fe4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003060:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	68b3      	ldr	r3, [r6, #8]
 8003064:	6862      	ldr	r2, [r4, #4]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800306e:	d0a6      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fe ffb8 	bl	8001fe4 <HAL_GetTick>
 8003074:	1bc0      	subs	r0, r0, r7
 8003076:	4540      	cmp	r0, r8
 8003078:	d9f3      	bls.n	8003062 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800307a:	2003      	movs	r0, #3
 800307c:	e792      	b.n	8002fa4 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	2a02      	cmp	r2, #2
 8003080:	d102      	bne.n	8003088 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003082:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003086:	e7e1      	b.n	800304c <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003088:	b912      	cbnz	r2, 8003090 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800308a:	f013 0f02 	tst.w	r3, #2
 800308e:	e7dd      	b.n	800304c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003090:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003094:	e7da      	b.n	800304c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003096:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_RCC_ClockConfig+0x144>)
 8003098:	68a6      	ldr	r6, [r4, #8]
 800309a:	6890      	ldr	r0, [r2, #8]
 800309c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80030a0:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a2:	bf3f      	itttt	cc
 80030a4:	6893      	ldrcc	r3, [r2, #8]
 80030a6:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80030aa:	4333      	orrcc	r3, r6
 80030ac:	6093      	strcc	r3, [r2, #8]
 80030ae:	e789      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	432b      	orrs	r3, r5
 80030b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	42ab      	cmp	r3, r5
 80030c2:	f47f af6e 	bne.w	8002fa2 <HAL_RCC_ClockConfig+0xa>
 80030c6:	e783      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c8:	68ab      	ldr	r3, [r5, #8]
 80030ca:	68e2      	ldr	r2, [r4, #12]
 80030cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60ab      	str	r3, [r5, #8]
 80030d4:	e780      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x40>
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08006901 	.word	0x08006901
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000008 	.word	0x20000008

080030ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x18>)
 80030ee:	4a06      	ldr	r2, [pc, #24]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030fa:	6810      	ldr	r0, [r2, #0]
 80030fc:	f003 031f 	and.w	r3, r3, #31
}
 8003100:	40d8      	lsrs	r0, r3
 8003102:	4770      	bx	lr
 8003104:	40021000 	.word	0x40021000
 8003108:	08006911 	.word	0x08006911
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003112:	4a06      	ldr	r2, [pc, #24]	; (800312c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311e:	6810      	ldr	r0, [r2, #0]
 8003120:	f003 031f 	and.w	r3, r3, #31
}
 8003124:	40d8      	lsrs	r0, r3
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000
 800312c:	08006911 	.word	0x08006911
 8003130:	20000000 	.word	0x20000000

08003134 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003136:	4c43      	ldr	r4, [pc, #268]	; (8003244 <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003138:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800313a:	68e2      	ldr	r2, [r4, #12]
{
 800313c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800313e:	0790      	lsls	r0, r2, #30
{
 8003140:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003142:	d039      	beq.n	80031b8 <RCCEx_PLLSAI1_Config+0x84>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003144:	68e2      	ldr	r2, [r4, #12]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	429a      	cmp	r2, r3
 800314c:	d177      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x10a>
       ||
 800314e:	2a00      	cmp	r2, #0
 8003150:	d075      	beq.n	800323e <RCCEx_PLLSAI1_Config+0x10a>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003152:	68e3      	ldr	r3, [r4, #12]
       ||
 8003154:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003156:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800315a:	3301      	adds	r3, #1
       ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d16e      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x10a>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003166:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003168:	f7fe ff3c 	bl	8001fe4 <HAL_GetTick>
 800316c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	011a      	lsls	r2, r3, #4
 8003172:	d440      	bmi.n	80031f6 <RCCEx_PLLSAI1_Config+0xc2>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003174:	68ab      	ldr	r3, [r5, #8]
 8003176:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003178:	2e00      	cmp	r6, #0
 800317a:	d043      	beq.n	8003204 <RCCEx_PLLSAI1_Config+0xd0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800317c:	2e01      	cmp	r6, #1
 800317e:	d14c      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003180:	692a      	ldr	r2, [r5, #16]
 8003182:	6921      	ldr	r1, [r4, #16]
 8003184:	0852      	lsrs	r2, r2, #1
 8003186:	1e53      	subs	r3, r2, #1
 8003188:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800318c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003190:	4302      	orrs	r2, r0
 8003192:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8003196:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800319e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe ff20 	bl	8001fe4 <HAL_GetTick>
 80031a4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	d542      	bpl.n	8003232 <RCCEx_PLLSAI1_Config+0xfe>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031ac:	6923      	ldr	r3, [r4, #16]
 80031ae:	69aa      	ldr	r2, [r5, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	6123      	str	r3, [r4, #16]
 80031b4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
 80031b6:	e024      	b.n	8003202 <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d011      	beq.n	80031e0 <RCCEx_PLLSAI1_Config+0xac>
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d013      	beq.n	80031e8 <RCCEx_PLLSAI1_Config+0xb4>
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d13c      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x10a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ca:	d038      	beq.n	800323e <RCCEx_PLLSAI1_Config+0x10a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031cc:	68e0      	ldr	r0, [r4, #12]
 80031ce:	686a      	ldr	r2, [r5, #4]
 80031d0:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80031d4:	3a01      	subs	r2, #1
 80031d6:	4318      	orrs	r0, r3
 80031d8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80031dc:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80031de:	e7bf      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80031e6:	e7f0      	b.n	80031ca <RCCEx_PLLSAI1_Config+0x96>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	0391      	lsls	r1, r2, #14
 80031ec:	d4ee      	bmi.n	80031cc <RCCEx_PLLSAI1_Config+0x98>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ee:	6822      	ldr	r2, [r4, #0]
 80031f0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80031f4:	e7e9      	b.n	80031ca <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f6:	f7fe fef5 	bl	8001fe4 <HAL_GetTick>
 80031fa:	1bc0      	subs	r0, r0, r7
 80031fc:	2802      	cmp	r0, #2
 80031fe:	d9b6      	bls.n	800316e <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8003200:	2003      	movs	r0, #3
}
 8003202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003204:	6922      	ldr	r2, [r4, #16]
 8003206:	68eb      	ldr	r3, [r5, #12]
 8003208:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
 800320c:	f022 4078 	bic.w	r0, r2, #4160749568	; 0xf8000000
 8003210:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8003214:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003216:	6123      	str	r3, [r4, #16]
 8003218:	e7be      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x64>
 800321a:	696b      	ldr	r3, [r5, #20]
 800321c:	6922      	ldr	r2, [r4, #16]
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	1e59      	subs	r1, r3, #1
 8003222:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8003226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322a:	4303      	orrs	r3, r0
 800322c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003230:	e7f1      	b.n	8003216 <RCCEx_PLLSAI1_Config+0xe2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003232:	f7fe fed7 	bl	8001fe4 <HAL_GetTick>
 8003236:	1b80      	subs	r0, r0, r6
 8003238:	2802      	cmp	r0, #2
 800323a:	d9b4      	bls.n	80031a6 <RCCEx_PLLSAI1_Config+0x72>
 800323c:	e7e0      	b.n	8003200 <RCCEx_PLLSAI1_Config+0xcc>
      status = HAL_ERROR;
 800323e:	2001      	movs	r0, #1
 8003240:	e7df      	b.n	8003202 <RCCEx_PLLSAI1_Config+0xce>
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800324c:	6805      	ldr	r5, [r0, #0]
 800324e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8003252:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003254:	d009      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003256:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003258:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800325c:	d035      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x82>
 800325e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003262:	d037      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003264:	2900      	cmp	r1, #0
 8003266:	d040      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003268:	2501      	movs	r5, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	039e      	lsls	r6, r3, #14
 800326e:	d551      	bpl.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003270:	4e95      	ldr	r6, [pc, #596]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003272:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8003274:	00d8      	lsls	r0, r3, #3
 8003276:	d43f      	bmi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	65b3      	str	r3, [r6, #88]	; 0x58
 8003280:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800328a:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328c:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80034cc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003290:	f8d8 3000 	ldr.w	r3, [r8]
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 800329c:	f7fe fea2 	bl	8001fe4 <HAL_GetTick>
 80032a0:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a2:	f8d8 3000 	ldr.w	r3, [r8]
 80032a6:	05d9      	lsls	r1, r3, #23
 80032a8:	d528      	bpl.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xb4>
    if(ret == HAL_OK)
 80032aa:	bb75      	cbnz	r5, 800330a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ac:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80032b4:	f040 80c7 	bne.w	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80032bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80032be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80032c8:	e01f      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032ca:	4a7f      	ldr	r2, [pc, #508]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032cc:	68d3      	ldr	r3, [r2, #12]
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d4:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80032d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80032e0:	430b      	orrs	r3, r1
 80032e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80032e6:	2500      	movs	r5, #0
 80032e8:	e7bf      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x22>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ea:	3004      	adds	r0, #4
 80032ec:	f7ff ff22 	bl	8003134 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80032f0:	4605      	mov	r5, r0
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d1b9      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x22>
 80032f6:	e7ed      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;
 80032f8:	2700      	movs	r7, #0
 80032fa:	e7c7      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x44>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fc:	f7fe fe72 	bl	8001fe4 <HAL_GetTick>
 8003300:	eba0 0009 	sub.w	r0, r0, r9
 8003304:	2802      	cmp	r0, #2
 8003306:	d9cc      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = HAL_TIMEOUT;
 8003308:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800330a:	b11f      	cbz	r7, 8003314 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800330e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003312:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	07df      	lsls	r7, r3, #31
 8003318:	d508      	bpl.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331a:	496b      	ldr	r1, [pc, #428]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800331c:	6a20      	ldr	r0, [r4, #32]
 800331e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003322:	f022 0203 	bic.w	r2, r2, #3
 8003326:	4302      	orrs	r2, r0
 8003328:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800332c:	079e      	lsls	r6, r3, #30
 800332e:	d508      	bpl.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003330:	4965      	ldr	r1, [pc, #404]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003332:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003334:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003338:	f022 020c 	bic.w	r2, r2, #12
 800333c:	4302      	orrs	r2, r0
 800333e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003342:	0698      	lsls	r0, r3, #26
 8003344:	d508      	bpl.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003346:	4960      	ldr	r1, [pc, #384]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003348:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800334a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800334e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003352:	4302      	orrs	r2, r0
 8003354:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003358:	0599      	lsls	r1, r3, #22
 800335a:	d508      	bpl.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800335c:	495a      	ldr	r1, [pc, #360]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800335e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003360:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003364:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003368:	4302      	orrs	r2, r0
 800336a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800336e:	055a      	lsls	r2, r3, #21
 8003370:	d508      	bpl.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003372:	4955      	ldr	r1, [pc, #340]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003374:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003376:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800337a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800337e:	4302      	orrs	r2, r0
 8003380:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003384:	065f      	lsls	r7, r3, #25
 8003386:	d508      	bpl.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003388:	494f      	ldr	r1, [pc, #316]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800338a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800338c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003390:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003394:	4302      	orrs	r2, r0
 8003396:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800339a:	05de      	lsls	r6, r3, #23
 800339c:	d508      	bpl.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339e:	494a      	ldr	r1, [pc, #296]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80033a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80033aa:	4302      	orrs	r2, r0
 80033ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b0:	0498      	lsls	r0, r3, #18
 80033b2:	d50f      	bpl.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b4:	4a44      	ldr	r2, [pc, #272]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80033b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033bc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80033c0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033c2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ca:	d166      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	68d3      	ldr	r3, [r2, #12]
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	0359      	lsls	r1, r3, #13
 80033d8:	d50f      	bpl.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80033de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033e2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80033e6:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033e8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033f0:	d15e      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f2:	68d3      	ldr	r3, [r2, #12]
 80033f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	045a      	lsls	r2, r3, #17
 80033fe:	d512      	bpl.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003400:	4931      	ldr	r1, [pc, #196]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003402:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003404:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003408:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800340c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800340e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003416:	d106      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003418:	2102      	movs	r1, #2
 800341a:	1d20      	adds	r0, r4, #4
 800341c:	f7ff fe8a 	bl	8003134 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003420:	2800      	cmp	r0, #0
 8003422:	bf18      	it	ne
 8003424:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	d508      	bpl.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800342c:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800342e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003430:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003438:	430b      	orrs	r3, r1
 800343a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800343e:	4628      	mov	r0, r5
 8003440:	b003      	add	sp, #12
 8003442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003446:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003448:	4293      	cmp	r3, r2
 800344a:	f43f af35 	beq.w	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800344e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003452:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800345e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003462:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800346a:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800346c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003470:	f8c6 1090 	str.w	r1, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003474:	f57f af20 	bpl.w	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        tickstart = HAL_GetTick();
 8003478:	f7fe fdb4 	bl	8001fe4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003480:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003482:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003486:	079b      	lsls	r3, r3, #30
 8003488:	f53f af16 	bmi.w	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fe fdaa 	bl	8001fe4 <HAL_GetTick>
 8003490:	eba0 0008 	sub.w	r0, r0, r8
 8003494:	4548      	cmp	r0, r9
 8003496:	d9f4      	bls.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8003498:	e736      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800349a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800349e:	d199      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a0:	2101      	movs	r1, #1
 80034a2:	1d20      	adds	r0, r4, #4
 80034a4:	f7ff fe46 	bl	8003134 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80034a8:	2800      	cmp	r0, #0
 80034aa:	bf18      	it	ne
 80034ac:	4605      	movne	r5, r0
 80034ae:	e791      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80034b4:	d1a1      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b6:	2101      	movs	r1, #1
 80034b8:	1d20      	adds	r0, r4, #4
 80034ba:	f7ff fe3b 	bl	8003134 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80034be:	2800      	cmp	r0, #0
 80034c0:	bf18      	it	ne
 80034c2:	4605      	movne	r5, r0
 80034c4:	e799      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000

080034d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d6:	6921      	ldr	r1, [r4, #16]
 80034d8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034da:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034dc:	69c0      	ldr	r0, [r0, #28]
 80034de:	430a      	orrs	r2, r1
 80034e0:	6961      	ldr	r1, [r4, #20]
 80034e2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e4:	4967      	ldr	r1, [pc, #412]	; (8003684 <UART_SetConfig+0x1b4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e8:	4029      	ands	r1, r5
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68e1      	ldr	r1, [r4, #12]
 80034f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034fa:	4a63      	ldr	r2, [pc, #396]	; (8003688 <UART_SetConfig+0x1b8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034fe:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003500:	bf1c      	itt	ne
 8003502:	6a22      	ldrne	r2, [r4, #32]
 8003504:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003510:	4a5e      	ldr	r2, [pc, #376]	; (800368c <UART_SetConfig+0x1bc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d116      	bne.n	8003544 <UART_SetConfig+0x74>
 8003516:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <UART_SetConfig+0x1c0>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	3b01      	subs	r3, #1
 8003522:	2b02      	cmp	r3, #2
 8003524:	f200 80a7 	bhi.w	8003676 <UART_SetConfig+0x1a6>
 8003528:	4a5a      	ldr	r2, [pc, #360]	; (8003694 <UART_SetConfig+0x1c4>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003530:	d170      	bne.n	8003614 <UART_SetConfig+0x144>
  {
    switch (clocksource)
 8003532:	2b08      	cmp	r3, #8
 8003534:	d820      	bhi.n	8003578 <UART_SetConfig+0xa8>
 8003536:	e8df f003 	tbb	[pc, r3]
 800353a:	a14f      	.short	0xa14f
 800353c:	1f681f6b 	.word	0x1f681f6b
 8003540:	1f1f      	.short	0x1f1f
 8003542:	53          	.byte	0x53
 8003543:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003544:	4a54      	ldr	r2, [pc, #336]	; (8003698 <UART_SetConfig+0x1c8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d106      	bne.n	8003558 <UART_SetConfig+0x88>
 800354a:	4b51      	ldr	r3, [pc, #324]	; (8003690 <UART_SetConfig+0x1c0>)
 800354c:	4a53      	ldr	r2, [pc, #332]	; (800369c <UART_SetConfig+0x1cc>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	e7e8      	b.n	800352a <UART_SetConfig+0x5a>
 8003558:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <UART_SetConfig+0x1b8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10c      	bne.n	8003578 <UART_SetConfig+0xa8>
 800355e:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <UART_SetConfig+0x1c0>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356c:	d017      	beq.n	800359e <UART_SetConfig+0xce>
 800356e:	d805      	bhi.n	800357c <UART_SetConfig+0xac>
 8003570:	b153      	cbz	r3, 8003588 <UART_SetConfig+0xb8>
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d00f      	beq.n	8003598 <UART_SetConfig+0xc8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003578:	2001      	movs	r0, #1
 800357a:	e009      	b.n	8003590 <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800357c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003580:	d1fa      	bne.n	8003578 <UART_SetConfig+0xa8>
        pclk = (uint32_t) LSE_VALUE;
 8003582:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003586:	e00b      	b.n	80035a0 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003588:	f7ff fdb0 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800358c:	b940      	cbnz	r0, 80035a0 <UART_SetConfig+0xd0>
 800358e:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003590:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003592:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8003596:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8003598:	f7ff fa0c 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
        break;
 800359c:	e7f6      	b.n	800358c <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359e:	4840      	ldr	r0, [pc, #256]	; (80036a0 <UART_SetConfig+0x1d0>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035a0:	6862      	ldr	r2, [r4, #4]
 80035a2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80035a6:	4283      	cmp	r3, r0
 80035a8:	d8e6      	bhi.n	8003578 <UART_SetConfig+0xa8>
 80035aa:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80035ae:	d8e3      	bhi.n	8003578 <UART_SetConfig+0xa8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035b0:	0851      	lsrs	r1, r2, #1
 80035b2:	2500      	movs	r5, #0
 80035b4:	468c      	mov	ip, r1
 80035b6:	f44f 7680 	mov.w	r6, #256	; 0x100
 80035ba:	4629      	mov	r1, r5
 80035bc:	fbe0 c106 	umlal	ip, r1, r0, r6
 80035c0:	462b      	mov	r3, r5
 80035c2:	4660      	mov	r0, ip
 80035c4:	f7fd faf0 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035c8:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <UART_SetConfig+0x1d4>)
 80035ca:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d8d2      	bhi.n	8003578 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	60d8      	str	r0, [r3, #12]
 80035d6:	e7da      	b.n	800358e <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7ff fd88 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80035dc:	2800      	cmp	r0, #0
 80035de:	d0d6      	beq.n	800358e <UART_SetConfig+0xbe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035e0:	6862      	ldr	r2, [r4, #4]
 80035e2:	0853      	lsrs	r3, r2, #1
 80035e4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ec:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f0:	f1a0 0210 	sub.w	r2, r0, #16
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d8bf      	bhi.n	8003578 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f8:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80035fc:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035fe:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003600:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003604:	4318      	orrs	r0, r3
 8003606:	60d0      	str	r0, [r2, #12]
 8003608:	e7c1      	b.n	800358e <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7ff f9d3 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
        break;
 800360e:	e7e5      	b.n	80035dc <UART_SetConfig+0x10c>
        pclk = (uint32_t) HSI_VALUE;
 8003610:	4823      	ldr	r0, [pc, #140]	; (80036a0 <UART_SetConfig+0x1d0>)
 8003612:	e7e5      	b.n	80035e0 <UART_SetConfig+0x110>
    switch (clocksource)
 8003614:	2b08      	cmp	r3, #8
 8003616:	d8af      	bhi.n	8003578 <UART_SetConfig+0xa8>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0x150>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	0800365d 	.word	0x0800365d
 8003624:	08003667 	.word	0x08003667
 8003628:	08003673 	.word	0x08003673
 800362c:	08003579 	.word	0x08003579
 8003630:	0800366d 	.word	0x0800366d
 8003634:	08003579 	.word	0x08003579
 8003638:	08003579 	.word	0x08003579
 800363c:	08003579 	.word	0x08003579
 8003640:	08003645 	.word	0x08003645
 8003644:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800364e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003652:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003656:	f1a0 0210 	sub.w	r2, r0, #16
 800365a:	e7b8      	b.n	80035ce <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7ff fd46 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003660:	2800      	cmp	r0, #0
 8003662:	d094      	beq.n	800358e <UART_SetConfig+0xbe>
 8003664:	e7f0      	b.n	8003648 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003666:	f7ff fd53 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
        break;
 800366a:	e7f9      	b.n	8003660 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 800366c:	f7ff f9a2 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
        break;
 8003670:	e7f6      	b.n	8003660 <UART_SetConfig+0x190>
        pclk = (uint32_t) HSI_VALUE;
 8003672:	480b      	ldr	r0, [pc, #44]	; (80036a0 <UART_SetConfig+0x1d0>)
 8003674:	e7e8      	b.n	8003648 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003676:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800367a:	d1f4      	bne.n	8003666 <UART_SetConfig+0x196>
        pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7ff fd48 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
        break;
 8003680:	e7ac      	b.n	80035dc <UART_SetConfig+0x10c>
 8003682:	bf00      	nop
 8003684:	efff69f3 	.word	0xefff69f3
 8003688:	40008000 	.word	0x40008000
 800368c:	40013800 	.word	0x40013800
 8003690:	40021000 	.word	0x40021000
 8003694:	08006c43 	.word	0x08006c43
 8003698:	40004400 	.word	0x40004400
 800369c:	08006c46 	.word	0x08006c46
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	000ffcff 	.word	0x000ffcff

080036a8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036aa:	07da      	lsls	r2, r3, #31
{
 80036ac:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ae:	d506      	bpl.n	80036be <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b0:	6801      	ldr	r1, [r0, #0]
 80036b2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80036b4:	684a      	ldr	r2, [r1, #4]
 80036b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036ba:	4322      	orrs	r2, r4
 80036bc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	079c      	lsls	r4, r3, #30
 80036c0:	d506      	bpl.n	80036d0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c2:	6801      	ldr	r1, [r0, #0]
 80036c4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80036c6:	684a      	ldr	r2, [r1, #4]
 80036c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036cc:	4322      	orrs	r2, r4
 80036ce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d0:	0759      	lsls	r1, r3, #29
 80036d2:	d506      	bpl.n	80036e2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d4:	6801      	ldr	r1, [r0, #0]
 80036d6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80036d8:	684a      	ldr	r2, [r1, #4]
 80036da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036de:	4322      	orrs	r2, r4
 80036e0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e2:	071a      	lsls	r2, r3, #28
 80036e4:	d506      	bpl.n	80036f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e6:	6801      	ldr	r1, [r0, #0]
 80036e8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80036ea:	684a      	ldr	r2, [r1, #4]
 80036ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f0:	4322      	orrs	r2, r4
 80036f2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f4:	06dc      	lsls	r4, r3, #27
 80036f6:	d506      	bpl.n	8003706 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f8:	6801      	ldr	r1, [r0, #0]
 80036fa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80036fc:	688a      	ldr	r2, [r1, #8]
 80036fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003702:	4322      	orrs	r2, r4
 8003704:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003706:	0699      	lsls	r1, r3, #26
 8003708:	d506      	bpl.n	8003718 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370a:	6801      	ldr	r1, [r0, #0]
 800370c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800370e:	688a      	ldr	r2, [r1, #8]
 8003710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003714:	4322      	orrs	r2, r4
 8003716:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003718:	065a      	lsls	r2, r3, #25
 800371a:	d50f      	bpl.n	800373c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800371c:	6801      	ldr	r1, [r0, #0]
 800371e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003720:	684a      	ldr	r2, [r1, #4]
 8003722:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003726:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003728:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800372c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800372e:	d105      	bne.n	800373c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003730:	684a      	ldr	r2, [r1, #4]
 8003732:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003734:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003738:	4322      	orrs	r2, r4
 800373a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	d506      	bpl.n	800374e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003740:	6802      	ldr	r2, [r0, #0]
 8003742:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003744:	6853      	ldr	r3, [r2, #4]
 8003746:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800374a:	430b      	orrs	r3, r1
 800374c:	6053      	str	r3, [r2, #4]
  }
}
 800374e:	bd10      	pop	{r4, pc}

08003750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003754:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003758:	4604      	mov	r4, r0
 800375a:	460e      	mov	r6, r1
 800375c:	4615      	mov	r5, r2
 800375e:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	69d3      	ldr	r3, [r2, #28]
 8003764:	ea36 0303 	bics.w	r3, r6, r3
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	42ab      	cmp	r3, r5
 8003770:	d001      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003772:	2000      	movs	r0, #0
 8003774:	e025      	b.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8003776:	f1b8 3fff 	cmp.w	r8, #4294967295
 800377a:	d0f2      	beq.n	8003762 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377c:	f7fe fc32 	bl	8001fe4 <HAL_GetTick>
 8003780:	1bc0      	subs	r0, r0, r7
 8003782:	4540      	cmp	r0, r8
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	d802      	bhi.n	800378e <UART_WaitOnFlagUntilTimeout+0x3e>
 8003788:	f1b8 0f00 	cmp.w	r8, #0
 800378c:	d11b      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003792:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	e840 3200 	strex	r2, r3, [r0]
 800379a:	2a00      	cmp	r2, #0
 800379c:	d1f7      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	f100 0308 	add.w	r3, r0, #8
 80037a2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	f100 0108 	add.w	r1, r0, #8
 80037ae:	e841 3200 	strex	r2, r3, [r1]
 80037b2:	2a00      	cmp	r2, #0
 80037b4:	d1f3      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80037b6:	2320      	movs	r3, #32
 80037b8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037ba:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80037bc:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80037c0:	2003      	movs	r0, #3
}
 80037c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037c6:	6803      	ldr	r3, [r0, #0]
 80037c8:	075a      	lsls	r2, r3, #29
 80037ca:	d5c9      	bpl.n	8003760 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037cc:	69c3      	ldr	r3, [r0, #28]
 80037ce:	051b      	lsls	r3, r3, #20
 80037d0:	d5c6      	bpl.n	8003760 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037d6:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	e840 3200 	strex	r2, r3, [r0]
 80037e4:	2a00      	cmp	r2, #0
 80037e6:	d1f7      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	f100 0308 	add.w	r3, r0, #8
 80037ec:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	f100 0108 	add.w	r1, r0, #8
 80037f8:	e841 3200 	strex	r2, r3, [r1]
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	d1f3      	bne.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8003800:	2320      	movs	r3, #32
 8003802:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003804:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003806:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800380a:	e7d7      	b.n	80037bc <UART_WaitOnFlagUntilTimeout+0x6c>

0800380c <HAL_UART_Transmit>:
{
 800380c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003810:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003812:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003814:	2b20      	cmp	r3, #32
{
 8003816:	4604      	mov	r4, r0
 8003818:	460e      	mov	r6, r1
 800381a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800381c:	d14e      	bne.n	80038bc <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800381e:	2900      	cmp	r1, #0
 8003820:	d04a      	beq.n	80038b8 <HAL_UART_Transmit+0xac>
 8003822:	2a00      	cmp	r2, #0
 8003824:	d048      	beq.n	80038b8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003826:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800382a:	2b01      	cmp	r3, #1
 800382c:	d046      	beq.n	80038bc <HAL_UART_Transmit+0xb0>
 800382e:	2301      	movs	r3, #1
 8003830:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003836:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800383e:	f7fe fbd1 	bl	8001fe4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003842:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8003844:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800384c:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800384e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003852:	d103      	bne.n	800385c <HAL_UART_Transmit+0x50>
 8003854:	6922      	ldr	r2, [r4, #16]
 8003856:	b90a      	cbnz	r2, 800385c <HAL_UART_Transmit+0x50>
 8003858:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800385a:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 800385c:	2200      	movs	r2, #0
 800385e:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8003862:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003866:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800386a:	b292      	uxth	r2, r2
 800386c:	b93a      	cbnz	r2, 800387e <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	2140      	movs	r1, #64	; 0x40
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff ff6d 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 8003876:	b950      	cbnz	r0, 800388e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003878:	2320      	movs	r3, #32
 800387a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800387c:	e008      	b.n	8003890 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	4620      	mov	r0, r4
 8003884:	9303      	str	r3, [sp, #12]
 8003886:	f7ff ff63 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 800388a:	9b03      	ldr	r3, [sp, #12]
 800388c:	b118      	cbz	r0, 8003896 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 800388e:	2003      	movs	r0, #3
}
 8003890:	b004      	add	sp, #16
 8003892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003896:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8003898:	b95e      	cbnz	r6, 80038b2 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800389a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800389e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80038a4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80038a8:	3a01      	subs	r2, #1
 80038aa:	b292      	uxth	r2, r2
 80038ac:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80038b0:	e7d7      	b.n	8003862 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b2:	f816 2b01 	ldrb.w	r2, [r6], #1
 80038b6:	e7f4      	b.n	80038a2 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80038b8:	2001      	movs	r0, #1
 80038ba:	e7e9      	b.n	8003890 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80038bc:	2002      	movs	r0, #2
 80038be:	e7e7      	b.n	8003890 <HAL_UART_Transmit+0x84>

080038c0 <UART_CheckIdleState>:
{
 80038c0:	b530      	push	{r4, r5, lr}
 80038c2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	2500      	movs	r5, #0
{
 80038c6:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80038cc:	f7fe fb8a 	bl	8001fe4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80038d6:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d8:	d415      	bmi.n	8003906 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	0752      	lsls	r2, r2, #29
 80038e0:	d509      	bpl.n	80038f6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80038e6:	9200      	str	r2, [sp, #0]
 80038e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ec:	2200      	movs	r2, #0
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff ff2e 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 80038f4:	b9a0      	cbnz	r0, 8003920 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80038f6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80038fa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80038fc:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8003904:	e00d      	b.n	8003922 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003906:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800390a:	9200      	str	r2, [sp, #0]
 800390c:	9003      	str	r0, [sp, #12]
 800390e:	462a      	mov	r2, r5
 8003910:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff ff1b 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 800391a:	9b03      	ldr	r3, [sp, #12]
 800391c:	2800      	cmp	r0, #0
 800391e:	d0dc      	beq.n	80038da <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003920:	2003      	movs	r0, #3
}
 8003922:	b005      	add	sp, #20
 8003924:	bd30      	pop	{r4, r5, pc}

08003926 <HAL_UART_Init>:
{
 8003926:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003928:	4604      	mov	r4, r0
 800392a:	b340      	cbz	r0, 800397e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800392c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800392e:	b91b      	cbnz	r3, 8003938 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003930:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003934:	f7fd fce0 	bl	80012f8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003938:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800393a:	2324      	movs	r3, #36	; 0x24
 800393c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff fdc2 	bl	80034d0 <UART_SetConfig>
 800394c:	2801      	cmp	r0, #1
 800394e:	d016      	beq.n	800397e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003952:	b113      	cbz	r3, 800395a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff fea7 	bl	80036a8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800396a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003972:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800397a:	f7ff bfa1 	b.w	80038c0 <UART_CheckIdleState>
}
 800397e:	2001      	movs	r0, #1
 8003980:	bd10      	pop	{r4, pc}
	...

08003984 <__errno>:
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <__errno+0x8>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	2000000c 	.word	0x2000000c

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	4d0d      	ldr	r5, [pc, #52]	; (80039c8 <__libc_init_array+0x38>)
 8003994:	4c0d      	ldr	r4, [pc, #52]	; (80039cc <__libc_init_array+0x3c>)
 8003996:	1b64      	subs	r4, r4, r5
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	2600      	movs	r6, #0
 800399c:	42a6      	cmp	r6, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	4d0b      	ldr	r5, [pc, #44]	; (80039d0 <__libc_init_array+0x40>)
 80039a2:	4c0c      	ldr	r4, [pc, #48]	; (80039d4 <__libc_init_array+0x44>)
 80039a4:	f002 ff2e 	bl	8006804 <_init>
 80039a8:	1b64      	subs	r4, r4, r5
 80039aa:	10a4      	asrs	r4, r4, #2
 80039ac:	2600      	movs	r6, #0
 80039ae:	42a6      	cmp	r6, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b8:	4798      	blx	r3
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c2:	4798      	blx	r3
 80039c4:	3601      	adds	r6, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	08007034 	.word	0x08007034
 80039cc:	08007034 	.word	0x08007034
 80039d0:	08007034 	.word	0x08007034
 80039d4:	08007038 	.word	0x08007038

080039d8 <memcpy>:
 80039d8:	440a      	add	r2, r1
 80039da:	4291      	cmp	r1, r2
 80039dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80039e0:	d100      	bne.n	80039e4 <memcpy+0xc>
 80039e2:	4770      	bx	lr
 80039e4:	b510      	push	{r4, lr}
 80039e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039ee:	4291      	cmp	r1, r2
 80039f0:	d1f9      	bne.n	80039e6 <memcpy+0xe>
 80039f2:	bd10      	pop	{r4, pc}

080039f4 <memset>:
 80039f4:	4402      	add	r2, r0
 80039f6:	4603      	mov	r3, r0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d100      	bne.n	80039fe <memset+0xa>
 80039fc:	4770      	bx	lr
 80039fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003a02:	e7f9      	b.n	80039f8 <memset+0x4>

08003a04 <__cvt>:
 8003a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a08:	ec55 4b10 	vmov	r4, r5, d0
 8003a0c:	2d00      	cmp	r5, #0
 8003a0e:	460e      	mov	r6, r1
 8003a10:	4619      	mov	r1, r3
 8003a12:	462b      	mov	r3, r5
 8003a14:	bfbb      	ittet	lt
 8003a16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003a1a:	461d      	movlt	r5, r3
 8003a1c:	2300      	movge	r3, #0
 8003a1e:	232d      	movlt	r3, #45	; 0x2d
 8003a20:	700b      	strb	r3, [r1, #0]
 8003a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003a28:	4691      	mov	r9, r2
 8003a2a:	f023 0820 	bic.w	r8, r3, #32
 8003a2e:	bfbc      	itt	lt
 8003a30:	4622      	movlt	r2, r4
 8003a32:	4614      	movlt	r4, r2
 8003a34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a38:	d005      	beq.n	8003a46 <__cvt+0x42>
 8003a3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a3e:	d100      	bne.n	8003a42 <__cvt+0x3e>
 8003a40:	3601      	adds	r6, #1
 8003a42:	2102      	movs	r1, #2
 8003a44:	e000      	b.n	8003a48 <__cvt+0x44>
 8003a46:	2103      	movs	r1, #3
 8003a48:	ab03      	add	r3, sp, #12
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	ab02      	add	r3, sp, #8
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	ec45 4b10 	vmov	d0, r4, r5
 8003a54:	4653      	mov	r3, sl
 8003a56:	4632      	mov	r2, r6
 8003a58:	f000 fd16 	bl	8004488 <_dtoa_r>
 8003a5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a60:	4607      	mov	r7, r0
 8003a62:	d102      	bne.n	8003a6a <__cvt+0x66>
 8003a64:	f019 0f01 	tst.w	r9, #1
 8003a68:	d022      	beq.n	8003ab0 <__cvt+0xac>
 8003a6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a6e:	eb07 0906 	add.w	r9, r7, r6
 8003a72:	d110      	bne.n	8003a96 <__cvt+0x92>
 8003a74:	783b      	ldrb	r3, [r7, #0]
 8003a76:	2b30      	cmp	r3, #48	; 0x30
 8003a78:	d10a      	bne.n	8003a90 <__cvt+0x8c>
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f7fd f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a86:	b918      	cbnz	r0, 8003a90 <__cvt+0x8c>
 8003a88:	f1c6 0601 	rsb	r6, r6, #1
 8003a8c:	f8ca 6000 	str.w	r6, [sl]
 8003a90:	f8da 3000 	ldr.w	r3, [sl]
 8003a94:	4499      	add	r9, r3
 8003a96:	2200      	movs	r2, #0
 8003a98:	2300      	movs	r3, #0
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f7fd f813 	bl	8000ac8 <__aeabi_dcmpeq>
 8003aa2:	b108      	cbz	r0, 8003aa8 <__cvt+0xa4>
 8003aa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003aa8:	2230      	movs	r2, #48	; 0x30
 8003aaa:	9b03      	ldr	r3, [sp, #12]
 8003aac:	454b      	cmp	r3, r9
 8003aae:	d307      	bcc.n	8003ac0 <__cvt+0xbc>
 8003ab0:	9b03      	ldr	r3, [sp, #12]
 8003ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ab4:	1bdb      	subs	r3, r3, r7
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	b004      	add	sp, #16
 8003abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	9103      	str	r1, [sp, #12]
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e7f0      	b.n	8003aaa <__cvt+0xa6>

08003ac8 <__exponent>:
 8003ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aca:	4603      	mov	r3, r0
 8003acc:	2900      	cmp	r1, #0
 8003ace:	bfb8      	it	lt
 8003ad0:	4249      	neglt	r1, r1
 8003ad2:	f803 2b02 	strb.w	r2, [r3], #2
 8003ad6:	bfb4      	ite	lt
 8003ad8:	222d      	movlt	r2, #45	; 0x2d
 8003ada:	222b      	movge	r2, #43	; 0x2b
 8003adc:	2909      	cmp	r1, #9
 8003ade:	7042      	strb	r2, [r0, #1]
 8003ae0:	dd2a      	ble.n	8003b38 <__exponent+0x70>
 8003ae2:	f10d 0407 	add.w	r4, sp, #7
 8003ae6:	46a4      	mov	ip, r4
 8003ae8:	270a      	movs	r7, #10
 8003aea:	46a6      	mov	lr, r4
 8003aec:	460a      	mov	r2, r1
 8003aee:	fb91 f6f7 	sdiv	r6, r1, r7
 8003af2:	fb07 1516 	mls	r5, r7, r6, r1
 8003af6:	3530      	adds	r5, #48	; 0x30
 8003af8:	2a63      	cmp	r2, #99	; 0x63
 8003afa:	f104 34ff 	add.w	r4, r4, #4294967295
 8003afe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b02:	4631      	mov	r1, r6
 8003b04:	dcf1      	bgt.n	8003aea <__exponent+0x22>
 8003b06:	3130      	adds	r1, #48	; 0x30
 8003b08:	f1ae 0502 	sub.w	r5, lr, #2
 8003b0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003b10:	1c44      	adds	r4, r0, #1
 8003b12:	4629      	mov	r1, r5
 8003b14:	4561      	cmp	r1, ip
 8003b16:	d30a      	bcc.n	8003b2e <__exponent+0x66>
 8003b18:	f10d 0209 	add.w	r2, sp, #9
 8003b1c:	eba2 020e 	sub.w	r2, r2, lr
 8003b20:	4565      	cmp	r5, ip
 8003b22:	bf88      	it	hi
 8003b24:	2200      	movhi	r2, #0
 8003b26:	4413      	add	r3, r2
 8003b28:	1a18      	subs	r0, r3, r0
 8003b2a:	b003      	add	sp, #12
 8003b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b36:	e7ed      	b.n	8003b14 <__exponent+0x4c>
 8003b38:	2330      	movs	r3, #48	; 0x30
 8003b3a:	3130      	adds	r1, #48	; 0x30
 8003b3c:	7083      	strb	r3, [r0, #2]
 8003b3e:	70c1      	strb	r1, [r0, #3]
 8003b40:	1d03      	adds	r3, r0, #4
 8003b42:	e7f1      	b.n	8003b28 <__exponent+0x60>

08003b44 <_printf_float>:
 8003b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b48:	ed2d 8b02 	vpush	{d8}
 8003b4c:	b08d      	sub	sp, #52	; 0x34
 8003b4e:	460c      	mov	r4, r1
 8003b50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003b54:	4616      	mov	r6, r2
 8003b56:	461f      	mov	r7, r3
 8003b58:	4605      	mov	r5, r0
 8003b5a:	f001 fa83 	bl	8005064 <_localeconv_r>
 8003b5e:	f8d0 a000 	ldr.w	sl, [r0]
 8003b62:	4650      	mov	r0, sl
 8003b64:	f7fc fb34 	bl	80001d0 <strlen>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	9305      	str	r3, [sp, #20]
 8003b70:	f8d8 3000 	ldr.w	r3, [r8]
 8003b74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003b78:	3307      	adds	r3, #7
 8003b7a:	f023 0307 	bic.w	r3, r3, #7
 8003b7e:	f103 0208 	add.w	r2, r3, #8
 8003b82:	f8c8 2000 	str.w	r2, [r8]
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003b8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003b92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003b96:	9307      	str	r3, [sp, #28]
 8003b98:	f8cd 8018 	str.w	r8, [sp, #24]
 8003b9c:	ee08 0a10 	vmov	s16, r0
 8003ba0:	4b9f      	ldr	r3, [pc, #636]	; (8003e20 <_printf_float+0x2dc>)
 8003ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8003baa:	f7fc ffbf 	bl	8000b2c <__aeabi_dcmpun>
 8003bae:	bb88      	cbnz	r0, 8003c14 <_printf_float+0xd0>
 8003bb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bb4:	4b9a      	ldr	r3, [pc, #616]	; (8003e20 <_printf_float+0x2dc>)
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bba:	f7fc ff99 	bl	8000af0 <__aeabi_dcmple>
 8003bbe:	bb48      	cbnz	r0, 8003c14 <_printf_float+0xd0>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	f7fc ff88 	bl	8000adc <__aeabi_dcmplt>
 8003bcc:	b110      	cbz	r0, 8003bd4 <_printf_float+0x90>
 8003bce:	232d      	movs	r3, #45	; 0x2d
 8003bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd4:	4b93      	ldr	r3, [pc, #588]	; (8003e24 <_printf_float+0x2e0>)
 8003bd6:	4894      	ldr	r0, [pc, #592]	; (8003e28 <_printf_float+0x2e4>)
 8003bd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003bdc:	bf94      	ite	ls
 8003bde:	4698      	movls	r8, r3
 8003be0:	4680      	movhi	r8, r0
 8003be2:	2303      	movs	r3, #3
 8003be4:	6123      	str	r3, [r4, #16]
 8003be6:	9b05      	ldr	r3, [sp, #20]
 8003be8:	f023 0204 	bic.w	r2, r3, #4
 8003bec:	6022      	str	r2, [r4, #0]
 8003bee:	f04f 0900 	mov.w	r9, #0
 8003bf2:	9700      	str	r7, [sp, #0]
 8003bf4:	4633      	mov	r3, r6
 8003bf6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f000 f9d8 	bl	8003fb0 <_printf_common>
 8003c00:	3001      	adds	r0, #1
 8003c02:	f040 8090 	bne.w	8003d26 <_printf_float+0x1e2>
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	b00d      	add	sp, #52	; 0x34
 8003c0c:	ecbd 8b02 	vpop	{d8}
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	4640      	mov	r0, r8
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	f7fc ff86 	bl	8000b2c <__aeabi_dcmpun>
 8003c20:	b140      	cbz	r0, 8003c34 <_printf_float+0xf0>
 8003c22:	464b      	mov	r3, r9
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bfbc      	itt	lt
 8003c28:	232d      	movlt	r3, #45	; 0x2d
 8003c2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c2e:	487f      	ldr	r0, [pc, #508]	; (8003e2c <_printf_float+0x2e8>)
 8003c30:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <_printf_float+0x2ec>)
 8003c32:	e7d1      	b.n	8003bd8 <_printf_float+0x94>
 8003c34:	6863      	ldr	r3, [r4, #4]
 8003c36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003c3a:	9206      	str	r2, [sp, #24]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	d13f      	bne.n	8003cc0 <_printf_float+0x17c>
 8003c40:	2306      	movs	r3, #6
 8003c42:	6063      	str	r3, [r4, #4]
 8003c44:	9b05      	ldr	r3, [sp, #20]
 8003c46:	6861      	ldr	r1, [r4, #4]
 8003c48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9303      	str	r3, [sp, #12]
 8003c50:	ab0a      	add	r3, sp, #40	; 0x28
 8003c52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003c56:	ab09      	add	r3, sp, #36	; 0x24
 8003c58:	ec49 8b10 	vmov	d0, r8, r9
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	6022      	str	r2, [r4, #0]
 8003c60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003c64:	4628      	mov	r0, r5
 8003c66:	f7ff fecd 	bl	8003a04 <__cvt>
 8003c6a:	9b06      	ldr	r3, [sp, #24]
 8003c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c6e:	2b47      	cmp	r3, #71	; 0x47
 8003c70:	4680      	mov	r8, r0
 8003c72:	d108      	bne.n	8003c86 <_printf_float+0x142>
 8003c74:	1cc8      	adds	r0, r1, #3
 8003c76:	db02      	blt.n	8003c7e <_printf_float+0x13a>
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	4299      	cmp	r1, r3
 8003c7c:	dd41      	ble.n	8003d02 <_printf_float+0x1be>
 8003c7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003c82:	fa5f fb8b 	uxtb.w	fp, fp
 8003c86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c8a:	d820      	bhi.n	8003cce <_printf_float+0x18a>
 8003c8c:	3901      	subs	r1, #1
 8003c8e:	465a      	mov	r2, fp
 8003c90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003c94:	9109      	str	r1, [sp, #36]	; 0x24
 8003c96:	f7ff ff17 	bl	8003ac8 <__exponent>
 8003c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c9c:	1813      	adds	r3, r2, r0
 8003c9e:	2a01      	cmp	r2, #1
 8003ca0:	4681      	mov	r9, r0
 8003ca2:	6123      	str	r3, [r4, #16]
 8003ca4:	dc02      	bgt.n	8003cac <_printf_float+0x168>
 8003ca6:	6822      	ldr	r2, [r4, #0]
 8003ca8:	07d2      	lsls	r2, r2, #31
 8003caa:	d501      	bpl.n	8003cb0 <_printf_float+0x16c>
 8003cac:	3301      	adds	r3, #1
 8003cae:	6123      	str	r3, [r4, #16]
 8003cb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d09c      	beq.n	8003bf2 <_printf_float+0xae>
 8003cb8:	232d      	movs	r3, #45	; 0x2d
 8003cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cbe:	e798      	b.n	8003bf2 <_printf_float+0xae>
 8003cc0:	9a06      	ldr	r2, [sp, #24]
 8003cc2:	2a47      	cmp	r2, #71	; 0x47
 8003cc4:	d1be      	bne.n	8003c44 <_printf_float+0x100>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1bc      	bne.n	8003c44 <_printf_float+0x100>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e7b9      	b.n	8003c42 <_printf_float+0xfe>
 8003cce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003cd2:	d118      	bne.n	8003d06 <_printf_float+0x1c2>
 8003cd4:	2900      	cmp	r1, #0
 8003cd6:	6863      	ldr	r3, [r4, #4]
 8003cd8:	dd0b      	ble.n	8003cf2 <_printf_float+0x1ae>
 8003cda:	6121      	str	r1, [r4, #16]
 8003cdc:	b913      	cbnz	r3, 8003ce4 <_printf_float+0x1a0>
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	07d0      	lsls	r0, r2, #31
 8003ce2:	d502      	bpl.n	8003cea <_printf_float+0x1a6>
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	440b      	add	r3, r1
 8003ce8:	6123      	str	r3, [r4, #16]
 8003cea:	65a1      	str	r1, [r4, #88]	; 0x58
 8003cec:	f04f 0900 	mov.w	r9, #0
 8003cf0:	e7de      	b.n	8003cb0 <_printf_float+0x16c>
 8003cf2:	b913      	cbnz	r3, 8003cfa <_printf_float+0x1b6>
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	07d2      	lsls	r2, r2, #31
 8003cf8:	d501      	bpl.n	8003cfe <_printf_float+0x1ba>
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	e7f4      	b.n	8003ce8 <_printf_float+0x1a4>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e7f2      	b.n	8003ce8 <_printf_float+0x1a4>
 8003d02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	db05      	blt.n	8003d18 <_printf_float+0x1d4>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	6121      	str	r1, [r4, #16]
 8003d10:	07d8      	lsls	r0, r3, #31
 8003d12:	d5ea      	bpl.n	8003cea <_printf_float+0x1a6>
 8003d14:	1c4b      	adds	r3, r1, #1
 8003d16:	e7e7      	b.n	8003ce8 <_printf_float+0x1a4>
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	bfd4      	ite	le
 8003d1c:	f1c1 0202 	rsble	r2, r1, #2
 8003d20:	2201      	movgt	r2, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	e7e0      	b.n	8003ce8 <_printf_float+0x1a4>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	055a      	lsls	r2, r3, #21
 8003d2a:	d407      	bmi.n	8003d3c <_printf_float+0x1f8>
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	4642      	mov	r2, r8
 8003d30:	4631      	mov	r1, r6
 8003d32:	4628      	mov	r0, r5
 8003d34:	47b8      	blx	r7
 8003d36:	3001      	adds	r0, #1
 8003d38:	d12c      	bne.n	8003d94 <_printf_float+0x250>
 8003d3a:	e764      	b.n	8003c06 <_printf_float+0xc2>
 8003d3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d40:	f240 80e0 	bls.w	8003f04 <_printf_float+0x3c0>
 8003d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f7fc febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d034      	beq.n	8003dbe <_printf_float+0x27a>
 8003d54:	4a37      	ldr	r2, [pc, #220]	; (8003e34 <_printf_float+0x2f0>)
 8003d56:	2301      	movs	r3, #1
 8003d58:	4631      	mov	r1, r6
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b8      	blx	r7
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f43f af51 	beq.w	8003c06 <_printf_float+0xc2>
 8003d64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	db02      	blt.n	8003d72 <_printf_float+0x22e>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	07d8      	lsls	r0, r3, #31
 8003d70:	d510      	bpl.n	8003d94 <_printf_float+0x250>
 8003d72:	ee18 3a10 	vmov	r3, s16
 8003d76:	4652      	mov	r2, sl
 8003d78:	4631      	mov	r1, r6
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	47b8      	blx	r7
 8003d7e:	3001      	adds	r0, #1
 8003d80:	f43f af41 	beq.w	8003c06 <_printf_float+0xc2>
 8003d84:	f04f 0800 	mov.w	r8, #0
 8003d88:	f104 091a 	add.w	r9, r4, #26
 8003d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	4543      	cmp	r3, r8
 8003d92:	dc09      	bgt.n	8003da8 <_printf_float+0x264>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	079b      	lsls	r3, r3, #30
 8003d98:	f100 8105 	bmi.w	8003fa6 <_printf_float+0x462>
 8003d9c:	68e0      	ldr	r0, [r4, #12]
 8003d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003da0:	4298      	cmp	r0, r3
 8003da2:	bfb8      	it	lt
 8003da4:	4618      	movlt	r0, r3
 8003da6:	e730      	b.n	8003c0a <_printf_float+0xc6>
 8003da8:	2301      	movs	r3, #1
 8003daa:	464a      	mov	r2, r9
 8003dac:	4631      	mov	r1, r6
 8003dae:	4628      	mov	r0, r5
 8003db0:	47b8      	blx	r7
 8003db2:	3001      	adds	r0, #1
 8003db4:	f43f af27 	beq.w	8003c06 <_printf_float+0xc2>
 8003db8:	f108 0801 	add.w	r8, r8, #1
 8003dbc:	e7e6      	b.n	8003d8c <_printf_float+0x248>
 8003dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	dc39      	bgt.n	8003e38 <_printf_float+0x2f4>
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <_printf_float+0x2f0>)
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4631      	mov	r1, r6
 8003dca:	4628      	mov	r0, r5
 8003dcc:	47b8      	blx	r7
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f43f af19 	beq.w	8003c06 <_printf_float+0xc2>
 8003dd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	d102      	bne.n	8003de2 <_printf_float+0x29e>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	07d9      	lsls	r1, r3, #31
 8003de0:	d5d8      	bpl.n	8003d94 <_printf_float+0x250>
 8003de2:	ee18 3a10 	vmov	r3, s16
 8003de6:	4652      	mov	r2, sl
 8003de8:	4631      	mov	r1, r6
 8003dea:	4628      	mov	r0, r5
 8003dec:	47b8      	blx	r7
 8003dee:	3001      	adds	r0, #1
 8003df0:	f43f af09 	beq.w	8003c06 <_printf_float+0xc2>
 8003df4:	f04f 0900 	mov.w	r9, #0
 8003df8:	f104 0a1a 	add.w	sl, r4, #26
 8003dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfe:	425b      	negs	r3, r3
 8003e00:	454b      	cmp	r3, r9
 8003e02:	dc01      	bgt.n	8003e08 <_printf_float+0x2c4>
 8003e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e06:	e792      	b.n	8003d2e <_printf_float+0x1ea>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4652      	mov	r2, sl
 8003e0c:	4631      	mov	r1, r6
 8003e0e:	4628      	mov	r0, r5
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	f43f aef7 	beq.w	8003c06 <_printf_float+0xc2>
 8003e18:	f109 0901 	add.w	r9, r9, #1
 8003e1c:	e7ee      	b.n	8003dfc <_printf_float+0x2b8>
 8003e1e:	bf00      	nop
 8003e20:	7fefffff 	.word	0x7fefffff
 8003e24:	08006c58 	.word	0x08006c58
 8003e28:	08006c5c 	.word	0x08006c5c
 8003e2c:	08006c64 	.word	0x08006c64
 8003e30:	08006c60 	.word	0x08006c60
 8003e34:	08006c68 	.word	0x08006c68
 8003e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	bfa8      	it	ge
 8003e40:	461a      	movge	r2, r3
 8003e42:	2a00      	cmp	r2, #0
 8003e44:	4691      	mov	r9, r2
 8003e46:	dc37      	bgt.n	8003eb8 <_printf_float+0x374>
 8003e48:	f04f 0b00 	mov.w	fp, #0
 8003e4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e50:	f104 021a 	add.w	r2, r4, #26
 8003e54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	eba3 0309 	sub.w	r3, r3, r9
 8003e5c:	455b      	cmp	r3, fp
 8003e5e:	dc33      	bgt.n	8003ec8 <_printf_float+0x384>
 8003e60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e64:	429a      	cmp	r2, r3
 8003e66:	db3b      	blt.n	8003ee0 <_printf_float+0x39c>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	07da      	lsls	r2, r3, #31
 8003e6c:	d438      	bmi.n	8003ee0 <_printf_float+0x39c>
 8003e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e70:	9a05      	ldr	r2, [sp, #20]
 8003e72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e74:	1a9a      	subs	r2, r3, r2
 8003e76:	eba3 0901 	sub.w	r9, r3, r1
 8003e7a:	4591      	cmp	r9, r2
 8003e7c:	bfa8      	it	ge
 8003e7e:	4691      	movge	r9, r2
 8003e80:	f1b9 0f00 	cmp.w	r9, #0
 8003e84:	dc35      	bgt.n	8003ef2 <_printf_float+0x3ae>
 8003e86:	f04f 0800 	mov.w	r8, #0
 8003e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e8e:	f104 0a1a 	add.w	sl, r4, #26
 8003e92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	eba3 0309 	sub.w	r3, r3, r9
 8003e9c:	4543      	cmp	r3, r8
 8003e9e:	f77f af79 	ble.w	8003d94 <_printf_float+0x250>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4652      	mov	r2, sl
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	47b8      	blx	r7
 8003eac:	3001      	adds	r0, #1
 8003eae:	f43f aeaa 	beq.w	8003c06 <_printf_float+0xc2>
 8003eb2:	f108 0801 	add.w	r8, r8, #1
 8003eb6:	e7ec      	b.n	8003e92 <_printf_float+0x34e>
 8003eb8:	4613      	mov	r3, r2
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	47b8      	blx	r7
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d1c0      	bne.n	8003e48 <_printf_float+0x304>
 8003ec6:	e69e      	b.n	8003c06 <_printf_float+0xc2>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4631      	mov	r1, r6
 8003ecc:	4628      	mov	r0, r5
 8003ece:	9205      	str	r2, [sp, #20]
 8003ed0:	47b8      	blx	r7
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	f43f ae97 	beq.w	8003c06 <_printf_float+0xc2>
 8003ed8:	9a05      	ldr	r2, [sp, #20]
 8003eda:	f10b 0b01 	add.w	fp, fp, #1
 8003ede:	e7b9      	b.n	8003e54 <_printf_float+0x310>
 8003ee0:	ee18 3a10 	vmov	r3, s16
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	4628      	mov	r0, r5
 8003eea:	47b8      	blx	r7
 8003eec:	3001      	adds	r0, #1
 8003eee:	d1be      	bne.n	8003e6e <_printf_float+0x32a>
 8003ef0:	e689      	b.n	8003c06 <_printf_float+0xc2>
 8003ef2:	9a05      	ldr	r2, [sp, #20]
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	4442      	add	r2, r8
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4628      	mov	r0, r5
 8003efc:	47b8      	blx	r7
 8003efe:	3001      	adds	r0, #1
 8003f00:	d1c1      	bne.n	8003e86 <_printf_float+0x342>
 8003f02:	e680      	b.n	8003c06 <_printf_float+0xc2>
 8003f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f06:	2a01      	cmp	r2, #1
 8003f08:	dc01      	bgt.n	8003f0e <_printf_float+0x3ca>
 8003f0a:	07db      	lsls	r3, r3, #31
 8003f0c:	d538      	bpl.n	8003f80 <_printf_float+0x43c>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4642      	mov	r2, r8
 8003f12:	4631      	mov	r1, r6
 8003f14:	4628      	mov	r0, r5
 8003f16:	47b8      	blx	r7
 8003f18:	3001      	adds	r0, #1
 8003f1a:	f43f ae74 	beq.w	8003c06 <_printf_float+0xc2>
 8003f1e:	ee18 3a10 	vmov	r3, s16
 8003f22:	4652      	mov	r2, sl
 8003f24:	4631      	mov	r1, r6
 8003f26:	4628      	mov	r0, r5
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f43f ae6b 	beq.w	8003c06 <_printf_float+0xc2>
 8003f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f34:	2200      	movs	r2, #0
 8003f36:	2300      	movs	r3, #0
 8003f38:	f7fc fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f3c:	b9d8      	cbnz	r0, 8003f76 <_printf_float+0x432>
 8003f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f40:	f108 0201 	add.w	r2, r8, #1
 8003f44:	3b01      	subs	r3, #1
 8003f46:	4631      	mov	r1, r6
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b8      	blx	r7
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d10e      	bne.n	8003f6e <_printf_float+0x42a>
 8003f50:	e659      	b.n	8003c06 <_printf_float+0xc2>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4652      	mov	r2, sl
 8003f56:	4631      	mov	r1, r6
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b8      	blx	r7
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	f43f ae52 	beq.w	8003c06 <_printf_float+0xc2>
 8003f62:	f108 0801 	add.w	r8, r8, #1
 8003f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	4543      	cmp	r3, r8
 8003f6c:	dcf1      	bgt.n	8003f52 <_printf_float+0x40e>
 8003f6e:	464b      	mov	r3, r9
 8003f70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f74:	e6dc      	b.n	8003d30 <_printf_float+0x1ec>
 8003f76:	f04f 0800 	mov.w	r8, #0
 8003f7a:	f104 0a1a 	add.w	sl, r4, #26
 8003f7e:	e7f2      	b.n	8003f66 <_printf_float+0x422>
 8003f80:	2301      	movs	r3, #1
 8003f82:	4642      	mov	r2, r8
 8003f84:	e7df      	b.n	8003f46 <_printf_float+0x402>
 8003f86:	2301      	movs	r3, #1
 8003f88:	464a      	mov	r2, r9
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	47b8      	blx	r7
 8003f90:	3001      	adds	r0, #1
 8003f92:	f43f ae38 	beq.w	8003c06 <_printf_float+0xc2>
 8003f96:	f108 0801 	add.w	r8, r8, #1
 8003f9a:	68e3      	ldr	r3, [r4, #12]
 8003f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f9e:	1a5b      	subs	r3, r3, r1
 8003fa0:	4543      	cmp	r3, r8
 8003fa2:	dcf0      	bgt.n	8003f86 <_printf_float+0x442>
 8003fa4:	e6fa      	b.n	8003d9c <_printf_float+0x258>
 8003fa6:	f04f 0800 	mov.w	r8, #0
 8003faa:	f104 0919 	add.w	r9, r4, #25
 8003fae:	e7f4      	b.n	8003f9a <_printf_float+0x456>

08003fb0 <_printf_common>:
 8003fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	4699      	mov	r9, r3
 8003fb8:	688a      	ldr	r2, [r1, #8]
 8003fba:	690b      	ldr	r3, [r1, #16]
 8003fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	bfb8      	it	lt
 8003fc4:	4613      	movlt	r3, r2
 8003fc6:	6033      	str	r3, [r6, #0]
 8003fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fcc:	4607      	mov	r7, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	b10a      	cbz	r2, 8003fd6 <_printf_common+0x26>
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	0699      	lsls	r1, r3, #26
 8003fda:	bf42      	ittt	mi
 8003fdc:	6833      	ldrmi	r3, [r6, #0]
 8003fde:	3302      	addmi	r3, #2
 8003fe0:	6033      	strmi	r3, [r6, #0]
 8003fe2:	6825      	ldr	r5, [r4, #0]
 8003fe4:	f015 0506 	ands.w	r5, r5, #6
 8003fe8:	d106      	bne.n	8003ff8 <_printf_common+0x48>
 8003fea:	f104 0a19 	add.w	sl, r4, #25
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	6832      	ldr	r2, [r6, #0]
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	42ab      	cmp	r3, r5
 8003ff6:	dc26      	bgt.n	8004046 <_printf_common+0x96>
 8003ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ffc:	1e13      	subs	r3, r2, #0
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	bf18      	it	ne
 8004002:	2301      	movne	r3, #1
 8004004:	0692      	lsls	r2, r2, #26
 8004006:	d42b      	bmi.n	8004060 <_printf_common+0xb0>
 8004008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800400c:	4649      	mov	r1, r9
 800400e:	4638      	mov	r0, r7
 8004010:	47c0      	blx	r8
 8004012:	3001      	adds	r0, #1
 8004014:	d01e      	beq.n	8004054 <_printf_common+0xa4>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	68e5      	ldr	r5, [r4, #12]
 800401a:	6832      	ldr	r2, [r6, #0]
 800401c:	f003 0306 	and.w	r3, r3, #6
 8004020:	2b04      	cmp	r3, #4
 8004022:	bf08      	it	eq
 8004024:	1aad      	subeq	r5, r5, r2
 8004026:	68a3      	ldr	r3, [r4, #8]
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	bf0c      	ite	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	2500      	movne	r5, #0
 8004032:	4293      	cmp	r3, r2
 8004034:	bfc4      	itt	gt
 8004036:	1a9b      	subgt	r3, r3, r2
 8004038:	18ed      	addgt	r5, r5, r3
 800403a:	2600      	movs	r6, #0
 800403c:	341a      	adds	r4, #26
 800403e:	42b5      	cmp	r5, r6
 8004040:	d11a      	bne.n	8004078 <_printf_common+0xc8>
 8004042:	2000      	movs	r0, #0
 8004044:	e008      	b.n	8004058 <_printf_common+0xa8>
 8004046:	2301      	movs	r3, #1
 8004048:	4652      	mov	r2, sl
 800404a:	4649      	mov	r1, r9
 800404c:	4638      	mov	r0, r7
 800404e:	47c0      	blx	r8
 8004050:	3001      	adds	r0, #1
 8004052:	d103      	bne.n	800405c <_printf_common+0xac>
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405c:	3501      	adds	r5, #1
 800405e:	e7c6      	b.n	8003fee <_printf_common+0x3e>
 8004060:	18e1      	adds	r1, r4, r3
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	2030      	movs	r0, #48	; 0x30
 8004066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800406a:	4422      	add	r2, r4
 800406c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004074:	3302      	adds	r3, #2
 8004076:	e7c7      	b.n	8004008 <_printf_common+0x58>
 8004078:	2301      	movs	r3, #1
 800407a:	4622      	mov	r2, r4
 800407c:	4649      	mov	r1, r9
 800407e:	4638      	mov	r0, r7
 8004080:	47c0      	blx	r8
 8004082:	3001      	adds	r0, #1
 8004084:	d0e6      	beq.n	8004054 <_printf_common+0xa4>
 8004086:	3601      	adds	r6, #1
 8004088:	e7d9      	b.n	800403e <_printf_common+0x8e>
	...

0800408c <_printf_i>:
 800408c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	7e0f      	ldrb	r7, [r1, #24]
 8004092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004094:	2f78      	cmp	r7, #120	; 0x78
 8004096:	4691      	mov	r9, r2
 8004098:	4680      	mov	r8, r0
 800409a:	460c      	mov	r4, r1
 800409c:	469a      	mov	sl, r3
 800409e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040a2:	d807      	bhi.n	80040b4 <_printf_i+0x28>
 80040a4:	2f62      	cmp	r7, #98	; 0x62
 80040a6:	d80a      	bhi.n	80040be <_printf_i+0x32>
 80040a8:	2f00      	cmp	r7, #0
 80040aa:	f000 80d8 	beq.w	800425e <_printf_i+0x1d2>
 80040ae:	2f58      	cmp	r7, #88	; 0x58
 80040b0:	f000 80a3 	beq.w	80041fa <_printf_i+0x16e>
 80040b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040bc:	e03a      	b.n	8004134 <_printf_i+0xa8>
 80040be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040c2:	2b15      	cmp	r3, #21
 80040c4:	d8f6      	bhi.n	80040b4 <_printf_i+0x28>
 80040c6:	a101      	add	r1, pc, #4	; (adr r1, 80040cc <_printf_i+0x40>)
 80040c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040cc:	08004125 	.word	0x08004125
 80040d0:	08004139 	.word	0x08004139
 80040d4:	080040b5 	.word	0x080040b5
 80040d8:	080040b5 	.word	0x080040b5
 80040dc:	080040b5 	.word	0x080040b5
 80040e0:	080040b5 	.word	0x080040b5
 80040e4:	08004139 	.word	0x08004139
 80040e8:	080040b5 	.word	0x080040b5
 80040ec:	080040b5 	.word	0x080040b5
 80040f0:	080040b5 	.word	0x080040b5
 80040f4:	080040b5 	.word	0x080040b5
 80040f8:	08004245 	.word	0x08004245
 80040fc:	08004169 	.word	0x08004169
 8004100:	08004227 	.word	0x08004227
 8004104:	080040b5 	.word	0x080040b5
 8004108:	080040b5 	.word	0x080040b5
 800410c:	08004267 	.word	0x08004267
 8004110:	080040b5 	.word	0x080040b5
 8004114:	08004169 	.word	0x08004169
 8004118:	080040b5 	.word	0x080040b5
 800411c:	080040b5 	.word	0x080040b5
 8004120:	0800422f 	.word	0x0800422f
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	602a      	str	r2, [r5, #0]
 800412c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004134:	2301      	movs	r3, #1
 8004136:	e0a3      	b.n	8004280 <_printf_i+0x1f4>
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	6829      	ldr	r1, [r5, #0]
 800413c:	0606      	lsls	r6, r0, #24
 800413e:	f101 0304 	add.w	r3, r1, #4
 8004142:	d50a      	bpl.n	800415a <_printf_i+0xce>
 8004144:	680e      	ldr	r6, [r1, #0]
 8004146:	602b      	str	r3, [r5, #0]
 8004148:	2e00      	cmp	r6, #0
 800414a:	da03      	bge.n	8004154 <_printf_i+0xc8>
 800414c:	232d      	movs	r3, #45	; 0x2d
 800414e:	4276      	negs	r6, r6
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004154:	485e      	ldr	r0, [pc, #376]	; (80042d0 <_printf_i+0x244>)
 8004156:	230a      	movs	r3, #10
 8004158:	e019      	b.n	800418e <_printf_i+0x102>
 800415a:	680e      	ldr	r6, [r1, #0]
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004162:	bf18      	it	ne
 8004164:	b236      	sxthne	r6, r6
 8004166:	e7ef      	b.n	8004148 <_printf_i+0xbc>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	6820      	ldr	r0, [r4, #0]
 800416c:	1d19      	adds	r1, r3, #4
 800416e:	6029      	str	r1, [r5, #0]
 8004170:	0601      	lsls	r1, r0, #24
 8004172:	d501      	bpl.n	8004178 <_printf_i+0xec>
 8004174:	681e      	ldr	r6, [r3, #0]
 8004176:	e002      	b.n	800417e <_printf_i+0xf2>
 8004178:	0646      	lsls	r6, r0, #25
 800417a:	d5fb      	bpl.n	8004174 <_printf_i+0xe8>
 800417c:	881e      	ldrh	r6, [r3, #0]
 800417e:	4854      	ldr	r0, [pc, #336]	; (80042d0 <_printf_i+0x244>)
 8004180:	2f6f      	cmp	r7, #111	; 0x6f
 8004182:	bf0c      	ite	eq
 8004184:	2308      	moveq	r3, #8
 8004186:	230a      	movne	r3, #10
 8004188:	2100      	movs	r1, #0
 800418a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800418e:	6865      	ldr	r5, [r4, #4]
 8004190:	60a5      	str	r5, [r4, #8]
 8004192:	2d00      	cmp	r5, #0
 8004194:	bfa2      	ittt	ge
 8004196:	6821      	ldrge	r1, [r4, #0]
 8004198:	f021 0104 	bicge.w	r1, r1, #4
 800419c:	6021      	strge	r1, [r4, #0]
 800419e:	b90e      	cbnz	r6, 80041a4 <_printf_i+0x118>
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	d04d      	beq.n	8004240 <_printf_i+0x1b4>
 80041a4:	4615      	mov	r5, r2
 80041a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80041aa:	fb03 6711 	mls	r7, r3, r1, r6
 80041ae:	5dc7      	ldrb	r7, [r0, r7]
 80041b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041b4:	4637      	mov	r7, r6
 80041b6:	42bb      	cmp	r3, r7
 80041b8:	460e      	mov	r6, r1
 80041ba:	d9f4      	bls.n	80041a6 <_printf_i+0x11a>
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d10b      	bne.n	80041d8 <_printf_i+0x14c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07de      	lsls	r6, r3, #31
 80041c4:	d508      	bpl.n	80041d8 <_printf_i+0x14c>
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	6861      	ldr	r1, [r4, #4]
 80041ca:	4299      	cmp	r1, r3
 80041cc:	bfde      	ittt	le
 80041ce:	2330      	movle	r3, #48	; 0x30
 80041d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041d8:	1b52      	subs	r2, r2, r5
 80041da:	6122      	str	r2, [r4, #16]
 80041dc:	f8cd a000 	str.w	sl, [sp]
 80041e0:	464b      	mov	r3, r9
 80041e2:	aa03      	add	r2, sp, #12
 80041e4:	4621      	mov	r1, r4
 80041e6:	4640      	mov	r0, r8
 80041e8:	f7ff fee2 	bl	8003fb0 <_printf_common>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d14c      	bne.n	800428a <_printf_i+0x1fe>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	b004      	add	sp, #16
 80041f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fa:	4835      	ldr	r0, [pc, #212]	; (80042d0 <_printf_i+0x244>)
 80041fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004200:	6829      	ldr	r1, [r5, #0]
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f851 6b04 	ldr.w	r6, [r1], #4
 8004208:	6029      	str	r1, [r5, #0]
 800420a:	061d      	lsls	r5, r3, #24
 800420c:	d514      	bpl.n	8004238 <_printf_i+0x1ac>
 800420e:	07df      	lsls	r7, r3, #31
 8004210:	bf44      	itt	mi
 8004212:	f043 0320 	orrmi.w	r3, r3, #32
 8004216:	6023      	strmi	r3, [r4, #0]
 8004218:	b91e      	cbnz	r6, 8004222 <_printf_i+0x196>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f023 0320 	bic.w	r3, r3, #32
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	2310      	movs	r3, #16
 8004224:	e7b0      	b.n	8004188 <_printf_i+0xfc>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f043 0320 	orr.w	r3, r3, #32
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	2378      	movs	r3, #120	; 0x78
 8004230:	4828      	ldr	r0, [pc, #160]	; (80042d4 <_printf_i+0x248>)
 8004232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004236:	e7e3      	b.n	8004200 <_printf_i+0x174>
 8004238:	0659      	lsls	r1, r3, #25
 800423a:	bf48      	it	mi
 800423c:	b2b6      	uxthmi	r6, r6
 800423e:	e7e6      	b.n	800420e <_printf_i+0x182>
 8004240:	4615      	mov	r5, r2
 8004242:	e7bb      	b.n	80041bc <_printf_i+0x130>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	6826      	ldr	r6, [r4, #0]
 8004248:	6961      	ldr	r1, [r4, #20]
 800424a:	1d18      	adds	r0, r3, #4
 800424c:	6028      	str	r0, [r5, #0]
 800424e:	0635      	lsls	r5, r6, #24
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	d501      	bpl.n	8004258 <_printf_i+0x1cc>
 8004254:	6019      	str	r1, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0x1d2>
 8004258:	0670      	lsls	r0, r6, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0x1c8>
 800425c:	8019      	strh	r1, [r3, #0]
 800425e:	2300      	movs	r3, #0
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	4615      	mov	r5, r2
 8004264:	e7ba      	b.n	80041dc <_printf_i+0x150>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	1d1a      	adds	r2, r3, #4
 800426a:	602a      	str	r2, [r5, #0]
 800426c:	681d      	ldr	r5, [r3, #0]
 800426e:	6862      	ldr	r2, [r4, #4]
 8004270:	2100      	movs	r1, #0
 8004272:	4628      	mov	r0, r5
 8004274:	f7fb ffb4 	bl	80001e0 <memchr>
 8004278:	b108      	cbz	r0, 800427e <_printf_i+0x1f2>
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	6060      	str	r0, [r4, #4]
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	2300      	movs	r3, #0
 8004284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004288:	e7a8      	b.n	80041dc <_printf_i+0x150>
 800428a:	6923      	ldr	r3, [r4, #16]
 800428c:	462a      	mov	r2, r5
 800428e:	4649      	mov	r1, r9
 8004290:	4640      	mov	r0, r8
 8004292:	47d0      	blx	sl
 8004294:	3001      	adds	r0, #1
 8004296:	d0ab      	beq.n	80041f0 <_printf_i+0x164>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	079b      	lsls	r3, r3, #30
 800429c:	d413      	bmi.n	80042c6 <_printf_i+0x23a>
 800429e:	68e0      	ldr	r0, [r4, #12]
 80042a0:	9b03      	ldr	r3, [sp, #12]
 80042a2:	4298      	cmp	r0, r3
 80042a4:	bfb8      	it	lt
 80042a6:	4618      	movlt	r0, r3
 80042a8:	e7a4      	b.n	80041f4 <_printf_i+0x168>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4632      	mov	r2, r6
 80042ae:	4649      	mov	r1, r9
 80042b0:	4640      	mov	r0, r8
 80042b2:	47d0      	blx	sl
 80042b4:	3001      	adds	r0, #1
 80042b6:	d09b      	beq.n	80041f0 <_printf_i+0x164>
 80042b8:	3501      	adds	r5, #1
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	9903      	ldr	r1, [sp, #12]
 80042be:	1a5b      	subs	r3, r3, r1
 80042c0:	42ab      	cmp	r3, r5
 80042c2:	dcf2      	bgt.n	80042aa <_printf_i+0x21e>
 80042c4:	e7eb      	b.n	800429e <_printf_i+0x212>
 80042c6:	2500      	movs	r5, #0
 80042c8:	f104 0619 	add.w	r6, r4, #25
 80042cc:	e7f5      	b.n	80042ba <_printf_i+0x22e>
 80042ce:	bf00      	nop
 80042d0:	08006c6a 	.word	0x08006c6a
 80042d4:	08006c7b 	.word	0x08006c7b

080042d8 <strncpy>:
 80042d8:	b510      	push	{r4, lr}
 80042da:	3901      	subs	r1, #1
 80042dc:	4603      	mov	r3, r0
 80042de:	b132      	cbz	r2, 80042ee <strncpy+0x16>
 80042e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80042e4:	f803 4b01 	strb.w	r4, [r3], #1
 80042e8:	3a01      	subs	r2, #1
 80042ea:	2c00      	cmp	r4, #0
 80042ec:	d1f7      	bne.n	80042de <strncpy+0x6>
 80042ee:	441a      	add	r2, r3
 80042f0:	2100      	movs	r1, #0
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d100      	bne.n	80042f8 <strncpy+0x20>
 80042f6:	bd10      	pop	{r4, pc}
 80042f8:	f803 1b01 	strb.w	r1, [r3], #1
 80042fc:	e7f9      	b.n	80042f2 <strncpy+0x1a>

080042fe <_vsniprintf_r>:
 80042fe:	b530      	push	{r4, r5, lr}
 8004300:	4614      	mov	r4, r2
 8004302:	2c00      	cmp	r4, #0
 8004304:	b09b      	sub	sp, #108	; 0x6c
 8004306:	4605      	mov	r5, r0
 8004308:	461a      	mov	r2, r3
 800430a:	da05      	bge.n	8004318 <_vsniprintf_r+0x1a>
 800430c:	238b      	movs	r3, #139	; 0x8b
 800430e:	6003      	str	r3, [r0, #0]
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	b01b      	add	sp, #108	; 0x6c
 8004316:	bd30      	pop	{r4, r5, pc}
 8004318:	f44f 7302 	mov.w	r3, #520	; 0x208
 800431c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004320:	bf14      	ite	ne
 8004322:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004326:	4623      	moveq	r3, r4
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	9305      	str	r3, [sp, #20]
 800432c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004330:	9100      	str	r1, [sp, #0]
 8004332:	9104      	str	r1, [sp, #16]
 8004334:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004338:	4669      	mov	r1, sp
 800433a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800433c:	f001 fb74 	bl	8005a28 <_svfiprintf_r>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	bfbc      	itt	lt
 8004344:	238b      	movlt	r3, #139	; 0x8b
 8004346:	602b      	strlt	r3, [r5, #0]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d0e3      	beq.n	8004314 <_vsniprintf_r+0x16>
 800434c:	9b00      	ldr	r3, [sp, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e7df      	b.n	8004314 <_vsniprintf_r+0x16>

08004354 <vsniprintf>:
 8004354:	b507      	push	{r0, r1, r2, lr}
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	460a      	mov	r2, r1
 800435c:	4601      	mov	r1, r0
 800435e:	4803      	ldr	r0, [pc, #12]	; (800436c <vsniprintf+0x18>)
 8004360:	6800      	ldr	r0, [r0, #0]
 8004362:	f7ff ffcc 	bl	80042fe <_vsniprintf_r>
 8004366:	b003      	add	sp, #12
 8004368:	f85d fb04 	ldr.w	pc, [sp], #4
 800436c:	2000000c 	.word	0x2000000c

08004370 <quorem>:
 8004370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	6903      	ldr	r3, [r0, #16]
 8004376:	690c      	ldr	r4, [r1, #16]
 8004378:	42a3      	cmp	r3, r4
 800437a:	4607      	mov	r7, r0
 800437c:	f2c0 8081 	blt.w	8004482 <quorem+0x112>
 8004380:	3c01      	subs	r4, #1
 8004382:	f101 0814 	add.w	r8, r1, #20
 8004386:	f100 0514 	add.w	r5, r0, #20
 800438a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004394:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004398:	3301      	adds	r3, #1
 800439a:	429a      	cmp	r2, r3
 800439c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80043a8:	d331      	bcc.n	800440e <quorem+0x9e>
 80043aa:	f04f 0e00 	mov.w	lr, #0
 80043ae:	4640      	mov	r0, r8
 80043b0:	46ac      	mov	ip, r5
 80043b2:	46f2      	mov	sl, lr
 80043b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80043b8:	b293      	uxth	r3, r2
 80043ba:	fb06 e303 	mla	r3, r6, r3, lr
 80043be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	ebaa 0303 	sub.w	r3, sl, r3
 80043c8:	f8dc a000 	ldr.w	sl, [ip]
 80043cc:	0c12      	lsrs	r2, r2, #16
 80043ce:	fa13 f38a 	uxtah	r3, r3, sl
 80043d2:	fb06 e202 	mla	r2, r6, r2, lr
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	9b00      	ldr	r3, [sp, #0]
 80043da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80043de:	b292      	uxth	r2, r2
 80043e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80043e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80043ec:	4581      	cmp	r9, r0
 80043ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043f2:	f84c 3b04 	str.w	r3, [ip], #4
 80043f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80043fa:	d2db      	bcs.n	80043b4 <quorem+0x44>
 80043fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004400:	b92b      	cbnz	r3, 800440e <quorem+0x9e>
 8004402:	9b01      	ldr	r3, [sp, #4]
 8004404:	3b04      	subs	r3, #4
 8004406:	429d      	cmp	r5, r3
 8004408:	461a      	mov	r2, r3
 800440a:	d32e      	bcc.n	800446a <quorem+0xfa>
 800440c:	613c      	str	r4, [r7, #16]
 800440e:	4638      	mov	r0, r7
 8004410:	f001 f8b6 	bl	8005580 <__mcmp>
 8004414:	2800      	cmp	r0, #0
 8004416:	db24      	blt.n	8004462 <quorem+0xf2>
 8004418:	3601      	adds	r6, #1
 800441a:	4628      	mov	r0, r5
 800441c:	f04f 0c00 	mov.w	ip, #0
 8004420:	f858 2b04 	ldr.w	r2, [r8], #4
 8004424:	f8d0 e000 	ldr.w	lr, [r0]
 8004428:	b293      	uxth	r3, r2
 800442a:	ebac 0303 	sub.w	r3, ip, r3
 800442e:	0c12      	lsrs	r2, r2, #16
 8004430:	fa13 f38e 	uxtah	r3, r3, lr
 8004434:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004438:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800443c:	b29b      	uxth	r3, r3
 800443e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004442:	45c1      	cmp	r9, r8
 8004444:	f840 3b04 	str.w	r3, [r0], #4
 8004448:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800444c:	d2e8      	bcs.n	8004420 <quorem+0xb0>
 800444e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004456:	b922      	cbnz	r2, 8004462 <quorem+0xf2>
 8004458:	3b04      	subs	r3, #4
 800445a:	429d      	cmp	r5, r3
 800445c:	461a      	mov	r2, r3
 800445e:	d30a      	bcc.n	8004476 <quorem+0x106>
 8004460:	613c      	str	r4, [r7, #16]
 8004462:	4630      	mov	r0, r6
 8004464:	b003      	add	sp, #12
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	3b04      	subs	r3, #4
 800446e:	2a00      	cmp	r2, #0
 8004470:	d1cc      	bne.n	800440c <quorem+0x9c>
 8004472:	3c01      	subs	r4, #1
 8004474:	e7c7      	b.n	8004406 <quorem+0x96>
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	3b04      	subs	r3, #4
 800447a:	2a00      	cmp	r2, #0
 800447c:	d1f0      	bne.n	8004460 <quorem+0xf0>
 800447e:	3c01      	subs	r4, #1
 8004480:	e7eb      	b.n	800445a <quorem+0xea>
 8004482:	2000      	movs	r0, #0
 8004484:	e7ee      	b.n	8004464 <quorem+0xf4>
	...

08004488 <_dtoa_r>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	ed2d 8b04 	vpush	{d8-d9}
 8004490:	ec57 6b10 	vmov	r6, r7, d0
 8004494:	b093      	sub	sp, #76	; 0x4c
 8004496:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004498:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800449c:	9106      	str	r1, [sp, #24]
 800449e:	ee10 aa10 	vmov	sl, s0
 80044a2:	4604      	mov	r4, r0
 80044a4:	9209      	str	r2, [sp, #36]	; 0x24
 80044a6:	930c      	str	r3, [sp, #48]	; 0x30
 80044a8:	46bb      	mov	fp, r7
 80044aa:	b975      	cbnz	r5, 80044ca <_dtoa_r+0x42>
 80044ac:	2010      	movs	r0, #16
 80044ae:	f000 fddd 	bl	800506c <malloc>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6260      	str	r0, [r4, #36]	; 0x24
 80044b6:	b920      	cbnz	r0, 80044c2 <_dtoa_r+0x3a>
 80044b8:	4ba7      	ldr	r3, [pc, #668]	; (8004758 <_dtoa_r+0x2d0>)
 80044ba:	21ea      	movs	r1, #234	; 0xea
 80044bc:	48a7      	ldr	r0, [pc, #668]	; (800475c <_dtoa_r+0x2d4>)
 80044be:	f001 fbc3 	bl	8005c48 <__assert_func>
 80044c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80044c6:	6005      	str	r5, [r0, #0]
 80044c8:	60c5      	str	r5, [r0, #12]
 80044ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	b151      	cbz	r1, 80044e6 <_dtoa_r+0x5e>
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	604a      	str	r2, [r1, #4]
 80044d4:	2301      	movs	r3, #1
 80044d6:	4093      	lsls	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
 80044da:	4620      	mov	r0, r4
 80044dc:	f000 fe0e 	bl	80050fc <_Bfree>
 80044e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	1e3b      	subs	r3, r7, #0
 80044e8:	bfaa      	itet	ge
 80044ea:	2300      	movge	r3, #0
 80044ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80044f0:	f8c8 3000 	strge.w	r3, [r8]
 80044f4:	4b9a      	ldr	r3, [pc, #616]	; (8004760 <_dtoa_r+0x2d8>)
 80044f6:	bfbc      	itt	lt
 80044f8:	2201      	movlt	r2, #1
 80044fa:	f8c8 2000 	strlt.w	r2, [r8]
 80044fe:	ea33 030b 	bics.w	r3, r3, fp
 8004502:	d11b      	bne.n	800453c <_dtoa_r+0xb4>
 8004504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004506:	f242 730f 	movw	r3, #9999	; 0x270f
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004510:	4333      	orrs	r3, r6
 8004512:	f000 8592 	beq.w	800503a <_dtoa_r+0xbb2>
 8004516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004518:	b963      	cbnz	r3, 8004534 <_dtoa_r+0xac>
 800451a:	4b92      	ldr	r3, [pc, #584]	; (8004764 <_dtoa_r+0x2dc>)
 800451c:	e022      	b.n	8004564 <_dtoa_r+0xdc>
 800451e:	4b92      	ldr	r3, [pc, #584]	; (8004768 <_dtoa_r+0x2e0>)
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	3308      	adds	r3, #8
 8004524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	9801      	ldr	r0, [sp, #4]
 800452a:	b013      	add	sp, #76	; 0x4c
 800452c:	ecbd 8b04 	vpop	{d8-d9}
 8004530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004534:	4b8b      	ldr	r3, [pc, #556]	; (8004764 <_dtoa_r+0x2dc>)
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	3303      	adds	r3, #3
 800453a:	e7f3      	b.n	8004524 <_dtoa_r+0x9c>
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	4650      	mov	r0, sl
 8004542:	4659      	mov	r1, fp
 8004544:	f7fc fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004548:	ec4b ab19 	vmov	d9, sl, fp
 800454c:	4680      	mov	r8, r0
 800454e:	b158      	cbz	r0, 8004568 <_dtoa_r+0xe0>
 8004550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004552:	2301      	movs	r3, #1
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 856b 	beq.w	8005034 <_dtoa_r+0xbac>
 800455e:	4883      	ldr	r0, [pc, #524]	; (800476c <_dtoa_r+0x2e4>)
 8004560:	6018      	str	r0, [r3, #0]
 8004562:	1e43      	subs	r3, r0, #1
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	e7df      	b.n	8004528 <_dtoa_r+0xa0>
 8004568:	ec4b ab10 	vmov	d0, sl, fp
 800456c:	aa10      	add	r2, sp, #64	; 0x40
 800456e:	a911      	add	r1, sp, #68	; 0x44
 8004570:	4620      	mov	r0, r4
 8004572:	f001 f8ab 	bl	80056cc <__d2b>
 8004576:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800457a:	ee08 0a10 	vmov	s16, r0
 800457e:	2d00      	cmp	r5, #0
 8004580:	f000 8084 	beq.w	800468c <_dtoa_r+0x204>
 8004584:	ee19 3a90 	vmov	r3, s19
 8004588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800458c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004590:	4656      	mov	r6, sl
 8004592:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800459a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800459e:	4b74      	ldr	r3, [pc, #464]	; (8004770 <_dtoa_r+0x2e8>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	4630      	mov	r0, r6
 80045a4:	4639      	mov	r1, r7
 80045a6:	f7fb fe6f 	bl	8000288 <__aeabi_dsub>
 80045aa:	a365      	add	r3, pc, #404	; (adr r3, 8004740 <_dtoa_r+0x2b8>)
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f7fc f822 	bl	80005f8 <__aeabi_dmul>
 80045b4:	a364      	add	r3, pc, #400	; (adr r3, 8004748 <_dtoa_r+0x2c0>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fb fe67 	bl	800028c <__adddf3>
 80045be:	4606      	mov	r6, r0
 80045c0:	4628      	mov	r0, r5
 80045c2:	460f      	mov	r7, r1
 80045c4:	f7fb ffae 	bl	8000524 <__aeabi_i2d>
 80045c8:	a361      	add	r3, pc, #388	; (adr r3, 8004750 <_dtoa_r+0x2c8>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f7fc f813 	bl	80005f8 <__aeabi_dmul>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4630      	mov	r0, r6
 80045d8:	4639      	mov	r1, r7
 80045da:	f7fb fe57 	bl	800028c <__adddf3>
 80045de:	4606      	mov	r6, r0
 80045e0:	460f      	mov	r7, r1
 80045e2:	f7fc fab9 	bl	8000b58 <__aeabi_d2iz>
 80045e6:	2200      	movs	r2, #0
 80045e8:	9000      	str	r0, [sp, #0]
 80045ea:	2300      	movs	r3, #0
 80045ec:	4630      	mov	r0, r6
 80045ee:	4639      	mov	r1, r7
 80045f0:	f7fc fa74 	bl	8000adc <__aeabi_dcmplt>
 80045f4:	b150      	cbz	r0, 800460c <_dtoa_r+0x184>
 80045f6:	9800      	ldr	r0, [sp, #0]
 80045f8:	f7fb ff94 	bl	8000524 <__aeabi_i2d>
 80045fc:	4632      	mov	r2, r6
 80045fe:	463b      	mov	r3, r7
 8004600:	f7fc fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8004604:	b910      	cbnz	r0, 800460c <_dtoa_r+0x184>
 8004606:	9b00      	ldr	r3, [sp, #0]
 8004608:	3b01      	subs	r3, #1
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	9b00      	ldr	r3, [sp, #0]
 800460e:	2b16      	cmp	r3, #22
 8004610:	d85a      	bhi.n	80046c8 <_dtoa_r+0x240>
 8004612:	9a00      	ldr	r2, [sp, #0]
 8004614:	4b57      	ldr	r3, [pc, #348]	; (8004774 <_dtoa_r+0x2ec>)
 8004616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	ec51 0b19 	vmov	r0, r1, d9
 8004622:	f7fc fa5b 	bl	8000adc <__aeabi_dcmplt>
 8004626:	2800      	cmp	r0, #0
 8004628:	d050      	beq.n	80046cc <_dtoa_r+0x244>
 800462a:	9b00      	ldr	r3, [sp, #0]
 800462c:	3b01      	subs	r3, #1
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2300      	movs	r3, #0
 8004632:	930b      	str	r3, [sp, #44]	; 0x2c
 8004634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004636:	1b5d      	subs	r5, r3, r5
 8004638:	1e6b      	subs	r3, r5, #1
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	bf45      	ittet	mi
 800463e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004642:	9304      	strmi	r3, [sp, #16]
 8004644:	2300      	movpl	r3, #0
 8004646:	2300      	movmi	r3, #0
 8004648:	bf4c      	ite	mi
 800464a:	9305      	strmi	r3, [sp, #20]
 800464c:	9304      	strpl	r3, [sp, #16]
 800464e:	9b00      	ldr	r3, [sp, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db3d      	blt.n	80046d0 <_dtoa_r+0x248>
 8004654:	9b05      	ldr	r3, [sp, #20]
 8004656:	9a00      	ldr	r2, [sp, #0]
 8004658:	920a      	str	r2, [sp, #40]	; 0x28
 800465a:	4413      	add	r3, r2
 800465c:	9305      	str	r3, [sp, #20]
 800465e:	2300      	movs	r3, #0
 8004660:	9307      	str	r3, [sp, #28]
 8004662:	9b06      	ldr	r3, [sp, #24]
 8004664:	2b09      	cmp	r3, #9
 8004666:	f200 8089 	bhi.w	800477c <_dtoa_r+0x2f4>
 800466a:	2b05      	cmp	r3, #5
 800466c:	bfc4      	itt	gt
 800466e:	3b04      	subgt	r3, #4
 8004670:	9306      	strgt	r3, [sp, #24]
 8004672:	9b06      	ldr	r3, [sp, #24]
 8004674:	f1a3 0302 	sub.w	r3, r3, #2
 8004678:	bfcc      	ite	gt
 800467a:	2500      	movgt	r5, #0
 800467c:	2501      	movle	r5, #1
 800467e:	2b03      	cmp	r3, #3
 8004680:	f200 8087 	bhi.w	8004792 <_dtoa_r+0x30a>
 8004684:	e8df f003 	tbb	[pc, r3]
 8004688:	59383a2d 	.word	0x59383a2d
 800468c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004690:	441d      	add	r5, r3
 8004692:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004696:	2b20      	cmp	r3, #32
 8004698:	bfc1      	itttt	gt
 800469a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800469e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80046a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80046a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80046aa:	bfda      	itte	le
 80046ac:	f1c3 0320 	rsble	r3, r3, #32
 80046b0:	fa06 f003 	lslle.w	r0, r6, r3
 80046b4:	4318      	orrgt	r0, r3
 80046b6:	f7fb ff25 	bl	8000504 <__aeabi_ui2d>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4606      	mov	r6, r0
 80046be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80046c2:	3d01      	subs	r5, #1
 80046c4:	930e      	str	r3, [sp, #56]	; 0x38
 80046c6:	e76a      	b.n	800459e <_dtoa_r+0x116>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e7b2      	b.n	8004632 <_dtoa_r+0x1aa>
 80046cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80046ce:	e7b1      	b.n	8004634 <_dtoa_r+0x1ac>
 80046d0:	9b04      	ldr	r3, [sp, #16]
 80046d2:	9a00      	ldr	r2, [sp, #0]
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	9304      	str	r3, [sp, #16]
 80046d8:	4253      	negs	r3, r2
 80046da:	9307      	str	r3, [sp, #28]
 80046dc:	2300      	movs	r3, #0
 80046de:	930a      	str	r3, [sp, #40]	; 0x28
 80046e0:	e7bf      	b.n	8004662 <_dtoa_r+0x1da>
 80046e2:	2300      	movs	r3, #0
 80046e4:	9308      	str	r3, [sp, #32]
 80046e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dc55      	bgt.n	8004798 <_dtoa_r+0x310>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046f2:	461a      	mov	r2, r3
 80046f4:	9209      	str	r2, [sp, #36]	; 0x24
 80046f6:	e00c      	b.n	8004712 <_dtoa_r+0x28a>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e7f3      	b.n	80046e4 <_dtoa_r+0x25c>
 80046fc:	2300      	movs	r3, #0
 80046fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004700:	9308      	str	r3, [sp, #32]
 8004702:	9b00      	ldr	r3, [sp, #0]
 8004704:	4413      	add	r3, r2
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	9303      	str	r3, [sp, #12]
 800470e:	bfb8      	it	lt
 8004710:	2301      	movlt	r3, #1
 8004712:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004714:	2200      	movs	r2, #0
 8004716:	6042      	str	r2, [r0, #4]
 8004718:	2204      	movs	r2, #4
 800471a:	f102 0614 	add.w	r6, r2, #20
 800471e:	429e      	cmp	r6, r3
 8004720:	6841      	ldr	r1, [r0, #4]
 8004722:	d93d      	bls.n	80047a0 <_dtoa_r+0x318>
 8004724:	4620      	mov	r0, r4
 8004726:	f000 fca9 	bl	800507c <_Balloc>
 800472a:	9001      	str	r0, [sp, #4]
 800472c:	2800      	cmp	r0, #0
 800472e:	d13b      	bne.n	80047a8 <_dtoa_r+0x320>
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <_dtoa_r+0x2f0>)
 8004732:	4602      	mov	r2, r0
 8004734:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004738:	e6c0      	b.n	80044bc <_dtoa_r+0x34>
 800473a:	2301      	movs	r3, #1
 800473c:	e7df      	b.n	80046fe <_dtoa_r+0x276>
 800473e:	bf00      	nop
 8004740:	636f4361 	.word	0x636f4361
 8004744:	3fd287a7 	.word	0x3fd287a7
 8004748:	8b60c8b3 	.word	0x8b60c8b3
 800474c:	3fc68a28 	.word	0x3fc68a28
 8004750:	509f79fb 	.word	0x509f79fb
 8004754:	3fd34413 	.word	0x3fd34413
 8004758:	08006c99 	.word	0x08006c99
 800475c:	08006cb0 	.word	0x08006cb0
 8004760:	7ff00000 	.word	0x7ff00000
 8004764:	08006c95 	.word	0x08006c95
 8004768:	08006c8c 	.word	0x08006c8c
 800476c:	08006c69 	.word	0x08006c69
 8004770:	3ff80000 	.word	0x3ff80000
 8004774:	08006da0 	.word	0x08006da0
 8004778:	08006d0b 	.word	0x08006d0b
 800477c:	2501      	movs	r5, #1
 800477e:	2300      	movs	r3, #0
 8004780:	9306      	str	r3, [sp, #24]
 8004782:	9508      	str	r5, [sp, #32]
 8004784:	f04f 33ff 	mov.w	r3, #4294967295
 8004788:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	2312      	movs	r3, #18
 8004790:	e7b0      	b.n	80046f4 <_dtoa_r+0x26c>
 8004792:	2301      	movs	r3, #1
 8004794:	9308      	str	r3, [sp, #32]
 8004796:	e7f5      	b.n	8004784 <_dtoa_r+0x2fc>
 8004798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800479e:	e7b8      	b.n	8004712 <_dtoa_r+0x28a>
 80047a0:	3101      	adds	r1, #1
 80047a2:	6041      	str	r1, [r0, #4]
 80047a4:	0052      	lsls	r2, r2, #1
 80047a6:	e7b8      	b.n	800471a <_dtoa_r+0x292>
 80047a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047aa:	9a01      	ldr	r2, [sp, #4]
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	2b0e      	cmp	r3, #14
 80047b2:	f200 809d 	bhi.w	80048f0 <_dtoa_r+0x468>
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	f000 809a 	beq.w	80048f0 <_dtoa_r+0x468>
 80047bc:	9b00      	ldr	r3, [sp, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	dd32      	ble.n	8004828 <_dtoa_r+0x3a0>
 80047c2:	4ab7      	ldr	r2, [pc, #732]	; (8004aa0 <_dtoa_r+0x618>)
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80047cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047d0:	9b00      	ldr	r3, [sp, #0]
 80047d2:	05d8      	lsls	r0, r3, #23
 80047d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80047d8:	d516      	bpl.n	8004808 <_dtoa_r+0x380>
 80047da:	4bb2      	ldr	r3, [pc, #712]	; (8004aa4 <_dtoa_r+0x61c>)
 80047dc:	ec51 0b19 	vmov	r0, r1, d9
 80047e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047e4:	f7fc f832 	bl	800084c <__aeabi_ddiv>
 80047e8:	f007 070f 	and.w	r7, r7, #15
 80047ec:	4682      	mov	sl, r0
 80047ee:	468b      	mov	fp, r1
 80047f0:	2503      	movs	r5, #3
 80047f2:	4eac      	ldr	r6, [pc, #688]	; (8004aa4 <_dtoa_r+0x61c>)
 80047f4:	b957      	cbnz	r7, 800480c <_dtoa_r+0x384>
 80047f6:	4642      	mov	r2, r8
 80047f8:	464b      	mov	r3, r9
 80047fa:	4650      	mov	r0, sl
 80047fc:	4659      	mov	r1, fp
 80047fe:	f7fc f825 	bl	800084c <__aeabi_ddiv>
 8004802:	4682      	mov	sl, r0
 8004804:	468b      	mov	fp, r1
 8004806:	e028      	b.n	800485a <_dtoa_r+0x3d2>
 8004808:	2502      	movs	r5, #2
 800480a:	e7f2      	b.n	80047f2 <_dtoa_r+0x36a>
 800480c:	07f9      	lsls	r1, r7, #31
 800480e:	d508      	bpl.n	8004822 <_dtoa_r+0x39a>
 8004810:	4640      	mov	r0, r8
 8004812:	4649      	mov	r1, r9
 8004814:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004818:	f7fb feee 	bl	80005f8 <__aeabi_dmul>
 800481c:	3501      	adds	r5, #1
 800481e:	4680      	mov	r8, r0
 8004820:	4689      	mov	r9, r1
 8004822:	107f      	asrs	r7, r7, #1
 8004824:	3608      	adds	r6, #8
 8004826:	e7e5      	b.n	80047f4 <_dtoa_r+0x36c>
 8004828:	f000 809b 	beq.w	8004962 <_dtoa_r+0x4da>
 800482c:	9b00      	ldr	r3, [sp, #0]
 800482e:	4f9d      	ldr	r7, [pc, #628]	; (8004aa4 <_dtoa_r+0x61c>)
 8004830:	425e      	negs	r6, r3
 8004832:	4b9b      	ldr	r3, [pc, #620]	; (8004aa0 <_dtoa_r+0x618>)
 8004834:	f006 020f 	and.w	r2, r6, #15
 8004838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	ec51 0b19 	vmov	r0, r1, d9
 8004844:	f7fb fed8 	bl	80005f8 <__aeabi_dmul>
 8004848:	1136      	asrs	r6, r6, #4
 800484a:	4682      	mov	sl, r0
 800484c:	468b      	mov	fp, r1
 800484e:	2300      	movs	r3, #0
 8004850:	2502      	movs	r5, #2
 8004852:	2e00      	cmp	r6, #0
 8004854:	d17a      	bne.n	800494c <_dtoa_r+0x4c4>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1d3      	bne.n	8004802 <_dtoa_r+0x37a>
 800485a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8082 	beq.w	8004966 <_dtoa_r+0x4de>
 8004862:	4b91      	ldr	r3, [pc, #580]	; (8004aa8 <_dtoa_r+0x620>)
 8004864:	2200      	movs	r2, #0
 8004866:	4650      	mov	r0, sl
 8004868:	4659      	mov	r1, fp
 800486a:	f7fc f937 	bl	8000adc <__aeabi_dcmplt>
 800486e:	2800      	cmp	r0, #0
 8004870:	d079      	beq.n	8004966 <_dtoa_r+0x4de>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d076      	beq.n	8004966 <_dtoa_r+0x4de>
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	dd36      	ble.n	80048ec <_dtoa_r+0x464>
 800487e:	9b00      	ldr	r3, [sp, #0]
 8004880:	4650      	mov	r0, sl
 8004882:	4659      	mov	r1, fp
 8004884:	1e5f      	subs	r7, r3, #1
 8004886:	2200      	movs	r2, #0
 8004888:	4b88      	ldr	r3, [pc, #544]	; (8004aac <_dtoa_r+0x624>)
 800488a:	f7fb feb5 	bl	80005f8 <__aeabi_dmul>
 800488e:	9e02      	ldr	r6, [sp, #8]
 8004890:	4682      	mov	sl, r0
 8004892:	468b      	mov	fp, r1
 8004894:	3501      	adds	r5, #1
 8004896:	4628      	mov	r0, r5
 8004898:	f7fb fe44 	bl	8000524 <__aeabi_i2d>
 800489c:	4652      	mov	r2, sl
 800489e:	465b      	mov	r3, fp
 80048a0:	f7fb feaa 	bl	80005f8 <__aeabi_dmul>
 80048a4:	4b82      	ldr	r3, [pc, #520]	; (8004ab0 <_dtoa_r+0x628>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	f7fb fcf0 	bl	800028c <__adddf3>
 80048ac:	46d0      	mov	r8, sl
 80048ae:	46d9      	mov	r9, fp
 80048b0:	4682      	mov	sl, r0
 80048b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	d158      	bne.n	800496c <_dtoa_r+0x4e4>
 80048ba:	4b7e      	ldr	r3, [pc, #504]	; (8004ab4 <_dtoa_r+0x62c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	4640      	mov	r0, r8
 80048c0:	4649      	mov	r1, r9
 80048c2:	f7fb fce1 	bl	8000288 <__aeabi_dsub>
 80048c6:	4652      	mov	r2, sl
 80048c8:	465b      	mov	r3, fp
 80048ca:	4680      	mov	r8, r0
 80048cc:	4689      	mov	r9, r1
 80048ce:	f7fc f923 	bl	8000b18 <__aeabi_dcmpgt>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f040 8295 	bne.w	8004e02 <_dtoa_r+0x97a>
 80048d8:	4652      	mov	r2, sl
 80048da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80048de:	4640      	mov	r0, r8
 80048e0:	4649      	mov	r1, r9
 80048e2:	f7fc f8fb 	bl	8000adc <__aeabi_dcmplt>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f040 8289 	bne.w	8004dfe <_dtoa_r+0x976>
 80048ec:	ec5b ab19 	vmov	sl, fp, d9
 80048f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f2c0 8148 	blt.w	8004b88 <_dtoa_r+0x700>
 80048f8:	9a00      	ldr	r2, [sp, #0]
 80048fa:	2a0e      	cmp	r2, #14
 80048fc:	f300 8144 	bgt.w	8004b88 <_dtoa_r+0x700>
 8004900:	4b67      	ldr	r3, [pc, #412]	; (8004aa0 <_dtoa_r+0x618>)
 8004902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004906:	e9d3 8900 	ldrd	r8, r9, [r3]
 800490a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	f280 80d5 	bge.w	8004abc <_dtoa_r+0x634>
 8004912:	9b03      	ldr	r3, [sp, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f300 80d1 	bgt.w	8004abc <_dtoa_r+0x634>
 800491a:	f040 826f 	bne.w	8004dfc <_dtoa_r+0x974>
 800491e:	4b65      	ldr	r3, [pc, #404]	; (8004ab4 <_dtoa_r+0x62c>)
 8004920:	2200      	movs	r2, #0
 8004922:	4640      	mov	r0, r8
 8004924:	4649      	mov	r1, r9
 8004926:	f7fb fe67 	bl	80005f8 <__aeabi_dmul>
 800492a:	4652      	mov	r2, sl
 800492c:	465b      	mov	r3, fp
 800492e:	f7fc f8e9 	bl	8000b04 <__aeabi_dcmpge>
 8004932:	9e03      	ldr	r6, [sp, #12]
 8004934:	4637      	mov	r7, r6
 8004936:	2800      	cmp	r0, #0
 8004938:	f040 8245 	bne.w	8004dc6 <_dtoa_r+0x93e>
 800493c:	9d01      	ldr	r5, [sp, #4]
 800493e:	2331      	movs	r3, #49	; 0x31
 8004940:	f805 3b01 	strb.w	r3, [r5], #1
 8004944:	9b00      	ldr	r3, [sp, #0]
 8004946:	3301      	adds	r3, #1
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	e240      	b.n	8004dce <_dtoa_r+0x946>
 800494c:	07f2      	lsls	r2, r6, #31
 800494e:	d505      	bpl.n	800495c <_dtoa_r+0x4d4>
 8004950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004954:	f7fb fe50 	bl	80005f8 <__aeabi_dmul>
 8004958:	3501      	adds	r5, #1
 800495a:	2301      	movs	r3, #1
 800495c:	1076      	asrs	r6, r6, #1
 800495e:	3708      	adds	r7, #8
 8004960:	e777      	b.n	8004852 <_dtoa_r+0x3ca>
 8004962:	2502      	movs	r5, #2
 8004964:	e779      	b.n	800485a <_dtoa_r+0x3d2>
 8004966:	9f00      	ldr	r7, [sp, #0]
 8004968:	9e03      	ldr	r6, [sp, #12]
 800496a:	e794      	b.n	8004896 <_dtoa_r+0x40e>
 800496c:	9901      	ldr	r1, [sp, #4]
 800496e:	4b4c      	ldr	r3, [pc, #304]	; (8004aa0 <_dtoa_r+0x618>)
 8004970:	4431      	add	r1, r6
 8004972:	910d      	str	r1, [sp, #52]	; 0x34
 8004974:	9908      	ldr	r1, [sp, #32]
 8004976:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800497a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800497e:	2900      	cmp	r1, #0
 8004980:	d043      	beq.n	8004a0a <_dtoa_r+0x582>
 8004982:	494d      	ldr	r1, [pc, #308]	; (8004ab8 <_dtoa_r+0x630>)
 8004984:	2000      	movs	r0, #0
 8004986:	f7fb ff61 	bl	800084c <__aeabi_ddiv>
 800498a:	4652      	mov	r2, sl
 800498c:	465b      	mov	r3, fp
 800498e:	f7fb fc7b 	bl	8000288 <__aeabi_dsub>
 8004992:	9d01      	ldr	r5, [sp, #4]
 8004994:	4682      	mov	sl, r0
 8004996:	468b      	mov	fp, r1
 8004998:	4649      	mov	r1, r9
 800499a:	4640      	mov	r0, r8
 800499c:	f7fc f8dc 	bl	8000b58 <__aeabi_d2iz>
 80049a0:	4606      	mov	r6, r0
 80049a2:	f7fb fdbf 	bl	8000524 <__aeabi_i2d>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4640      	mov	r0, r8
 80049ac:	4649      	mov	r1, r9
 80049ae:	f7fb fc6b 	bl	8000288 <__aeabi_dsub>
 80049b2:	3630      	adds	r6, #48	; 0x30
 80049b4:	f805 6b01 	strb.w	r6, [r5], #1
 80049b8:	4652      	mov	r2, sl
 80049ba:	465b      	mov	r3, fp
 80049bc:	4680      	mov	r8, r0
 80049be:	4689      	mov	r9, r1
 80049c0:	f7fc f88c 	bl	8000adc <__aeabi_dcmplt>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d163      	bne.n	8004a90 <_dtoa_r+0x608>
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	4936      	ldr	r1, [pc, #216]	; (8004aa8 <_dtoa_r+0x620>)
 80049ce:	2000      	movs	r0, #0
 80049d0:	f7fb fc5a 	bl	8000288 <__aeabi_dsub>
 80049d4:	4652      	mov	r2, sl
 80049d6:	465b      	mov	r3, fp
 80049d8:	f7fc f880 	bl	8000adc <__aeabi_dcmplt>
 80049dc:	2800      	cmp	r0, #0
 80049de:	f040 80b5 	bne.w	8004b4c <_dtoa_r+0x6c4>
 80049e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049e4:	429d      	cmp	r5, r3
 80049e6:	d081      	beq.n	80048ec <_dtoa_r+0x464>
 80049e8:	4b30      	ldr	r3, [pc, #192]	; (8004aac <_dtoa_r+0x624>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	4650      	mov	r0, sl
 80049ee:	4659      	mov	r1, fp
 80049f0:	f7fb fe02 	bl	80005f8 <__aeabi_dmul>
 80049f4:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <_dtoa_r+0x624>)
 80049f6:	4682      	mov	sl, r0
 80049f8:	468b      	mov	fp, r1
 80049fa:	4640      	mov	r0, r8
 80049fc:	4649      	mov	r1, r9
 80049fe:	2200      	movs	r2, #0
 8004a00:	f7fb fdfa 	bl	80005f8 <__aeabi_dmul>
 8004a04:	4680      	mov	r8, r0
 8004a06:	4689      	mov	r9, r1
 8004a08:	e7c6      	b.n	8004998 <_dtoa_r+0x510>
 8004a0a:	4650      	mov	r0, sl
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	f7fb fdf3 	bl	80005f8 <__aeabi_dmul>
 8004a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a14:	9d01      	ldr	r5, [sp, #4]
 8004a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a18:	4682      	mov	sl, r0
 8004a1a:	468b      	mov	fp, r1
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4640      	mov	r0, r8
 8004a20:	f7fc f89a 	bl	8000b58 <__aeabi_d2iz>
 8004a24:	4606      	mov	r6, r0
 8004a26:	f7fb fd7d 	bl	8000524 <__aeabi_i2d>
 8004a2a:	3630      	adds	r6, #48	; 0x30
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4640      	mov	r0, r8
 8004a32:	4649      	mov	r1, r9
 8004a34:	f7fb fc28 	bl	8000288 <__aeabi_dsub>
 8004a38:	f805 6b01 	strb.w	r6, [r5], #1
 8004a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a3e:	429d      	cmp	r5, r3
 8004a40:	4680      	mov	r8, r0
 8004a42:	4689      	mov	r9, r1
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	d124      	bne.n	8004a94 <_dtoa_r+0x60c>
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <_dtoa_r+0x630>)
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	4659      	mov	r1, fp
 8004a50:	f7fb fc1c 	bl	800028c <__adddf3>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	f7fc f85c 	bl	8000b18 <__aeabi_dcmpgt>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d173      	bne.n	8004b4c <_dtoa_r+0x6c4>
 8004a64:	4652      	mov	r2, sl
 8004a66:	465b      	mov	r3, fp
 8004a68:	4913      	ldr	r1, [pc, #76]	; (8004ab8 <_dtoa_r+0x630>)
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7fb fc0c 	bl	8000288 <__aeabi_dsub>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4640      	mov	r0, r8
 8004a76:	4649      	mov	r1, r9
 8004a78:	f7fc f830 	bl	8000adc <__aeabi_dcmplt>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	f43f af35 	beq.w	80048ec <_dtoa_r+0x464>
 8004a82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004a84:	1e6b      	subs	r3, r5, #1
 8004a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a8c:	2b30      	cmp	r3, #48	; 0x30
 8004a8e:	d0f8      	beq.n	8004a82 <_dtoa_r+0x5fa>
 8004a90:	9700      	str	r7, [sp, #0]
 8004a92:	e049      	b.n	8004b28 <_dtoa_r+0x6a0>
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <_dtoa_r+0x624>)
 8004a96:	f7fb fdaf 	bl	80005f8 <__aeabi_dmul>
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	4689      	mov	r9, r1
 8004a9e:	e7bd      	b.n	8004a1c <_dtoa_r+0x594>
 8004aa0:	08006da0 	.word	0x08006da0
 8004aa4:	08006d78 	.word	0x08006d78
 8004aa8:	3ff00000 	.word	0x3ff00000
 8004aac:	40240000 	.word	0x40240000
 8004ab0:	401c0000 	.word	0x401c0000
 8004ab4:	40140000 	.word	0x40140000
 8004ab8:	3fe00000 	.word	0x3fe00000
 8004abc:	9d01      	ldr	r5, [sp, #4]
 8004abe:	4656      	mov	r6, sl
 8004ac0:	465f      	mov	r7, fp
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f7fb febf 	bl	800084c <__aeabi_ddiv>
 8004ace:	f7fc f843 	bl	8000b58 <__aeabi_d2iz>
 8004ad2:	4682      	mov	sl, r0
 8004ad4:	f7fb fd26 	bl	8000524 <__aeabi_i2d>
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	f7fb fd8c 	bl	80005f8 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004aec:	f7fb fbcc 	bl	8000288 <__aeabi_dsub>
 8004af0:	f805 6b01 	strb.w	r6, [r5], #1
 8004af4:	9e01      	ldr	r6, [sp, #4]
 8004af6:	9f03      	ldr	r7, [sp, #12]
 8004af8:	1bae      	subs	r6, r5, r6
 8004afa:	42b7      	cmp	r7, r6
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	d135      	bne.n	8004b6e <_dtoa_r+0x6e6>
 8004b02:	f7fb fbc3 	bl	800028c <__adddf3>
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460f      	mov	r7, r1
 8004b0e:	f7fc f803 	bl	8000b18 <__aeabi_dcmpgt>
 8004b12:	b9d0      	cbnz	r0, 8004b4a <_dtoa_r+0x6c2>
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	f7fb ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b20:	b110      	cbz	r0, 8004b28 <_dtoa_r+0x6a0>
 8004b22:	f01a 0f01 	tst.w	sl, #1
 8004b26:	d110      	bne.n	8004b4a <_dtoa_r+0x6c2>
 8004b28:	4620      	mov	r0, r4
 8004b2a:	ee18 1a10 	vmov	r1, s16
 8004b2e:	f000 fae5 	bl	80050fc <_Bfree>
 8004b32:	2300      	movs	r3, #0
 8004b34:	9800      	ldr	r0, [sp, #0]
 8004b36:	702b      	strb	r3, [r5, #0]
 8004b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	6018      	str	r0, [r3, #0]
 8004b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f43f acf1 	beq.w	8004528 <_dtoa_r+0xa0>
 8004b46:	601d      	str	r5, [r3, #0]
 8004b48:	e4ee      	b.n	8004528 <_dtoa_r+0xa0>
 8004b4a:	9f00      	ldr	r7, [sp, #0]
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	461d      	mov	r5, r3
 8004b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b54:	2a39      	cmp	r2, #57	; 0x39
 8004b56:	d106      	bne.n	8004b66 <_dtoa_r+0x6de>
 8004b58:	9a01      	ldr	r2, [sp, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d1f7      	bne.n	8004b4e <_dtoa_r+0x6c6>
 8004b5e:	9901      	ldr	r1, [sp, #4]
 8004b60:	2230      	movs	r2, #48	; 0x30
 8004b62:	3701      	adds	r7, #1
 8004b64:	700a      	strb	r2, [r1, #0]
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	3201      	adds	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	e790      	b.n	8004a90 <_dtoa_r+0x608>
 8004b6e:	4ba6      	ldr	r3, [pc, #664]	; (8004e08 <_dtoa_r+0x980>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	f7fb fd41 	bl	80005f8 <__aeabi_dmul>
 8004b76:	2200      	movs	r2, #0
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	f7fb ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d09d      	beq.n	8004ac2 <_dtoa_r+0x63a>
 8004b86:	e7cf      	b.n	8004b28 <_dtoa_r+0x6a0>
 8004b88:	9a08      	ldr	r2, [sp, #32]
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	f000 80d7 	beq.w	8004d3e <_dtoa_r+0x8b6>
 8004b90:	9a06      	ldr	r2, [sp, #24]
 8004b92:	2a01      	cmp	r2, #1
 8004b94:	f300 80ba 	bgt.w	8004d0c <_dtoa_r+0x884>
 8004b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	f000 80b2 	beq.w	8004d04 <_dtoa_r+0x87c>
 8004ba0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ba4:	9e07      	ldr	r6, [sp, #28]
 8004ba6:	9d04      	ldr	r5, [sp, #16]
 8004ba8:	9a04      	ldr	r2, [sp, #16]
 8004baa:	441a      	add	r2, r3
 8004bac:	9204      	str	r2, [sp, #16]
 8004bae:	9a05      	ldr	r2, [sp, #20]
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	441a      	add	r2, r3
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	9205      	str	r2, [sp, #20]
 8004bb8:	f000 fb58 	bl	800526c <__i2b>
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	dd0c      	ble.n	8004bdc <_dtoa_r+0x754>
 8004bc2:	9b05      	ldr	r3, [sp, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dd09      	ble.n	8004bdc <_dtoa_r+0x754>
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	9a04      	ldr	r2, [sp, #16]
 8004bcc:	bfa8      	it	ge
 8004bce:	462b      	movge	r3, r5
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	9204      	str	r2, [sp, #16]
 8004bd4:	9a05      	ldr	r2, [sp, #20]
 8004bd6:	1aed      	subs	r5, r5, r3
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	9305      	str	r3, [sp, #20]
 8004bdc:	9b07      	ldr	r3, [sp, #28]
 8004bde:	b31b      	cbz	r3, 8004c28 <_dtoa_r+0x7a0>
 8004be0:	9b08      	ldr	r3, [sp, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80af 	beq.w	8004d46 <_dtoa_r+0x8be>
 8004be8:	2e00      	cmp	r6, #0
 8004bea:	dd13      	ble.n	8004c14 <_dtoa_r+0x78c>
 8004bec:	4639      	mov	r1, r7
 8004bee:	4632      	mov	r2, r6
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 fbfb 	bl	80053ec <__pow5mult>
 8004bf6:	ee18 2a10 	vmov	r2, s16
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	4607      	mov	r7, r0
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f000 fb4a 	bl	8005298 <__multiply>
 8004c04:	ee18 1a10 	vmov	r1, s16
 8004c08:	4680      	mov	r8, r0
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 fa76 	bl	80050fc <_Bfree>
 8004c10:	ee08 8a10 	vmov	s16, r8
 8004c14:	9b07      	ldr	r3, [sp, #28]
 8004c16:	1b9a      	subs	r2, r3, r6
 8004c18:	d006      	beq.n	8004c28 <_dtoa_r+0x7a0>
 8004c1a:	ee18 1a10 	vmov	r1, s16
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 fbe4 	bl	80053ec <__pow5mult>
 8004c24:	ee08 0a10 	vmov	s16, r0
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f000 fb1e 	bl	800526c <__i2b>
 8004c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	4606      	mov	r6, r0
 8004c36:	f340 8088 	ble.w	8004d4a <_dtoa_r+0x8c2>
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 fbd4 	bl	80053ec <__pow5mult>
 8004c44:	9b06      	ldr	r3, [sp, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	4606      	mov	r6, r0
 8004c4a:	f340 8081 	ble.w	8004d50 <_dtoa_r+0x8c8>
 8004c4e:	f04f 0800 	mov.w	r8, #0
 8004c52:	6933      	ldr	r3, [r6, #16]
 8004c54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004c58:	6918      	ldr	r0, [r3, #16]
 8004c5a:	f000 fab7 	bl	80051cc <__hi0bits>
 8004c5e:	f1c0 0020 	rsb	r0, r0, #32
 8004c62:	9b05      	ldr	r3, [sp, #20]
 8004c64:	4418      	add	r0, r3
 8004c66:	f010 001f 	ands.w	r0, r0, #31
 8004c6a:	f000 8092 	beq.w	8004d92 <_dtoa_r+0x90a>
 8004c6e:	f1c0 0320 	rsb	r3, r0, #32
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	f340 808a 	ble.w	8004d8c <_dtoa_r+0x904>
 8004c78:	f1c0 001c 	rsb	r0, r0, #28
 8004c7c:	9b04      	ldr	r3, [sp, #16]
 8004c7e:	4403      	add	r3, r0
 8004c80:	9304      	str	r3, [sp, #16]
 8004c82:	9b05      	ldr	r3, [sp, #20]
 8004c84:	4403      	add	r3, r0
 8004c86:	4405      	add	r5, r0
 8004c88:	9305      	str	r3, [sp, #20]
 8004c8a:	9b04      	ldr	r3, [sp, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dd07      	ble.n	8004ca0 <_dtoa_r+0x818>
 8004c90:	ee18 1a10 	vmov	r1, s16
 8004c94:	461a      	mov	r2, r3
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 fc02 	bl	80054a0 <__lshift>
 8004c9c:	ee08 0a10 	vmov	s16, r0
 8004ca0:	9b05      	ldr	r3, [sp, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	dd05      	ble.n	8004cb2 <_dtoa_r+0x82a>
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fbf8 	bl	80054a0 <__lshift>
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d06e      	beq.n	8004d96 <_dtoa_r+0x90e>
 8004cb8:	ee18 0a10 	vmov	r0, s16
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	f000 fc5f 	bl	8005580 <__mcmp>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	da67      	bge.n	8004d96 <_dtoa_r+0x90e>
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	ee18 1a10 	vmov	r1, s16
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	220a      	movs	r2, #10
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f000 fa33 	bl	8005140 <__multadd>
 8004cda:	9b08      	ldr	r3, [sp, #32]
 8004cdc:	ee08 0a10 	vmov	s16, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 81b1 	beq.w	8005048 <_dtoa_r+0xbc0>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4639      	mov	r1, r7
 8004cea:	220a      	movs	r2, #10
 8004cec:	4620      	mov	r0, r4
 8004cee:	f000 fa27 	bl	8005140 <__multadd>
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	4607      	mov	r7, r0
 8004cf8:	f300 808e 	bgt.w	8004e18 <_dtoa_r+0x990>
 8004cfc:	9b06      	ldr	r3, [sp, #24]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	dc51      	bgt.n	8004da6 <_dtoa_r+0x91e>
 8004d02:	e089      	b.n	8004e18 <_dtoa_r+0x990>
 8004d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d0a:	e74b      	b.n	8004ba4 <_dtoa_r+0x71c>
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	1e5e      	subs	r6, r3, #1
 8004d10:	9b07      	ldr	r3, [sp, #28]
 8004d12:	42b3      	cmp	r3, r6
 8004d14:	bfbf      	itttt	lt
 8004d16:	9b07      	ldrlt	r3, [sp, #28]
 8004d18:	9607      	strlt	r6, [sp, #28]
 8004d1a:	1af2      	sublt	r2, r6, r3
 8004d1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d1e:	bfb6      	itet	lt
 8004d20:	189b      	addlt	r3, r3, r2
 8004d22:	1b9e      	subge	r6, r3, r6
 8004d24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	bfb8      	it	lt
 8004d2a:	2600      	movlt	r6, #0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bfb7      	itett	lt
 8004d30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004d34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004d38:	1a9d      	sublt	r5, r3, r2
 8004d3a:	2300      	movlt	r3, #0
 8004d3c:	e734      	b.n	8004ba8 <_dtoa_r+0x720>
 8004d3e:	9e07      	ldr	r6, [sp, #28]
 8004d40:	9d04      	ldr	r5, [sp, #16]
 8004d42:	9f08      	ldr	r7, [sp, #32]
 8004d44:	e73b      	b.n	8004bbe <_dtoa_r+0x736>
 8004d46:	9a07      	ldr	r2, [sp, #28]
 8004d48:	e767      	b.n	8004c1a <_dtoa_r+0x792>
 8004d4a:	9b06      	ldr	r3, [sp, #24]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	dc18      	bgt.n	8004d82 <_dtoa_r+0x8fa>
 8004d50:	f1ba 0f00 	cmp.w	sl, #0
 8004d54:	d115      	bne.n	8004d82 <_dtoa_r+0x8fa>
 8004d56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d5a:	b993      	cbnz	r3, 8004d82 <_dtoa_r+0x8fa>
 8004d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d60:	0d1b      	lsrs	r3, r3, #20
 8004d62:	051b      	lsls	r3, r3, #20
 8004d64:	b183      	cbz	r3, 8004d88 <_dtoa_r+0x900>
 8004d66:	9b04      	ldr	r3, [sp, #16]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	9b05      	ldr	r3, [sp, #20]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	9305      	str	r3, [sp, #20]
 8004d72:	f04f 0801 	mov.w	r8, #1
 8004d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f47f af6a 	bne.w	8004c52 <_dtoa_r+0x7ca>
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e76f      	b.n	8004c62 <_dtoa_r+0x7da>
 8004d82:	f04f 0800 	mov.w	r8, #0
 8004d86:	e7f6      	b.n	8004d76 <_dtoa_r+0x8ee>
 8004d88:	4698      	mov	r8, r3
 8004d8a:	e7f4      	b.n	8004d76 <_dtoa_r+0x8ee>
 8004d8c:	f43f af7d 	beq.w	8004c8a <_dtoa_r+0x802>
 8004d90:	4618      	mov	r0, r3
 8004d92:	301c      	adds	r0, #28
 8004d94:	e772      	b.n	8004c7c <_dtoa_r+0x7f4>
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	dc37      	bgt.n	8004e0c <_dtoa_r+0x984>
 8004d9c:	9b06      	ldr	r3, [sp, #24]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	dd34      	ble.n	8004e0c <_dtoa_r+0x984>
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	9302      	str	r3, [sp, #8]
 8004da6:	9b02      	ldr	r3, [sp, #8]
 8004da8:	b96b      	cbnz	r3, 8004dc6 <_dtoa_r+0x93e>
 8004daa:	4631      	mov	r1, r6
 8004dac:	2205      	movs	r2, #5
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f9c6 	bl	8005140 <__multadd>
 8004db4:	4601      	mov	r1, r0
 8004db6:	4606      	mov	r6, r0
 8004db8:	ee18 0a10 	vmov	r0, s16
 8004dbc:	f000 fbe0 	bl	8005580 <__mcmp>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f73f adbb 	bgt.w	800493c <_dtoa_r+0x4b4>
 8004dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc8:	9d01      	ldr	r5, [sp, #4]
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	f04f 0800 	mov.w	r8, #0
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f000 f991 	bl	80050fc <_Bfree>
 8004dda:	2f00      	cmp	r7, #0
 8004ddc:	f43f aea4 	beq.w	8004b28 <_dtoa_r+0x6a0>
 8004de0:	f1b8 0f00 	cmp.w	r8, #0
 8004de4:	d005      	beq.n	8004df2 <_dtoa_r+0x96a>
 8004de6:	45b8      	cmp	r8, r7
 8004de8:	d003      	beq.n	8004df2 <_dtoa_r+0x96a>
 8004dea:	4641      	mov	r1, r8
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 f985 	bl	80050fc <_Bfree>
 8004df2:	4639      	mov	r1, r7
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 f981 	bl	80050fc <_Bfree>
 8004dfa:	e695      	b.n	8004b28 <_dtoa_r+0x6a0>
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	4637      	mov	r7, r6
 8004e00:	e7e1      	b.n	8004dc6 <_dtoa_r+0x93e>
 8004e02:	9700      	str	r7, [sp, #0]
 8004e04:	4637      	mov	r7, r6
 8004e06:	e599      	b.n	800493c <_dtoa_r+0x4b4>
 8004e08:	40240000 	.word	0x40240000
 8004e0c:	9b08      	ldr	r3, [sp, #32]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80ca 	beq.w	8004fa8 <_dtoa_r+0xb20>
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	9302      	str	r3, [sp, #8]
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	dd05      	ble.n	8004e28 <_dtoa_r+0x9a0>
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	462a      	mov	r2, r5
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fb3d 	bl	80054a0 <__lshift>
 8004e26:	4607      	mov	r7, r0
 8004e28:	f1b8 0f00 	cmp.w	r8, #0
 8004e2c:	d05b      	beq.n	8004ee6 <_dtoa_r+0xa5e>
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 f923 	bl	800507c <_Balloc>
 8004e36:	4605      	mov	r5, r0
 8004e38:	b928      	cbnz	r0, 8004e46 <_dtoa_r+0x9be>
 8004e3a:	4b87      	ldr	r3, [pc, #540]	; (8005058 <_dtoa_r+0xbd0>)
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e42:	f7ff bb3b 	b.w	80044bc <_dtoa_r+0x34>
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	3202      	adds	r2, #2
 8004e4a:	0092      	lsls	r2, r2, #2
 8004e4c:	f107 010c 	add.w	r1, r7, #12
 8004e50:	300c      	adds	r0, #12
 8004e52:	f7fe fdc1 	bl	80039d8 <memcpy>
 8004e56:	2201      	movs	r2, #1
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 fb20 	bl	80054a0 <__lshift>
 8004e60:	9b01      	ldr	r3, [sp, #4]
 8004e62:	f103 0901 	add.w	r9, r3, #1
 8004e66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	9305      	str	r3, [sp, #20]
 8004e6e:	f00a 0301 	and.w	r3, sl, #1
 8004e72:	46b8      	mov	r8, r7
 8004e74:	9304      	str	r3, [sp, #16]
 8004e76:	4607      	mov	r7, r0
 8004e78:	4631      	mov	r1, r6
 8004e7a:	ee18 0a10 	vmov	r0, s16
 8004e7e:	f7ff fa77 	bl	8004370 <quorem>
 8004e82:	4641      	mov	r1, r8
 8004e84:	9002      	str	r0, [sp, #8]
 8004e86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004e8a:	ee18 0a10 	vmov	r0, s16
 8004e8e:	f000 fb77 	bl	8005580 <__mcmp>
 8004e92:	463a      	mov	r2, r7
 8004e94:	9003      	str	r0, [sp, #12]
 8004e96:	4631      	mov	r1, r6
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 fb8d 	bl	80055b8 <__mdiff>
 8004e9e:	68c2      	ldr	r2, [r0, #12]
 8004ea0:	f109 3bff 	add.w	fp, r9, #4294967295
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	bb02      	cbnz	r2, 8004eea <_dtoa_r+0xa62>
 8004ea8:	4601      	mov	r1, r0
 8004eaa:	ee18 0a10 	vmov	r0, s16
 8004eae:	f000 fb67 	bl	8005580 <__mcmp>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	9207      	str	r2, [sp, #28]
 8004eba:	f000 f91f 	bl	80050fc <_Bfree>
 8004ebe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004ec2:	ea43 0102 	orr.w	r1, r3, r2
 8004ec6:	9b04      	ldr	r3, [sp, #16]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	464d      	mov	r5, r9
 8004ecc:	d10f      	bne.n	8004eee <_dtoa_r+0xa66>
 8004ece:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ed2:	d02a      	beq.n	8004f2a <_dtoa_r+0xaa2>
 8004ed4:	9b03      	ldr	r3, [sp, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dd02      	ble.n	8004ee0 <_dtoa_r+0xa58>
 8004eda:	9b02      	ldr	r3, [sp, #8]
 8004edc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004ee0:	f88b a000 	strb.w	sl, [fp]
 8004ee4:	e775      	b.n	8004dd2 <_dtoa_r+0x94a>
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	e7ba      	b.n	8004e60 <_dtoa_r+0x9d8>
 8004eea:	2201      	movs	r2, #1
 8004eec:	e7e2      	b.n	8004eb4 <_dtoa_r+0xa2c>
 8004eee:	9b03      	ldr	r3, [sp, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	db04      	blt.n	8004efe <_dtoa_r+0xa76>
 8004ef4:	9906      	ldr	r1, [sp, #24]
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	9904      	ldr	r1, [sp, #16]
 8004efa:	430b      	orrs	r3, r1
 8004efc:	d122      	bne.n	8004f44 <_dtoa_r+0xabc>
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	ddee      	ble.n	8004ee0 <_dtoa_r+0xa58>
 8004f02:	ee18 1a10 	vmov	r1, s16
 8004f06:	2201      	movs	r2, #1
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fac9 	bl	80054a0 <__lshift>
 8004f0e:	4631      	mov	r1, r6
 8004f10:	ee08 0a10 	vmov	s16, r0
 8004f14:	f000 fb34 	bl	8005580 <__mcmp>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	dc03      	bgt.n	8004f24 <_dtoa_r+0xa9c>
 8004f1c:	d1e0      	bne.n	8004ee0 <_dtoa_r+0xa58>
 8004f1e:	f01a 0f01 	tst.w	sl, #1
 8004f22:	d0dd      	beq.n	8004ee0 <_dtoa_r+0xa58>
 8004f24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f28:	d1d7      	bne.n	8004eda <_dtoa_r+0xa52>
 8004f2a:	2339      	movs	r3, #57	; 0x39
 8004f2c:	f88b 3000 	strb.w	r3, [fp]
 8004f30:	462b      	mov	r3, r5
 8004f32:	461d      	mov	r5, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004f3a:	2a39      	cmp	r2, #57	; 0x39
 8004f3c:	d071      	beq.n	8005022 <_dtoa_r+0xb9a>
 8004f3e:	3201      	adds	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	e746      	b.n	8004dd2 <_dtoa_r+0x94a>
 8004f44:	2a00      	cmp	r2, #0
 8004f46:	dd07      	ble.n	8004f58 <_dtoa_r+0xad0>
 8004f48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f4c:	d0ed      	beq.n	8004f2a <_dtoa_r+0xaa2>
 8004f4e:	f10a 0301 	add.w	r3, sl, #1
 8004f52:	f88b 3000 	strb.w	r3, [fp]
 8004f56:	e73c      	b.n	8004dd2 <_dtoa_r+0x94a>
 8004f58:	9b05      	ldr	r3, [sp, #20]
 8004f5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004f5e:	4599      	cmp	r9, r3
 8004f60:	d047      	beq.n	8004ff2 <_dtoa_r+0xb6a>
 8004f62:	ee18 1a10 	vmov	r1, s16
 8004f66:	2300      	movs	r3, #0
 8004f68:	220a      	movs	r2, #10
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 f8e8 	bl	8005140 <__multadd>
 8004f70:	45b8      	cmp	r8, r7
 8004f72:	ee08 0a10 	vmov	s16, r0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	f04f 020a 	mov.w	r2, #10
 8004f7e:	4641      	mov	r1, r8
 8004f80:	4620      	mov	r0, r4
 8004f82:	d106      	bne.n	8004f92 <_dtoa_r+0xb0a>
 8004f84:	f000 f8dc 	bl	8005140 <__multadd>
 8004f88:	4680      	mov	r8, r0
 8004f8a:	4607      	mov	r7, r0
 8004f8c:	f109 0901 	add.w	r9, r9, #1
 8004f90:	e772      	b.n	8004e78 <_dtoa_r+0x9f0>
 8004f92:	f000 f8d5 	bl	8005140 <__multadd>
 8004f96:	4639      	mov	r1, r7
 8004f98:	4680      	mov	r8, r0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	220a      	movs	r2, #10
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 f8ce 	bl	8005140 <__multadd>
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	e7f1      	b.n	8004f8c <_dtoa_r+0xb04>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	9d01      	ldr	r5, [sp, #4]
 8004fae:	ee18 0a10 	vmov	r0, s16
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	f7ff f9dc 	bl	8004370 <quorem>
 8004fb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004fbc:	9b01      	ldr	r3, [sp, #4]
 8004fbe:	f805 ab01 	strb.w	sl, [r5], #1
 8004fc2:	1aea      	subs	r2, r5, r3
 8004fc4:	9b02      	ldr	r3, [sp, #8]
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	dd09      	ble.n	8004fde <_dtoa_r+0xb56>
 8004fca:	ee18 1a10 	vmov	r1, s16
 8004fce:	2300      	movs	r3, #0
 8004fd0:	220a      	movs	r2, #10
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 f8b4 	bl	8005140 <__multadd>
 8004fd8:	ee08 0a10 	vmov	s16, r0
 8004fdc:	e7e7      	b.n	8004fae <_dtoa_r+0xb26>
 8004fde:	9b02      	ldr	r3, [sp, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bfc8      	it	gt
 8004fe4:	461d      	movgt	r5, r3
 8004fe6:	9b01      	ldr	r3, [sp, #4]
 8004fe8:	bfd8      	it	le
 8004fea:	2501      	movle	r5, #1
 8004fec:	441d      	add	r5, r3
 8004fee:	f04f 0800 	mov.w	r8, #0
 8004ff2:	ee18 1a10 	vmov	r1, s16
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fa51 	bl	80054a0 <__lshift>
 8004ffe:	4631      	mov	r1, r6
 8005000:	ee08 0a10 	vmov	s16, r0
 8005004:	f000 fabc 	bl	8005580 <__mcmp>
 8005008:	2800      	cmp	r0, #0
 800500a:	dc91      	bgt.n	8004f30 <_dtoa_r+0xaa8>
 800500c:	d102      	bne.n	8005014 <_dtoa_r+0xb8c>
 800500e:	f01a 0f01 	tst.w	sl, #1
 8005012:	d18d      	bne.n	8004f30 <_dtoa_r+0xaa8>
 8005014:	462b      	mov	r3, r5
 8005016:	461d      	mov	r5, r3
 8005018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800501c:	2a30      	cmp	r2, #48	; 0x30
 800501e:	d0fa      	beq.n	8005016 <_dtoa_r+0xb8e>
 8005020:	e6d7      	b.n	8004dd2 <_dtoa_r+0x94a>
 8005022:	9a01      	ldr	r2, [sp, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d184      	bne.n	8004f32 <_dtoa_r+0xaaa>
 8005028:	9b00      	ldr	r3, [sp, #0]
 800502a:	3301      	adds	r3, #1
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2331      	movs	r3, #49	; 0x31
 8005030:	7013      	strb	r3, [r2, #0]
 8005032:	e6ce      	b.n	8004dd2 <_dtoa_r+0x94a>
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <_dtoa_r+0xbd4>)
 8005036:	f7ff ba95 	b.w	8004564 <_dtoa_r+0xdc>
 800503a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800503c:	2b00      	cmp	r3, #0
 800503e:	f47f aa6e 	bne.w	800451e <_dtoa_r+0x96>
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <_dtoa_r+0xbd8>)
 8005044:	f7ff ba8e 	b.w	8004564 <_dtoa_r+0xdc>
 8005048:	9b02      	ldr	r3, [sp, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	dcae      	bgt.n	8004fac <_dtoa_r+0xb24>
 800504e:	9b06      	ldr	r3, [sp, #24]
 8005050:	2b02      	cmp	r3, #2
 8005052:	f73f aea8 	bgt.w	8004da6 <_dtoa_r+0x91e>
 8005056:	e7a9      	b.n	8004fac <_dtoa_r+0xb24>
 8005058:	08006d0b 	.word	0x08006d0b
 800505c:	08006c68 	.word	0x08006c68
 8005060:	08006c8c 	.word	0x08006c8c

08005064 <_localeconv_r>:
 8005064:	4800      	ldr	r0, [pc, #0]	; (8005068 <_localeconv_r+0x4>)
 8005066:	4770      	bx	lr
 8005068:	20000160 	.word	0x20000160

0800506c <malloc>:
 800506c:	4b02      	ldr	r3, [pc, #8]	; (8005078 <malloc+0xc>)
 800506e:	4601      	mov	r1, r0
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	f000 bc09 	b.w	8005888 <_malloc_r>
 8005076:	bf00      	nop
 8005078:	2000000c 	.word	0x2000000c

0800507c <_Balloc>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005080:	4604      	mov	r4, r0
 8005082:	460d      	mov	r5, r1
 8005084:	b976      	cbnz	r6, 80050a4 <_Balloc+0x28>
 8005086:	2010      	movs	r0, #16
 8005088:	f7ff fff0 	bl	800506c <malloc>
 800508c:	4602      	mov	r2, r0
 800508e:	6260      	str	r0, [r4, #36]	; 0x24
 8005090:	b920      	cbnz	r0, 800509c <_Balloc+0x20>
 8005092:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <_Balloc+0x78>)
 8005094:	4818      	ldr	r0, [pc, #96]	; (80050f8 <_Balloc+0x7c>)
 8005096:	2166      	movs	r1, #102	; 0x66
 8005098:	f000 fdd6 	bl	8005c48 <__assert_func>
 800509c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050a0:	6006      	str	r6, [r0, #0]
 80050a2:	60c6      	str	r6, [r0, #12]
 80050a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050a6:	68f3      	ldr	r3, [r6, #12]
 80050a8:	b183      	cbz	r3, 80050cc <_Balloc+0x50>
 80050aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050b2:	b9b8      	cbnz	r0, 80050e4 <_Balloc+0x68>
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f605 	lsl.w	r6, r1, r5
 80050ba:	1d72      	adds	r2, r6, #5
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 fb60 	bl	8005784 <_calloc_r>
 80050c4:	b160      	cbz	r0, 80050e0 <_Balloc+0x64>
 80050c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050ca:	e00e      	b.n	80050ea <_Balloc+0x6e>
 80050cc:	2221      	movs	r2, #33	; 0x21
 80050ce:	2104      	movs	r1, #4
 80050d0:	4620      	mov	r0, r4
 80050d2:	f000 fb57 	bl	8005784 <_calloc_r>
 80050d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d8:	60f0      	str	r0, [r6, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e4      	bne.n	80050aa <_Balloc+0x2e>
 80050e0:	2000      	movs	r0, #0
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	6802      	ldr	r2, [r0, #0]
 80050e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050ea:	2300      	movs	r3, #0
 80050ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050f0:	e7f7      	b.n	80050e2 <_Balloc+0x66>
 80050f2:	bf00      	nop
 80050f4:	08006c99 	.word	0x08006c99
 80050f8:	08006d1c 	.word	0x08006d1c

080050fc <_Bfree>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005100:	4605      	mov	r5, r0
 8005102:	460c      	mov	r4, r1
 8005104:	b976      	cbnz	r6, 8005124 <_Bfree+0x28>
 8005106:	2010      	movs	r0, #16
 8005108:	f7ff ffb0 	bl	800506c <malloc>
 800510c:	4602      	mov	r2, r0
 800510e:	6268      	str	r0, [r5, #36]	; 0x24
 8005110:	b920      	cbnz	r0, 800511c <_Bfree+0x20>
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <_Bfree+0x3c>)
 8005114:	4809      	ldr	r0, [pc, #36]	; (800513c <_Bfree+0x40>)
 8005116:	218a      	movs	r1, #138	; 0x8a
 8005118:	f000 fd96 	bl	8005c48 <__assert_func>
 800511c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005120:	6006      	str	r6, [r0, #0]
 8005122:	60c6      	str	r6, [r0, #12]
 8005124:	b13c      	cbz	r4, 8005136 <_Bfree+0x3a>
 8005126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005128:	6862      	ldr	r2, [r4, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005130:	6021      	str	r1, [r4, #0]
 8005132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	08006c99 	.word	0x08006c99
 800513c:	08006d1c 	.word	0x08006d1c

08005140 <__multadd>:
 8005140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005144:	690d      	ldr	r5, [r1, #16]
 8005146:	4607      	mov	r7, r0
 8005148:	460c      	mov	r4, r1
 800514a:	461e      	mov	r6, r3
 800514c:	f101 0c14 	add.w	ip, r1, #20
 8005150:	2000      	movs	r0, #0
 8005152:	f8dc 3000 	ldr.w	r3, [ip]
 8005156:	b299      	uxth	r1, r3
 8005158:	fb02 6101 	mla	r1, r2, r1, r6
 800515c:	0c1e      	lsrs	r6, r3, #16
 800515e:	0c0b      	lsrs	r3, r1, #16
 8005160:	fb02 3306 	mla	r3, r2, r6, r3
 8005164:	b289      	uxth	r1, r1
 8005166:	3001      	adds	r0, #1
 8005168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800516c:	4285      	cmp	r5, r0
 800516e:	f84c 1b04 	str.w	r1, [ip], #4
 8005172:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005176:	dcec      	bgt.n	8005152 <__multadd+0x12>
 8005178:	b30e      	cbz	r6, 80051be <__multadd+0x7e>
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	42ab      	cmp	r3, r5
 800517e:	dc19      	bgt.n	80051b4 <__multadd+0x74>
 8005180:	6861      	ldr	r1, [r4, #4]
 8005182:	4638      	mov	r0, r7
 8005184:	3101      	adds	r1, #1
 8005186:	f7ff ff79 	bl	800507c <_Balloc>
 800518a:	4680      	mov	r8, r0
 800518c:	b928      	cbnz	r0, 800519a <__multadd+0x5a>
 800518e:	4602      	mov	r2, r0
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <__multadd+0x84>)
 8005192:	480d      	ldr	r0, [pc, #52]	; (80051c8 <__multadd+0x88>)
 8005194:	21b5      	movs	r1, #181	; 0xb5
 8005196:	f000 fd57 	bl	8005c48 <__assert_func>
 800519a:	6922      	ldr	r2, [r4, #16]
 800519c:	3202      	adds	r2, #2
 800519e:	f104 010c 	add.w	r1, r4, #12
 80051a2:	0092      	lsls	r2, r2, #2
 80051a4:	300c      	adds	r0, #12
 80051a6:	f7fe fc17 	bl	80039d8 <memcpy>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4638      	mov	r0, r7
 80051ae:	f7ff ffa5 	bl	80050fc <_Bfree>
 80051b2:	4644      	mov	r4, r8
 80051b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051b8:	3501      	adds	r5, #1
 80051ba:	615e      	str	r6, [r3, #20]
 80051bc:	6125      	str	r5, [r4, #16]
 80051be:	4620      	mov	r0, r4
 80051c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c4:	08006d0b 	.word	0x08006d0b
 80051c8:	08006d1c 	.word	0x08006d1c

080051cc <__hi0bits>:
 80051cc:	0c03      	lsrs	r3, r0, #16
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	b9d3      	cbnz	r3, 8005208 <__hi0bits+0x3c>
 80051d2:	0400      	lsls	r0, r0, #16
 80051d4:	2310      	movs	r3, #16
 80051d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051da:	bf04      	itt	eq
 80051dc:	0200      	lsleq	r0, r0, #8
 80051de:	3308      	addeq	r3, #8
 80051e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80051e4:	bf04      	itt	eq
 80051e6:	0100      	lsleq	r0, r0, #4
 80051e8:	3304      	addeq	r3, #4
 80051ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80051ee:	bf04      	itt	eq
 80051f0:	0080      	lsleq	r0, r0, #2
 80051f2:	3302      	addeq	r3, #2
 80051f4:	2800      	cmp	r0, #0
 80051f6:	db05      	blt.n	8005204 <__hi0bits+0x38>
 80051f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051fc:	f103 0301 	add.w	r3, r3, #1
 8005200:	bf08      	it	eq
 8005202:	2320      	moveq	r3, #32
 8005204:	4618      	mov	r0, r3
 8005206:	4770      	bx	lr
 8005208:	2300      	movs	r3, #0
 800520a:	e7e4      	b.n	80051d6 <__hi0bits+0xa>

0800520c <__lo0bits>:
 800520c:	6803      	ldr	r3, [r0, #0]
 800520e:	f013 0207 	ands.w	r2, r3, #7
 8005212:	4601      	mov	r1, r0
 8005214:	d00b      	beq.n	800522e <__lo0bits+0x22>
 8005216:	07da      	lsls	r2, r3, #31
 8005218:	d423      	bmi.n	8005262 <__lo0bits+0x56>
 800521a:	0798      	lsls	r0, r3, #30
 800521c:	bf49      	itett	mi
 800521e:	085b      	lsrmi	r3, r3, #1
 8005220:	089b      	lsrpl	r3, r3, #2
 8005222:	2001      	movmi	r0, #1
 8005224:	600b      	strmi	r3, [r1, #0]
 8005226:	bf5c      	itt	pl
 8005228:	600b      	strpl	r3, [r1, #0]
 800522a:	2002      	movpl	r0, #2
 800522c:	4770      	bx	lr
 800522e:	b298      	uxth	r0, r3
 8005230:	b9a8      	cbnz	r0, 800525e <__lo0bits+0x52>
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	2010      	movs	r0, #16
 8005236:	b2da      	uxtb	r2, r3
 8005238:	b90a      	cbnz	r2, 800523e <__lo0bits+0x32>
 800523a:	3008      	adds	r0, #8
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	071a      	lsls	r2, r3, #28
 8005240:	bf04      	itt	eq
 8005242:	091b      	lsreq	r3, r3, #4
 8005244:	3004      	addeq	r0, #4
 8005246:	079a      	lsls	r2, r3, #30
 8005248:	bf04      	itt	eq
 800524a:	089b      	lsreq	r3, r3, #2
 800524c:	3002      	addeq	r0, #2
 800524e:	07da      	lsls	r2, r3, #31
 8005250:	d403      	bmi.n	800525a <__lo0bits+0x4e>
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	f100 0001 	add.w	r0, r0, #1
 8005258:	d005      	beq.n	8005266 <__lo0bits+0x5a>
 800525a:	600b      	str	r3, [r1, #0]
 800525c:	4770      	bx	lr
 800525e:	4610      	mov	r0, r2
 8005260:	e7e9      	b.n	8005236 <__lo0bits+0x2a>
 8005262:	2000      	movs	r0, #0
 8005264:	4770      	bx	lr
 8005266:	2020      	movs	r0, #32
 8005268:	4770      	bx	lr
	...

0800526c <__i2b>:
 800526c:	b510      	push	{r4, lr}
 800526e:	460c      	mov	r4, r1
 8005270:	2101      	movs	r1, #1
 8005272:	f7ff ff03 	bl	800507c <_Balloc>
 8005276:	4602      	mov	r2, r0
 8005278:	b928      	cbnz	r0, 8005286 <__i2b+0x1a>
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <__i2b+0x24>)
 800527c:	4805      	ldr	r0, [pc, #20]	; (8005294 <__i2b+0x28>)
 800527e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005282:	f000 fce1 	bl	8005c48 <__assert_func>
 8005286:	2301      	movs	r3, #1
 8005288:	6144      	str	r4, [r0, #20]
 800528a:	6103      	str	r3, [r0, #16]
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	08006d0b 	.word	0x08006d0b
 8005294:	08006d1c 	.word	0x08006d1c

08005298 <__multiply>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	4691      	mov	r9, r2
 800529e:	690a      	ldr	r2, [r1, #16]
 80052a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	bfb8      	it	lt
 80052a8:	460b      	movlt	r3, r1
 80052aa:	460c      	mov	r4, r1
 80052ac:	bfbc      	itt	lt
 80052ae:	464c      	movlt	r4, r9
 80052b0:	4699      	movlt	r9, r3
 80052b2:	6927      	ldr	r7, [r4, #16]
 80052b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80052b8:	68a3      	ldr	r3, [r4, #8]
 80052ba:	6861      	ldr	r1, [r4, #4]
 80052bc:	eb07 060a 	add.w	r6, r7, sl
 80052c0:	42b3      	cmp	r3, r6
 80052c2:	b085      	sub	sp, #20
 80052c4:	bfb8      	it	lt
 80052c6:	3101      	addlt	r1, #1
 80052c8:	f7ff fed8 	bl	800507c <_Balloc>
 80052cc:	b930      	cbnz	r0, 80052dc <__multiply+0x44>
 80052ce:	4602      	mov	r2, r0
 80052d0:	4b44      	ldr	r3, [pc, #272]	; (80053e4 <__multiply+0x14c>)
 80052d2:	4845      	ldr	r0, [pc, #276]	; (80053e8 <__multiply+0x150>)
 80052d4:	f240 115d 	movw	r1, #349	; 0x15d
 80052d8:	f000 fcb6 	bl	8005c48 <__assert_func>
 80052dc:	f100 0514 	add.w	r5, r0, #20
 80052e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052e4:	462b      	mov	r3, r5
 80052e6:	2200      	movs	r2, #0
 80052e8:	4543      	cmp	r3, r8
 80052ea:	d321      	bcc.n	8005330 <__multiply+0x98>
 80052ec:	f104 0314 	add.w	r3, r4, #20
 80052f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052f4:	f109 0314 	add.w	r3, r9, #20
 80052f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052fc:	9202      	str	r2, [sp, #8]
 80052fe:	1b3a      	subs	r2, r7, r4
 8005300:	3a15      	subs	r2, #21
 8005302:	f022 0203 	bic.w	r2, r2, #3
 8005306:	3204      	adds	r2, #4
 8005308:	f104 0115 	add.w	r1, r4, #21
 800530c:	428f      	cmp	r7, r1
 800530e:	bf38      	it	cc
 8005310:	2204      	movcc	r2, #4
 8005312:	9201      	str	r2, [sp, #4]
 8005314:	9a02      	ldr	r2, [sp, #8]
 8005316:	9303      	str	r3, [sp, #12]
 8005318:	429a      	cmp	r2, r3
 800531a:	d80c      	bhi.n	8005336 <__multiply+0x9e>
 800531c:	2e00      	cmp	r6, #0
 800531e:	dd03      	ble.n	8005328 <__multiply+0x90>
 8005320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005324:	2b00      	cmp	r3, #0
 8005326:	d05a      	beq.n	80053de <__multiply+0x146>
 8005328:	6106      	str	r6, [r0, #16]
 800532a:	b005      	add	sp, #20
 800532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005330:	f843 2b04 	str.w	r2, [r3], #4
 8005334:	e7d8      	b.n	80052e8 <__multiply+0x50>
 8005336:	f8b3 a000 	ldrh.w	sl, [r3]
 800533a:	f1ba 0f00 	cmp.w	sl, #0
 800533e:	d024      	beq.n	800538a <__multiply+0xf2>
 8005340:	f104 0e14 	add.w	lr, r4, #20
 8005344:	46a9      	mov	r9, r5
 8005346:	f04f 0c00 	mov.w	ip, #0
 800534a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800534e:	f8d9 1000 	ldr.w	r1, [r9]
 8005352:	fa1f fb82 	uxth.w	fp, r2
 8005356:	b289      	uxth	r1, r1
 8005358:	fb0a 110b 	mla	r1, sl, fp, r1
 800535c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005360:	f8d9 2000 	ldr.w	r2, [r9]
 8005364:	4461      	add	r1, ip
 8005366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800536a:	fb0a c20b 	mla	r2, sl, fp, ip
 800536e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005372:	b289      	uxth	r1, r1
 8005374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005378:	4577      	cmp	r7, lr
 800537a:	f849 1b04 	str.w	r1, [r9], #4
 800537e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005382:	d8e2      	bhi.n	800534a <__multiply+0xb2>
 8005384:	9a01      	ldr	r2, [sp, #4]
 8005386:	f845 c002 	str.w	ip, [r5, r2]
 800538a:	9a03      	ldr	r2, [sp, #12]
 800538c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005390:	3304      	adds	r3, #4
 8005392:	f1b9 0f00 	cmp.w	r9, #0
 8005396:	d020      	beq.n	80053da <__multiply+0x142>
 8005398:	6829      	ldr	r1, [r5, #0]
 800539a:	f104 0c14 	add.w	ip, r4, #20
 800539e:	46ae      	mov	lr, r5
 80053a0:	f04f 0a00 	mov.w	sl, #0
 80053a4:	f8bc b000 	ldrh.w	fp, [ip]
 80053a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80053ac:	fb09 220b 	mla	r2, r9, fp, r2
 80053b0:	4492      	add	sl, r2
 80053b2:	b289      	uxth	r1, r1
 80053b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80053b8:	f84e 1b04 	str.w	r1, [lr], #4
 80053bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80053c0:	f8be 1000 	ldrh.w	r1, [lr]
 80053c4:	0c12      	lsrs	r2, r2, #16
 80053c6:	fb09 1102 	mla	r1, r9, r2, r1
 80053ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80053ce:	4567      	cmp	r7, ip
 80053d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80053d4:	d8e6      	bhi.n	80053a4 <__multiply+0x10c>
 80053d6:	9a01      	ldr	r2, [sp, #4]
 80053d8:	50a9      	str	r1, [r5, r2]
 80053da:	3504      	adds	r5, #4
 80053dc:	e79a      	b.n	8005314 <__multiply+0x7c>
 80053de:	3e01      	subs	r6, #1
 80053e0:	e79c      	b.n	800531c <__multiply+0x84>
 80053e2:	bf00      	nop
 80053e4:	08006d0b 	.word	0x08006d0b
 80053e8:	08006d1c 	.word	0x08006d1c

080053ec <__pow5mult>:
 80053ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f0:	4615      	mov	r5, r2
 80053f2:	f012 0203 	ands.w	r2, r2, #3
 80053f6:	4606      	mov	r6, r0
 80053f8:	460f      	mov	r7, r1
 80053fa:	d007      	beq.n	800540c <__pow5mult+0x20>
 80053fc:	4c25      	ldr	r4, [pc, #148]	; (8005494 <__pow5mult+0xa8>)
 80053fe:	3a01      	subs	r2, #1
 8005400:	2300      	movs	r3, #0
 8005402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005406:	f7ff fe9b 	bl	8005140 <__multadd>
 800540a:	4607      	mov	r7, r0
 800540c:	10ad      	asrs	r5, r5, #2
 800540e:	d03d      	beq.n	800548c <__pow5mult+0xa0>
 8005410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005412:	b97c      	cbnz	r4, 8005434 <__pow5mult+0x48>
 8005414:	2010      	movs	r0, #16
 8005416:	f7ff fe29 	bl	800506c <malloc>
 800541a:	4602      	mov	r2, r0
 800541c:	6270      	str	r0, [r6, #36]	; 0x24
 800541e:	b928      	cbnz	r0, 800542c <__pow5mult+0x40>
 8005420:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <__pow5mult+0xac>)
 8005422:	481e      	ldr	r0, [pc, #120]	; (800549c <__pow5mult+0xb0>)
 8005424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005428:	f000 fc0e 	bl	8005c48 <__assert_func>
 800542c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005430:	6004      	str	r4, [r0, #0]
 8005432:	60c4      	str	r4, [r0, #12]
 8005434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800543c:	b94c      	cbnz	r4, 8005452 <__pow5mult+0x66>
 800543e:	f240 2171 	movw	r1, #625	; 0x271
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ff12 	bl	800526c <__i2b>
 8005448:	2300      	movs	r3, #0
 800544a:	f8c8 0008 	str.w	r0, [r8, #8]
 800544e:	4604      	mov	r4, r0
 8005450:	6003      	str	r3, [r0, #0]
 8005452:	f04f 0900 	mov.w	r9, #0
 8005456:	07eb      	lsls	r3, r5, #31
 8005458:	d50a      	bpl.n	8005470 <__pow5mult+0x84>
 800545a:	4639      	mov	r1, r7
 800545c:	4622      	mov	r2, r4
 800545e:	4630      	mov	r0, r6
 8005460:	f7ff ff1a 	bl	8005298 <__multiply>
 8005464:	4639      	mov	r1, r7
 8005466:	4680      	mov	r8, r0
 8005468:	4630      	mov	r0, r6
 800546a:	f7ff fe47 	bl	80050fc <_Bfree>
 800546e:	4647      	mov	r7, r8
 8005470:	106d      	asrs	r5, r5, #1
 8005472:	d00b      	beq.n	800548c <__pow5mult+0xa0>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	b938      	cbnz	r0, 8005488 <__pow5mult+0x9c>
 8005478:	4622      	mov	r2, r4
 800547a:	4621      	mov	r1, r4
 800547c:	4630      	mov	r0, r6
 800547e:	f7ff ff0b 	bl	8005298 <__multiply>
 8005482:	6020      	str	r0, [r4, #0]
 8005484:	f8c0 9000 	str.w	r9, [r0]
 8005488:	4604      	mov	r4, r0
 800548a:	e7e4      	b.n	8005456 <__pow5mult+0x6a>
 800548c:	4638      	mov	r0, r7
 800548e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005492:	bf00      	nop
 8005494:	08006e68 	.word	0x08006e68
 8005498:	08006c99 	.word	0x08006c99
 800549c:	08006d1c 	.word	0x08006d1c

080054a0 <__lshift>:
 80054a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	460c      	mov	r4, r1
 80054a6:	6849      	ldr	r1, [r1, #4]
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	4607      	mov	r7, r0
 80054b2:	4691      	mov	r9, r2
 80054b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054b8:	f108 0601 	add.w	r6, r8, #1
 80054bc:	42b3      	cmp	r3, r6
 80054be:	db0b      	blt.n	80054d8 <__lshift+0x38>
 80054c0:	4638      	mov	r0, r7
 80054c2:	f7ff fddb 	bl	800507c <_Balloc>
 80054c6:	4605      	mov	r5, r0
 80054c8:	b948      	cbnz	r0, 80054de <__lshift+0x3e>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <__lshift+0xd8>)
 80054ce:	482b      	ldr	r0, [pc, #172]	; (800557c <__lshift+0xdc>)
 80054d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054d4:	f000 fbb8 	bl	8005c48 <__assert_func>
 80054d8:	3101      	adds	r1, #1
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	e7ee      	b.n	80054bc <__lshift+0x1c>
 80054de:	2300      	movs	r3, #0
 80054e0:	f100 0114 	add.w	r1, r0, #20
 80054e4:	f100 0210 	add.w	r2, r0, #16
 80054e8:	4618      	mov	r0, r3
 80054ea:	4553      	cmp	r3, sl
 80054ec:	db37      	blt.n	800555e <__lshift+0xbe>
 80054ee:	6920      	ldr	r0, [r4, #16]
 80054f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054f4:	f104 0314 	add.w	r3, r4, #20
 80054f8:	f019 091f 	ands.w	r9, r9, #31
 80054fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005504:	d02f      	beq.n	8005566 <__lshift+0xc6>
 8005506:	f1c9 0e20 	rsb	lr, r9, #32
 800550a:	468a      	mov	sl, r1
 800550c:	f04f 0c00 	mov.w	ip, #0
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	fa02 f209 	lsl.w	r2, r2, r9
 8005516:	ea42 020c 	orr.w	r2, r2, ip
 800551a:	f84a 2b04 	str.w	r2, [sl], #4
 800551e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005522:	4298      	cmp	r0, r3
 8005524:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005528:	d8f2      	bhi.n	8005510 <__lshift+0x70>
 800552a:	1b03      	subs	r3, r0, r4
 800552c:	3b15      	subs	r3, #21
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	3304      	adds	r3, #4
 8005534:	f104 0215 	add.w	r2, r4, #21
 8005538:	4290      	cmp	r0, r2
 800553a:	bf38      	it	cc
 800553c:	2304      	movcc	r3, #4
 800553e:	f841 c003 	str.w	ip, [r1, r3]
 8005542:	f1bc 0f00 	cmp.w	ip, #0
 8005546:	d001      	beq.n	800554c <__lshift+0xac>
 8005548:	f108 0602 	add.w	r6, r8, #2
 800554c:	3e01      	subs	r6, #1
 800554e:	4638      	mov	r0, r7
 8005550:	612e      	str	r6, [r5, #16]
 8005552:	4621      	mov	r1, r4
 8005554:	f7ff fdd2 	bl	80050fc <_Bfree>
 8005558:	4628      	mov	r0, r5
 800555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005562:	3301      	adds	r3, #1
 8005564:	e7c1      	b.n	80054ea <__lshift+0x4a>
 8005566:	3904      	subs	r1, #4
 8005568:	f853 2b04 	ldr.w	r2, [r3], #4
 800556c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005570:	4298      	cmp	r0, r3
 8005572:	d8f9      	bhi.n	8005568 <__lshift+0xc8>
 8005574:	e7ea      	b.n	800554c <__lshift+0xac>
 8005576:	bf00      	nop
 8005578:	08006d0b 	.word	0x08006d0b
 800557c:	08006d1c 	.word	0x08006d1c

08005580 <__mcmp>:
 8005580:	b530      	push	{r4, r5, lr}
 8005582:	6902      	ldr	r2, [r0, #16]
 8005584:	690c      	ldr	r4, [r1, #16]
 8005586:	1b12      	subs	r2, r2, r4
 8005588:	d10e      	bne.n	80055a8 <__mcmp+0x28>
 800558a:	f100 0314 	add.w	r3, r0, #20
 800558e:	3114      	adds	r1, #20
 8005590:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005594:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005598:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800559c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80055a0:	42a5      	cmp	r5, r4
 80055a2:	d003      	beq.n	80055ac <__mcmp+0x2c>
 80055a4:	d305      	bcc.n	80055b2 <__mcmp+0x32>
 80055a6:	2201      	movs	r2, #1
 80055a8:	4610      	mov	r0, r2
 80055aa:	bd30      	pop	{r4, r5, pc}
 80055ac:	4283      	cmp	r3, r0
 80055ae:	d3f3      	bcc.n	8005598 <__mcmp+0x18>
 80055b0:	e7fa      	b.n	80055a8 <__mcmp+0x28>
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	e7f7      	b.n	80055a8 <__mcmp+0x28>

080055b8 <__mdiff>:
 80055b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	460c      	mov	r4, r1
 80055be:	4606      	mov	r6, r0
 80055c0:	4611      	mov	r1, r2
 80055c2:	4620      	mov	r0, r4
 80055c4:	4690      	mov	r8, r2
 80055c6:	f7ff ffdb 	bl	8005580 <__mcmp>
 80055ca:	1e05      	subs	r5, r0, #0
 80055cc:	d110      	bne.n	80055f0 <__mdiff+0x38>
 80055ce:	4629      	mov	r1, r5
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff fd53 	bl	800507c <_Balloc>
 80055d6:	b930      	cbnz	r0, 80055e6 <__mdiff+0x2e>
 80055d8:	4b3a      	ldr	r3, [pc, #232]	; (80056c4 <__mdiff+0x10c>)
 80055da:	4602      	mov	r2, r0
 80055dc:	f240 2132 	movw	r1, #562	; 0x232
 80055e0:	4839      	ldr	r0, [pc, #228]	; (80056c8 <__mdiff+0x110>)
 80055e2:	f000 fb31 	bl	8005c48 <__assert_func>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f0:	bfa4      	itt	ge
 80055f2:	4643      	movge	r3, r8
 80055f4:	46a0      	movge	r8, r4
 80055f6:	4630      	mov	r0, r6
 80055f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80055fc:	bfa6      	itte	ge
 80055fe:	461c      	movge	r4, r3
 8005600:	2500      	movge	r5, #0
 8005602:	2501      	movlt	r5, #1
 8005604:	f7ff fd3a 	bl	800507c <_Balloc>
 8005608:	b920      	cbnz	r0, 8005614 <__mdiff+0x5c>
 800560a:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <__mdiff+0x10c>)
 800560c:	4602      	mov	r2, r0
 800560e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005612:	e7e5      	b.n	80055e0 <__mdiff+0x28>
 8005614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005618:	6926      	ldr	r6, [r4, #16]
 800561a:	60c5      	str	r5, [r0, #12]
 800561c:	f104 0914 	add.w	r9, r4, #20
 8005620:	f108 0514 	add.w	r5, r8, #20
 8005624:	f100 0e14 	add.w	lr, r0, #20
 8005628:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800562c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005630:	f108 0210 	add.w	r2, r8, #16
 8005634:	46f2      	mov	sl, lr
 8005636:	2100      	movs	r1, #0
 8005638:	f859 3b04 	ldr.w	r3, [r9], #4
 800563c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005640:	fa1f f883 	uxth.w	r8, r3
 8005644:	fa11 f18b 	uxtah	r1, r1, fp
 8005648:	0c1b      	lsrs	r3, r3, #16
 800564a:	eba1 0808 	sub.w	r8, r1, r8
 800564e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005652:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005656:	fa1f f888 	uxth.w	r8, r8
 800565a:	1419      	asrs	r1, r3, #16
 800565c:	454e      	cmp	r6, r9
 800565e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005662:	f84a 3b04 	str.w	r3, [sl], #4
 8005666:	d8e7      	bhi.n	8005638 <__mdiff+0x80>
 8005668:	1b33      	subs	r3, r6, r4
 800566a:	3b15      	subs	r3, #21
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	3304      	adds	r3, #4
 8005672:	3415      	adds	r4, #21
 8005674:	42a6      	cmp	r6, r4
 8005676:	bf38      	it	cc
 8005678:	2304      	movcc	r3, #4
 800567a:	441d      	add	r5, r3
 800567c:	4473      	add	r3, lr
 800567e:	469e      	mov	lr, r3
 8005680:	462e      	mov	r6, r5
 8005682:	4566      	cmp	r6, ip
 8005684:	d30e      	bcc.n	80056a4 <__mdiff+0xec>
 8005686:	f10c 0203 	add.w	r2, ip, #3
 800568a:	1b52      	subs	r2, r2, r5
 800568c:	f022 0203 	bic.w	r2, r2, #3
 8005690:	3d03      	subs	r5, #3
 8005692:	45ac      	cmp	ip, r5
 8005694:	bf38      	it	cc
 8005696:	2200      	movcc	r2, #0
 8005698:	441a      	add	r2, r3
 800569a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800569e:	b17b      	cbz	r3, 80056c0 <__mdiff+0x108>
 80056a0:	6107      	str	r7, [r0, #16]
 80056a2:	e7a3      	b.n	80055ec <__mdiff+0x34>
 80056a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80056a8:	fa11 f288 	uxtah	r2, r1, r8
 80056ac:	1414      	asrs	r4, r2, #16
 80056ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80056b2:	b292      	uxth	r2, r2
 80056b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80056b8:	f84e 2b04 	str.w	r2, [lr], #4
 80056bc:	1421      	asrs	r1, r4, #16
 80056be:	e7e0      	b.n	8005682 <__mdiff+0xca>
 80056c0:	3f01      	subs	r7, #1
 80056c2:	e7ea      	b.n	800569a <__mdiff+0xe2>
 80056c4:	08006d0b 	.word	0x08006d0b
 80056c8:	08006d1c 	.word	0x08006d1c

080056cc <__d2b>:
 80056cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056d0:	4689      	mov	r9, r1
 80056d2:	2101      	movs	r1, #1
 80056d4:	ec57 6b10 	vmov	r6, r7, d0
 80056d8:	4690      	mov	r8, r2
 80056da:	f7ff fccf 	bl	800507c <_Balloc>
 80056de:	4604      	mov	r4, r0
 80056e0:	b930      	cbnz	r0, 80056f0 <__d2b+0x24>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <__d2b+0xb0>)
 80056e6:	4826      	ldr	r0, [pc, #152]	; (8005780 <__d2b+0xb4>)
 80056e8:	f240 310a 	movw	r1, #778	; 0x30a
 80056ec:	f000 faac 	bl	8005c48 <__assert_func>
 80056f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80056f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056f8:	bb35      	cbnz	r5, 8005748 <__d2b+0x7c>
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	d028      	beq.n	8005752 <__d2b+0x86>
 8005700:	4668      	mov	r0, sp
 8005702:	9600      	str	r6, [sp, #0]
 8005704:	f7ff fd82 	bl	800520c <__lo0bits>
 8005708:	9900      	ldr	r1, [sp, #0]
 800570a:	b300      	cbz	r0, 800574e <__d2b+0x82>
 800570c:	9a01      	ldr	r2, [sp, #4]
 800570e:	f1c0 0320 	rsb	r3, r0, #32
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	430b      	orrs	r3, r1
 8005718:	40c2      	lsrs	r2, r0
 800571a:	6163      	str	r3, [r4, #20]
 800571c:	9201      	str	r2, [sp, #4]
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	61a3      	str	r3, [r4, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2202      	movne	r2, #2
 8005728:	2201      	moveq	r2, #1
 800572a:	6122      	str	r2, [r4, #16]
 800572c:	b1d5      	cbz	r5, 8005764 <__d2b+0x98>
 800572e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005732:	4405      	add	r5, r0
 8005734:	f8c9 5000 	str.w	r5, [r9]
 8005738:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800573c:	f8c8 0000 	str.w	r0, [r8]
 8005740:	4620      	mov	r0, r4
 8005742:	b003      	add	sp, #12
 8005744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800574c:	e7d5      	b.n	80056fa <__d2b+0x2e>
 800574e:	6161      	str	r1, [r4, #20]
 8005750:	e7e5      	b.n	800571e <__d2b+0x52>
 8005752:	a801      	add	r0, sp, #4
 8005754:	f7ff fd5a 	bl	800520c <__lo0bits>
 8005758:	9b01      	ldr	r3, [sp, #4]
 800575a:	6163      	str	r3, [r4, #20]
 800575c:	2201      	movs	r2, #1
 800575e:	6122      	str	r2, [r4, #16]
 8005760:	3020      	adds	r0, #32
 8005762:	e7e3      	b.n	800572c <__d2b+0x60>
 8005764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800576c:	f8c9 0000 	str.w	r0, [r9]
 8005770:	6918      	ldr	r0, [r3, #16]
 8005772:	f7ff fd2b 	bl	80051cc <__hi0bits>
 8005776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800577a:	e7df      	b.n	800573c <__d2b+0x70>
 800577c:	08006d0b 	.word	0x08006d0b
 8005780:	08006d1c 	.word	0x08006d1c

08005784 <_calloc_r>:
 8005784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005786:	fba1 2402 	umull	r2, r4, r1, r2
 800578a:	b94c      	cbnz	r4, 80057a0 <_calloc_r+0x1c>
 800578c:	4611      	mov	r1, r2
 800578e:	9201      	str	r2, [sp, #4]
 8005790:	f000 f87a 	bl	8005888 <_malloc_r>
 8005794:	9a01      	ldr	r2, [sp, #4]
 8005796:	4605      	mov	r5, r0
 8005798:	b930      	cbnz	r0, 80057a8 <_calloc_r+0x24>
 800579a:	4628      	mov	r0, r5
 800579c:	b003      	add	sp, #12
 800579e:	bd30      	pop	{r4, r5, pc}
 80057a0:	220c      	movs	r2, #12
 80057a2:	6002      	str	r2, [r0, #0]
 80057a4:	2500      	movs	r5, #0
 80057a6:	e7f8      	b.n	800579a <_calloc_r+0x16>
 80057a8:	4621      	mov	r1, r4
 80057aa:	f7fe f923 	bl	80039f4 <memset>
 80057ae:	e7f4      	b.n	800579a <_calloc_r+0x16>

080057b0 <_free_r>:
 80057b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d044      	beq.n	8005840 <_free_r+0x90>
 80057b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ba:	9001      	str	r0, [sp, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f1a1 0404 	sub.w	r4, r1, #4
 80057c2:	bfb8      	it	lt
 80057c4:	18e4      	addlt	r4, r4, r3
 80057c6:	f000 fa9b 	bl	8005d00 <__malloc_lock>
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <_free_r+0x94>)
 80057cc:	9801      	ldr	r0, [sp, #4]
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	b933      	cbnz	r3, 80057e0 <_free_r+0x30>
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	6014      	str	r4, [r2, #0]
 80057d6:	b003      	add	sp, #12
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	f000 ba96 	b.w	8005d0c <__malloc_unlock>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d908      	bls.n	80057f6 <_free_r+0x46>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf01      	itttt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	1949      	addeq	r1, r1, r5
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	e7ed      	b.n	80057d2 <_free_r+0x22>
 80057f6:	461a      	mov	r2, r3
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b10b      	cbz	r3, 8005800 <_free_r+0x50>
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d9fa      	bls.n	80057f6 <_free_r+0x46>
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	1855      	adds	r5, r2, r1
 8005804:	42a5      	cmp	r5, r4
 8005806:	d10b      	bne.n	8005820 <_free_r+0x70>
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	4421      	add	r1, r4
 800580c:	1854      	adds	r4, r2, r1
 800580e:	42a3      	cmp	r3, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	d1e0      	bne.n	80057d6 <_free_r+0x26>
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	4421      	add	r1, r4
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	e7da      	b.n	80057d6 <_free_r+0x26>
 8005820:	d902      	bls.n	8005828 <_free_r+0x78>
 8005822:	230c      	movs	r3, #12
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	e7d6      	b.n	80057d6 <_free_r+0x26>
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1961      	adds	r1, r4, r5
 800582c:	428b      	cmp	r3, r1
 800582e:	bf04      	itt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	bf04      	itt	eq
 8005838:	1949      	addeq	r1, r1, r5
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	6054      	str	r4, [r2, #4]
 800583e:	e7ca      	b.n	80057d6 <_free_r+0x26>
 8005840:	b003      	add	sp, #12
 8005842:	bd30      	pop	{r4, r5, pc}
 8005844:	200003a4 	.word	0x200003a4

08005848 <sbrk_aligned>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4e0e      	ldr	r6, [pc, #56]	; (8005884 <sbrk_aligned+0x3c>)
 800584c:	460c      	mov	r4, r1
 800584e:	6831      	ldr	r1, [r6, #0]
 8005850:	4605      	mov	r5, r0
 8005852:	b911      	cbnz	r1, 800585a <sbrk_aligned+0x12>
 8005854:	f000 f9e8 	bl	8005c28 <_sbrk_r>
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f9e3 	bl	8005c28 <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d00a      	beq.n	800587c <sbrk_aligned+0x34>
 8005866:	1cc4      	adds	r4, r0, #3
 8005868:	f024 0403 	bic.w	r4, r4, #3
 800586c:	42a0      	cmp	r0, r4
 800586e:	d007      	beq.n	8005880 <sbrk_aligned+0x38>
 8005870:	1a21      	subs	r1, r4, r0
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f9d8 	bl	8005c28 <_sbrk_r>
 8005878:	3001      	adds	r0, #1
 800587a:	d101      	bne.n	8005880 <sbrk_aligned+0x38>
 800587c:	f04f 34ff 	mov.w	r4, #4294967295
 8005880:	4620      	mov	r0, r4
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	200003a8 	.word	0x200003a8

08005888 <_malloc_r>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	1ccd      	adds	r5, r1, #3
 800588e:	f025 0503 	bic.w	r5, r5, #3
 8005892:	3508      	adds	r5, #8
 8005894:	2d0c      	cmp	r5, #12
 8005896:	bf38      	it	cc
 8005898:	250c      	movcc	r5, #12
 800589a:	2d00      	cmp	r5, #0
 800589c:	4607      	mov	r7, r0
 800589e:	db01      	blt.n	80058a4 <_malloc_r+0x1c>
 80058a0:	42a9      	cmp	r1, r5
 80058a2:	d905      	bls.n	80058b0 <_malloc_r+0x28>
 80058a4:	230c      	movs	r3, #12
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	2600      	movs	r6, #0
 80058aa:	4630      	mov	r0, r6
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b0:	4e2e      	ldr	r6, [pc, #184]	; (800596c <_malloc_r+0xe4>)
 80058b2:	f000 fa25 	bl	8005d00 <__malloc_lock>
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	461c      	mov	r4, r3
 80058ba:	bb34      	cbnz	r4, 800590a <_malloc_r+0x82>
 80058bc:	4629      	mov	r1, r5
 80058be:	4638      	mov	r0, r7
 80058c0:	f7ff ffc2 	bl	8005848 <sbrk_aligned>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	4604      	mov	r4, r0
 80058c8:	d14d      	bne.n	8005966 <_malloc_r+0xde>
 80058ca:	6834      	ldr	r4, [r6, #0]
 80058cc:	4626      	mov	r6, r4
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d140      	bne.n	8005954 <_malloc_r+0xcc>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4631      	mov	r1, r6
 80058d6:	4638      	mov	r0, r7
 80058d8:	eb04 0803 	add.w	r8, r4, r3
 80058dc:	f000 f9a4 	bl	8005c28 <_sbrk_r>
 80058e0:	4580      	cmp	r8, r0
 80058e2:	d13a      	bne.n	800595a <_malloc_r+0xd2>
 80058e4:	6821      	ldr	r1, [r4, #0]
 80058e6:	3503      	adds	r5, #3
 80058e8:	1a6d      	subs	r5, r5, r1
 80058ea:	f025 0503 	bic.w	r5, r5, #3
 80058ee:	3508      	adds	r5, #8
 80058f0:	2d0c      	cmp	r5, #12
 80058f2:	bf38      	it	cc
 80058f4:	250c      	movcc	r5, #12
 80058f6:	4629      	mov	r1, r5
 80058f8:	4638      	mov	r0, r7
 80058fa:	f7ff ffa5 	bl	8005848 <sbrk_aligned>
 80058fe:	3001      	adds	r0, #1
 8005900:	d02b      	beq.n	800595a <_malloc_r+0xd2>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	442b      	add	r3, r5
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	e00e      	b.n	8005928 <_malloc_r+0xa0>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	1b52      	subs	r2, r2, r5
 800590e:	d41e      	bmi.n	800594e <_malloc_r+0xc6>
 8005910:	2a0b      	cmp	r2, #11
 8005912:	d916      	bls.n	8005942 <_malloc_r+0xba>
 8005914:	1961      	adds	r1, r4, r5
 8005916:	42a3      	cmp	r3, r4
 8005918:	6025      	str	r5, [r4, #0]
 800591a:	bf18      	it	ne
 800591c:	6059      	strne	r1, [r3, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	bf08      	it	eq
 8005922:	6031      	streq	r1, [r6, #0]
 8005924:	5162      	str	r2, [r4, r5]
 8005926:	604b      	str	r3, [r1, #4]
 8005928:	4638      	mov	r0, r7
 800592a:	f104 060b 	add.w	r6, r4, #11
 800592e:	f000 f9ed 	bl	8005d0c <__malloc_unlock>
 8005932:	f026 0607 	bic.w	r6, r6, #7
 8005936:	1d23      	adds	r3, r4, #4
 8005938:	1af2      	subs	r2, r6, r3
 800593a:	d0b6      	beq.n	80058aa <_malloc_r+0x22>
 800593c:	1b9b      	subs	r3, r3, r6
 800593e:	50a3      	str	r3, [r4, r2]
 8005940:	e7b3      	b.n	80058aa <_malloc_r+0x22>
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	42a3      	cmp	r3, r4
 8005946:	bf0c      	ite	eq
 8005948:	6032      	streq	r2, [r6, #0]
 800594a:	605a      	strne	r2, [r3, #4]
 800594c:	e7ec      	b.n	8005928 <_malloc_r+0xa0>
 800594e:	4623      	mov	r3, r4
 8005950:	6864      	ldr	r4, [r4, #4]
 8005952:	e7b2      	b.n	80058ba <_malloc_r+0x32>
 8005954:	4634      	mov	r4, r6
 8005956:	6876      	ldr	r6, [r6, #4]
 8005958:	e7b9      	b.n	80058ce <_malloc_r+0x46>
 800595a:	230c      	movs	r3, #12
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4638      	mov	r0, r7
 8005960:	f000 f9d4 	bl	8005d0c <__malloc_unlock>
 8005964:	e7a1      	b.n	80058aa <_malloc_r+0x22>
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	e7de      	b.n	8005928 <_malloc_r+0xa0>
 800596a:	bf00      	nop
 800596c:	200003a4 	.word	0x200003a4

08005970 <__ssputs_r>:
 8005970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	688e      	ldr	r6, [r1, #8]
 8005976:	429e      	cmp	r6, r3
 8005978:	4682      	mov	sl, r0
 800597a:	460c      	mov	r4, r1
 800597c:	4690      	mov	r8, r2
 800597e:	461f      	mov	r7, r3
 8005980:	d838      	bhi.n	80059f4 <__ssputs_r+0x84>
 8005982:	898a      	ldrh	r2, [r1, #12]
 8005984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005988:	d032      	beq.n	80059f0 <__ssputs_r+0x80>
 800598a:	6825      	ldr	r5, [r4, #0]
 800598c:	6909      	ldr	r1, [r1, #16]
 800598e:	eba5 0901 	sub.w	r9, r5, r1
 8005992:	6965      	ldr	r5, [r4, #20]
 8005994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800599c:	3301      	adds	r3, #1
 800599e:	444b      	add	r3, r9
 80059a0:	106d      	asrs	r5, r5, #1
 80059a2:	429d      	cmp	r5, r3
 80059a4:	bf38      	it	cc
 80059a6:	461d      	movcc	r5, r3
 80059a8:	0553      	lsls	r3, r2, #21
 80059aa:	d531      	bpl.n	8005a10 <__ssputs_r+0xa0>
 80059ac:	4629      	mov	r1, r5
 80059ae:	f7ff ff6b 	bl	8005888 <_malloc_r>
 80059b2:	4606      	mov	r6, r0
 80059b4:	b950      	cbnz	r0, 80059cc <__ssputs_r+0x5c>
 80059b6:	230c      	movs	r3, #12
 80059b8:	f8ca 3000 	str.w	r3, [sl]
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059cc:	6921      	ldr	r1, [r4, #16]
 80059ce:	464a      	mov	r2, r9
 80059d0:	f7fe f802 	bl	80039d8 <memcpy>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	6126      	str	r6, [r4, #16]
 80059e2:	6165      	str	r5, [r4, #20]
 80059e4:	444e      	add	r6, r9
 80059e6:	eba5 0509 	sub.w	r5, r5, r9
 80059ea:	6026      	str	r6, [r4, #0]
 80059ec:	60a5      	str	r5, [r4, #8]
 80059ee:	463e      	mov	r6, r7
 80059f0:	42be      	cmp	r6, r7
 80059f2:	d900      	bls.n	80059f6 <__ssputs_r+0x86>
 80059f4:	463e      	mov	r6, r7
 80059f6:	6820      	ldr	r0, [r4, #0]
 80059f8:	4632      	mov	r2, r6
 80059fa:	4641      	mov	r1, r8
 80059fc:	f000 f966 	bl	8005ccc <memmove>
 8005a00:	68a3      	ldr	r3, [r4, #8]
 8005a02:	1b9b      	subs	r3, r3, r6
 8005a04:	60a3      	str	r3, [r4, #8]
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	4433      	add	r3, r6
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e7db      	b.n	80059c8 <__ssputs_r+0x58>
 8005a10:	462a      	mov	r2, r5
 8005a12:	f000 f981 	bl	8005d18 <_realloc_r>
 8005a16:	4606      	mov	r6, r0
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d1e1      	bne.n	80059e0 <__ssputs_r+0x70>
 8005a1c:	6921      	ldr	r1, [r4, #16]
 8005a1e:	4650      	mov	r0, sl
 8005a20:	f7ff fec6 	bl	80057b0 <_free_r>
 8005a24:	e7c7      	b.n	80059b6 <__ssputs_r+0x46>
	...

08005a28 <_svfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	4698      	mov	r8, r3
 8005a2e:	898b      	ldrh	r3, [r1, #12]
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	b09d      	sub	sp, #116	; 0x74
 8005a34:	4607      	mov	r7, r0
 8005a36:	460d      	mov	r5, r1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	d50e      	bpl.n	8005a5a <_svfiprintf_r+0x32>
 8005a3c:	690b      	ldr	r3, [r1, #16]
 8005a3e:	b963      	cbnz	r3, 8005a5a <_svfiprintf_r+0x32>
 8005a40:	2140      	movs	r1, #64	; 0x40
 8005a42:	f7ff ff21 	bl	8005888 <_malloc_r>
 8005a46:	6028      	str	r0, [r5, #0]
 8005a48:	6128      	str	r0, [r5, #16]
 8005a4a:	b920      	cbnz	r0, 8005a56 <_svfiprintf_r+0x2e>
 8005a4c:	230c      	movs	r3, #12
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e0d1      	b.n	8005bfa <_svfiprintf_r+0x1d2>
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	616b      	str	r3, [r5, #20]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5e:	2320      	movs	r3, #32
 8005a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a68:	2330      	movs	r3, #48	; 0x30
 8005a6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c14 <_svfiprintf_r+0x1ec>
 8005a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a72:	f04f 0901 	mov.w	r9, #1
 8005a76:	4623      	mov	r3, r4
 8005a78:	469a      	mov	sl, r3
 8005a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a7e:	b10a      	cbz	r2, 8005a84 <_svfiprintf_r+0x5c>
 8005a80:	2a25      	cmp	r2, #37	; 0x25
 8005a82:	d1f9      	bne.n	8005a78 <_svfiprintf_r+0x50>
 8005a84:	ebba 0b04 	subs.w	fp, sl, r4
 8005a88:	d00b      	beq.n	8005aa2 <_svfiprintf_r+0x7a>
 8005a8a:	465b      	mov	r3, fp
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff ff6d 	bl	8005970 <__ssputs_r>
 8005a96:	3001      	adds	r0, #1
 8005a98:	f000 80aa 	beq.w	8005bf0 <_svfiprintf_r+0x1c8>
 8005a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a9e:	445a      	add	r2, fp
 8005aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8005aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80a2 	beq.w	8005bf0 <_svfiprintf_r+0x1c8>
 8005aac:	2300      	movs	r3, #0
 8005aae:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab6:	f10a 0a01 	add.w	sl, sl, #1
 8005aba:	9304      	str	r3, [sp, #16]
 8005abc:	9307      	str	r3, [sp, #28]
 8005abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ac4:	4654      	mov	r4, sl
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005acc:	4851      	ldr	r0, [pc, #324]	; (8005c14 <_svfiprintf_r+0x1ec>)
 8005ace:	f7fa fb87 	bl	80001e0 <memchr>
 8005ad2:	9a04      	ldr	r2, [sp, #16]
 8005ad4:	b9d8      	cbnz	r0, 8005b0e <_svfiprintf_r+0xe6>
 8005ad6:	06d0      	lsls	r0, r2, #27
 8005ad8:	bf44      	itt	mi
 8005ada:	2320      	movmi	r3, #32
 8005adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ae0:	0711      	lsls	r1, r2, #28
 8005ae2:	bf44      	itt	mi
 8005ae4:	232b      	movmi	r3, #43	; 0x2b
 8005ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aea:	f89a 3000 	ldrb.w	r3, [sl]
 8005aee:	2b2a      	cmp	r3, #42	; 0x2a
 8005af0:	d015      	beq.n	8005b1e <_svfiprintf_r+0xf6>
 8005af2:	9a07      	ldr	r2, [sp, #28]
 8005af4:	4654      	mov	r4, sl
 8005af6:	2000      	movs	r0, #0
 8005af8:	f04f 0c0a 	mov.w	ip, #10
 8005afc:	4621      	mov	r1, r4
 8005afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b02:	3b30      	subs	r3, #48	; 0x30
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d94e      	bls.n	8005ba6 <_svfiprintf_r+0x17e>
 8005b08:	b1b0      	cbz	r0, 8005b38 <_svfiprintf_r+0x110>
 8005b0a:	9207      	str	r2, [sp, #28]
 8005b0c:	e014      	b.n	8005b38 <_svfiprintf_r+0x110>
 8005b0e:	eba0 0308 	sub.w	r3, r0, r8
 8005b12:	fa09 f303 	lsl.w	r3, r9, r3
 8005b16:	4313      	orrs	r3, r2
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	46a2      	mov	sl, r4
 8005b1c:	e7d2      	b.n	8005ac4 <_svfiprintf_r+0x9c>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	1d19      	adds	r1, r3, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	9103      	str	r1, [sp, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bfbb      	ittet	lt
 8005b2a:	425b      	neglt	r3, r3
 8005b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b30:	9307      	strge	r3, [sp, #28]
 8005b32:	9307      	strlt	r3, [sp, #28]
 8005b34:	bfb8      	it	lt
 8005b36:	9204      	strlt	r2, [sp, #16]
 8005b38:	7823      	ldrb	r3, [r4, #0]
 8005b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b3c:	d10c      	bne.n	8005b58 <_svfiprintf_r+0x130>
 8005b3e:	7863      	ldrb	r3, [r4, #1]
 8005b40:	2b2a      	cmp	r3, #42	; 0x2a
 8005b42:	d135      	bne.n	8005bb0 <_svfiprintf_r+0x188>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	9203      	str	r2, [sp, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bfb8      	it	lt
 8005b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b54:	3402      	adds	r4, #2
 8005b56:	9305      	str	r3, [sp, #20]
 8005b58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c24 <_svfiprintf_r+0x1fc>
 8005b5c:	7821      	ldrb	r1, [r4, #0]
 8005b5e:	2203      	movs	r2, #3
 8005b60:	4650      	mov	r0, sl
 8005b62:	f7fa fb3d 	bl	80001e0 <memchr>
 8005b66:	b140      	cbz	r0, 8005b7a <_svfiprintf_r+0x152>
 8005b68:	2340      	movs	r3, #64	; 0x40
 8005b6a:	eba0 000a 	sub.w	r0, r0, sl
 8005b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b72:	9b04      	ldr	r3, [sp, #16]
 8005b74:	4303      	orrs	r3, r0
 8005b76:	3401      	adds	r4, #1
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7e:	4826      	ldr	r0, [pc, #152]	; (8005c18 <_svfiprintf_r+0x1f0>)
 8005b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b84:	2206      	movs	r2, #6
 8005b86:	f7fa fb2b 	bl	80001e0 <memchr>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d038      	beq.n	8005c00 <_svfiprintf_r+0x1d8>
 8005b8e:	4b23      	ldr	r3, [pc, #140]	; (8005c1c <_svfiprintf_r+0x1f4>)
 8005b90:	bb1b      	cbnz	r3, 8005bda <_svfiprintf_r+0x1b2>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	3307      	adds	r3, #7
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	9303      	str	r3, [sp, #12]
 8005b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba0:	4433      	add	r3, r6
 8005ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba4:	e767      	b.n	8005a76 <_svfiprintf_r+0x4e>
 8005ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005baa:	460c      	mov	r4, r1
 8005bac:	2001      	movs	r0, #1
 8005bae:	e7a5      	b.n	8005afc <_svfiprintf_r+0xd4>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	3401      	adds	r4, #1
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f04f 0c0a 	mov.w	ip, #10
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bc2:	3a30      	subs	r2, #48	; 0x30
 8005bc4:	2a09      	cmp	r2, #9
 8005bc6:	d903      	bls.n	8005bd0 <_svfiprintf_r+0x1a8>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0c5      	beq.n	8005b58 <_svfiprintf_r+0x130>
 8005bcc:	9105      	str	r1, [sp, #20]
 8005bce:	e7c3      	b.n	8005b58 <_svfiprintf_r+0x130>
 8005bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e7f0      	b.n	8005bbc <_svfiprintf_r+0x194>
 8005bda:	ab03      	add	r3, sp, #12
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	462a      	mov	r2, r5
 8005be0:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <_svfiprintf_r+0x1f8>)
 8005be2:	a904      	add	r1, sp, #16
 8005be4:	4638      	mov	r0, r7
 8005be6:	f7fd ffad 	bl	8003b44 <_printf_float>
 8005bea:	1c42      	adds	r2, r0, #1
 8005bec:	4606      	mov	r6, r0
 8005bee:	d1d6      	bne.n	8005b9e <_svfiprintf_r+0x176>
 8005bf0:	89ab      	ldrh	r3, [r5, #12]
 8005bf2:	065b      	lsls	r3, r3, #25
 8005bf4:	f53f af2c 	bmi.w	8005a50 <_svfiprintf_r+0x28>
 8005bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bfa:	b01d      	add	sp, #116	; 0x74
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	ab03      	add	r3, sp, #12
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	462a      	mov	r2, r5
 8005c06:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <_svfiprintf_r+0x1f8>)
 8005c08:	a904      	add	r1, sp, #16
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	f7fe fa3e 	bl	800408c <_printf_i>
 8005c10:	e7eb      	b.n	8005bea <_svfiprintf_r+0x1c2>
 8005c12:	bf00      	nop
 8005c14:	08006e74 	.word	0x08006e74
 8005c18:	08006e7e 	.word	0x08006e7e
 8005c1c:	08003b45 	.word	0x08003b45
 8005c20:	08005971 	.word	0x08005971
 8005c24:	08006e7a 	.word	0x08006e7a

08005c28 <_sbrk_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d06      	ldr	r5, [pc, #24]	; (8005c44 <_sbrk_r+0x1c>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	f7fb fbe4 	bl	8001400 <_sbrk>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_sbrk_r+0x1a>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_sbrk_r+0x1a>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	200003ac 	.word	0x200003ac

08005c48 <__assert_func>:
 8005c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <__assert_func+0x2c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4605      	mov	r5, r0
 8005c54:	68d8      	ldr	r0, [r3, #12]
 8005c56:	b14c      	cbz	r4, 8005c6c <__assert_func+0x24>
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <__assert_func+0x30>)
 8005c5a:	9100      	str	r1, [sp, #0]
 8005c5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c60:	4906      	ldr	r1, [pc, #24]	; (8005c7c <__assert_func+0x34>)
 8005c62:	462b      	mov	r3, r5
 8005c64:	f000 f80e 	bl	8005c84 <fiprintf>
 8005c68:	f000 faac 	bl	80061c4 <abort>
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <__assert_func+0x38>)
 8005c6e:	461c      	mov	r4, r3
 8005c70:	e7f3      	b.n	8005c5a <__assert_func+0x12>
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	08006e85 	.word	0x08006e85
 8005c7c:	08006e92 	.word	0x08006e92
 8005c80:	08006965 	.word	0x08006965

08005c84 <fiprintf>:
 8005c84:	b40e      	push	{r1, r2, r3}
 8005c86:	b503      	push	{r0, r1, lr}
 8005c88:	4601      	mov	r1, r0
 8005c8a:	ab03      	add	r3, sp, #12
 8005c8c:	4805      	ldr	r0, [pc, #20]	; (8005ca4 <fiprintf+0x20>)
 8005c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c92:	6800      	ldr	r0, [r0, #0]
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	f000 f897 	bl	8005dc8 <_vfiprintf_r>
 8005c9a:	b002      	add	sp, #8
 8005c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca0:	b003      	add	sp, #12
 8005ca2:	4770      	bx	lr
 8005ca4:	2000000c 	.word	0x2000000c

08005ca8 <__ascii_mbtowc>:
 8005ca8:	b082      	sub	sp, #8
 8005caa:	b901      	cbnz	r1, 8005cae <__ascii_mbtowc+0x6>
 8005cac:	a901      	add	r1, sp, #4
 8005cae:	b142      	cbz	r2, 8005cc2 <__ascii_mbtowc+0x1a>
 8005cb0:	b14b      	cbz	r3, 8005cc6 <__ascii_mbtowc+0x1e>
 8005cb2:	7813      	ldrb	r3, [r2, #0]
 8005cb4:	600b      	str	r3, [r1, #0]
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	1e10      	subs	r0, r2, #0
 8005cba:	bf18      	it	ne
 8005cbc:	2001      	movne	r0, #1
 8005cbe:	b002      	add	sp, #8
 8005cc0:	4770      	bx	lr
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	e7fb      	b.n	8005cbe <__ascii_mbtowc+0x16>
 8005cc6:	f06f 0001 	mvn.w	r0, #1
 8005cca:	e7f8      	b.n	8005cbe <__ascii_mbtowc+0x16>

08005ccc <memmove>:
 8005ccc:	4288      	cmp	r0, r1
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	eb01 0402 	add.w	r4, r1, r2
 8005cd4:	d902      	bls.n	8005cdc <memmove+0x10>
 8005cd6:	4284      	cmp	r4, r0
 8005cd8:	4623      	mov	r3, r4
 8005cda:	d807      	bhi.n	8005cec <memmove+0x20>
 8005cdc:	1e43      	subs	r3, r0, #1
 8005cde:	42a1      	cmp	r1, r4
 8005ce0:	d008      	beq.n	8005cf4 <memmove+0x28>
 8005ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cea:	e7f8      	b.n	8005cde <memmove+0x12>
 8005cec:	4402      	add	r2, r0
 8005cee:	4601      	mov	r1, r0
 8005cf0:	428a      	cmp	r2, r1
 8005cf2:	d100      	bne.n	8005cf6 <memmove+0x2a>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cfe:	e7f7      	b.n	8005cf0 <memmove+0x24>

08005d00 <__malloc_lock>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__malloc_lock+0x8>)
 8005d02:	f000 bc1f 	b.w	8006544 <__retarget_lock_acquire_recursive>
 8005d06:	bf00      	nop
 8005d08:	200003b0 	.word	0x200003b0

08005d0c <__malloc_unlock>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__malloc_unlock+0x8>)
 8005d0e:	f000 bc1a 	b.w	8006546 <__retarget_lock_release_recursive>
 8005d12:	bf00      	nop
 8005d14:	200003b0 	.word	0x200003b0

08005d18 <_realloc_r>:
 8005d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	4614      	mov	r4, r2
 8005d20:	460e      	mov	r6, r1
 8005d22:	b921      	cbnz	r1, 8005d2e <_realloc_r+0x16>
 8005d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	4611      	mov	r1, r2
 8005d2a:	f7ff bdad 	b.w	8005888 <_malloc_r>
 8005d2e:	b92a      	cbnz	r2, 8005d3c <_realloc_r+0x24>
 8005d30:	f7ff fd3e 	bl	80057b0 <_free_r>
 8005d34:	4625      	mov	r5, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d3c:	f000 fc6a 	bl	8006614 <_malloc_usable_size_r>
 8005d40:	4284      	cmp	r4, r0
 8005d42:	4607      	mov	r7, r0
 8005d44:	d802      	bhi.n	8005d4c <_realloc_r+0x34>
 8005d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d4a:	d812      	bhi.n	8005d72 <_realloc_r+0x5a>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff fd9a 	bl	8005888 <_malloc_r>
 8005d54:	4605      	mov	r5, r0
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d0ed      	beq.n	8005d36 <_realloc_r+0x1e>
 8005d5a:	42bc      	cmp	r4, r7
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	4631      	mov	r1, r6
 8005d60:	bf28      	it	cs
 8005d62:	463a      	movcs	r2, r7
 8005d64:	f7fd fe38 	bl	80039d8 <memcpy>
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f7ff fd20 	bl	80057b0 <_free_r>
 8005d70:	e7e1      	b.n	8005d36 <_realloc_r+0x1e>
 8005d72:	4635      	mov	r5, r6
 8005d74:	e7df      	b.n	8005d36 <_realloc_r+0x1e>

08005d76 <__sfputc_r>:
 8005d76:	6893      	ldr	r3, [r2, #8]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	b410      	push	{r4}
 8005d7e:	6093      	str	r3, [r2, #8]
 8005d80:	da08      	bge.n	8005d94 <__sfputc_r+0x1e>
 8005d82:	6994      	ldr	r4, [r2, #24]
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	db01      	blt.n	8005d8c <__sfputc_r+0x16>
 8005d88:	290a      	cmp	r1, #10
 8005d8a:	d103      	bne.n	8005d94 <__sfputc_r+0x1e>
 8005d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d90:	f000 b94a 	b.w	8006028 <__swbuf_r>
 8005d94:	6813      	ldr	r3, [r2, #0]
 8005d96:	1c58      	adds	r0, r3, #1
 8005d98:	6010      	str	r0, [r2, #0]
 8005d9a:	7019      	strb	r1, [r3, #0]
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <__sfputs_r>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	4606      	mov	r6, r0
 8005da8:	460f      	mov	r7, r1
 8005daa:	4614      	mov	r4, r2
 8005dac:	18d5      	adds	r5, r2, r3
 8005dae:	42ac      	cmp	r4, r5
 8005db0:	d101      	bne.n	8005db6 <__sfputs_r+0x12>
 8005db2:	2000      	movs	r0, #0
 8005db4:	e007      	b.n	8005dc6 <__sfputs_r+0x22>
 8005db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dba:	463a      	mov	r2, r7
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff ffda 	bl	8005d76 <__sfputc_r>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d1f3      	bne.n	8005dae <__sfputs_r+0xa>
 8005dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005dc8 <_vfiprintf_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	460d      	mov	r5, r1
 8005dce:	b09d      	sub	sp, #116	; 0x74
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	4698      	mov	r8, r3
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	b118      	cbz	r0, 8005de0 <_vfiprintf_r+0x18>
 8005dd8:	6983      	ldr	r3, [r0, #24]
 8005dda:	b90b      	cbnz	r3, 8005de0 <_vfiprintf_r+0x18>
 8005ddc:	f000 fb14 	bl	8006408 <__sinit>
 8005de0:	4b89      	ldr	r3, [pc, #548]	; (8006008 <_vfiprintf_r+0x240>)
 8005de2:	429d      	cmp	r5, r3
 8005de4:	d11b      	bne.n	8005e1e <_vfiprintf_r+0x56>
 8005de6:	6875      	ldr	r5, [r6, #4]
 8005de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dea:	07d9      	lsls	r1, r3, #31
 8005dec:	d405      	bmi.n	8005dfa <_vfiprintf_r+0x32>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	059a      	lsls	r2, r3, #22
 8005df2:	d402      	bmi.n	8005dfa <_vfiprintf_r+0x32>
 8005df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005df6:	f000 fba5 	bl	8006544 <__retarget_lock_acquire_recursive>
 8005dfa:	89ab      	ldrh	r3, [r5, #12]
 8005dfc:	071b      	lsls	r3, r3, #28
 8005dfe:	d501      	bpl.n	8005e04 <_vfiprintf_r+0x3c>
 8005e00:	692b      	ldr	r3, [r5, #16]
 8005e02:	b9eb      	cbnz	r3, 8005e40 <_vfiprintf_r+0x78>
 8005e04:	4629      	mov	r1, r5
 8005e06:	4630      	mov	r0, r6
 8005e08:	f000 f96e 	bl	80060e8 <__swsetup_r>
 8005e0c:	b1c0      	cbz	r0, 8005e40 <_vfiprintf_r+0x78>
 8005e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e10:	07dc      	lsls	r4, r3, #31
 8005e12:	d50e      	bpl.n	8005e32 <_vfiprintf_r+0x6a>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	b01d      	add	sp, #116	; 0x74
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1e:	4b7b      	ldr	r3, [pc, #492]	; (800600c <_vfiprintf_r+0x244>)
 8005e20:	429d      	cmp	r5, r3
 8005e22:	d101      	bne.n	8005e28 <_vfiprintf_r+0x60>
 8005e24:	68b5      	ldr	r5, [r6, #8]
 8005e26:	e7df      	b.n	8005de8 <_vfiprintf_r+0x20>
 8005e28:	4b79      	ldr	r3, [pc, #484]	; (8006010 <_vfiprintf_r+0x248>)
 8005e2a:	429d      	cmp	r5, r3
 8005e2c:	bf08      	it	eq
 8005e2e:	68f5      	ldreq	r5, [r6, #12]
 8005e30:	e7da      	b.n	8005de8 <_vfiprintf_r+0x20>
 8005e32:	89ab      	ldrh	r3, [r5, #12]
 8005e34:	0598      	lsls	r0, r3, #22
 8005e36:	d4ed      	bmi.n	8005e14 <_vfiprintf_r+0x4c>
 8005e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e3a:	f000 fb84 	bl	8006546 <__retarget_lock_release_recursive>
 8005e3e:	e7e9      	b.n	8005e14 <_vfiprintf_r+0x4c>
 8005e40:	2300      	movs	r3, #0
 8005e42:	9309      	str	r3, [sp, #36]	; 0x24
 8005e44:	2320      	movs	r3, #32
 8005e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e4e:	2330      	movs	r3, #48	; 0x30
 8005e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006014 <_vfiprintf_r+0x24c>
 8005e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e58:	f04f 0901 	mov.w	r9, #1
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	469a      	mov	sl, r3
 8005e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e64:	b10a      	cbz	r2, 8005e6a <_vfiprintf_r+0xa2>
 8005e66:	2a25      	cmp	r2, #37	; 0x25
 8005e68:	d1f9      	bne.n	8005e5e <_vfiprintf_r+0x96>
 8005e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e6e:	d00b      	beq.n	8005e88 <_vfiprintf_r+0xc0>
 8005e70:	465b      	mov	r3, fp
 8005e72:	4622      	mov	r2, r4
 8005e74:	4629      	mov	r1, r5
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff ff94 	bl	8005da4 <__sfputs_r>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	f000 80aa 	beq.w	8005fd6 <_vfiprintf_r+0x20e>
 8005e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e84:	445a      	add	r2, fp
 8005e86:	9209      	str	r2, [sp, #36]	; 0x24
 8005e88:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80a2 	beq.w	8005fd6 <_vfiprintf_r+0x20e>
 8005e92:	2300      	movs	r3, #0
 8005e94:	f04f 32ff 	mov.w	r2, #4294967295
 8005e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e9c:	f10a 0a01 	add.w	sl, sl, #1
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	9307      	str	r3, [sp, #28]
 8005ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8005eaa:	4654      	mov	r4, sl
 8005eac:	2205      	movs	r2, #5
 8005eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb2:	4858      	ldr	r0, [pc, #352]	; (8006014 <_vfiprintf_r+0x24c>)
 8005eb4:	f7fa f994 	bl	80001e0 <memchr>
 8005eb8:	9a04      	ldr	r2, [sp, #16]
 8005eba:	b9d8      	cbnz	r0, 8005ef4 <_vfiprintf_r+0x12c>
 8005ebc:	06d1      	lsls	r1, r2, #27
 8005ebe:	bf44      	itt	mi
 8005ec0:	2320      	movmi	r3, #32
 8005ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ec6:	0713      	lsls	r3, r2, #28
 8005ec8:	bf44      	itt	mi
 8005eca:	232b      	movmi	r3, #43	; 0x2b
 8005ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed6:	d015      	beq.n	8005f04 <_vfiprintf_r+0x13c>
 8005ed8:	9a07      	ldr	r2, [sp, #28]
 8005eda:	4654      	mov	r4, sl
 8005edc:	2000      	movs	r0, #0
 8005ede:	f04f 0c0a 	mov.w	ip, #10
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ee8:	3b30      	subs	r3, #48	; 0x30
 8005eea:	2b09      	cmp	r3, #9
 8005eec:	d94e      	bls.n	8005f8c <_vfiprintf_r+0x1c4>
 8005eee:	b1b0      	cbz	r0, 8005f1e <_vfiprintf_r+0x156>
 8005ef0:	9207      	str	r2, [sp, #28]
 8005ef2:	e014      	b.n	8005f1e <_vfiprintf_r+0x156>
 8005ef4:	eba0 0308 	sub.w	r3, r0, r8
 8005ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8005efc:	4313      	orrs	r3, r2
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	46a2      	mov	sl, r4
 8005f02:	e7d2      	b.n	8005eaa <_vfiprintf_r+0xe2>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	1d19      	adds	r1, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	9103      	str	r1, [sp, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bfbb      	ittet	lt
 8005f10:	425b      	neglt	r3, r3
 8005f12:	f042 0202 	orrlt.w	r2, r2, #2
 8005f16:	9307      	strge	r3, [sp, #28]
 8005f18:	9307      	strlt	r3, [sp, #28]
 8005f1a:	bfb8      	it	lt
 8005f1c:	9204      	strlt	r2, [sp, #16]
 8005f1e:	7823      	ldrb	r3, [r4, #0]
 8005f20:	2b2e      	cmp	r3, #46	; 0x2e
 8005f22:	d10c      	bne.n	8005f3e <_vfiprintf_r+0x176>
 8005f24:	7863      	ldrb	r3, [r4, #1]
 8005f26:	2b2a      	cmp	r3, #42	; 0x2a
 8005f28:	d135      	bne.n	8005f96 <_vfiprintf_r+0x1ce>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	9203      	str	r2, [sp, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bfb8      	it	lt
 8005f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f3a:	3402      	adds	r4, #2
 8005f3c:	9305      	str	r3, [sp, #20]
 8005f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006024 <_vfiprintf_r+0x25c>
 8005f42:	7821      	ldrb	r1, [r4, #0]
 8005f44:	2203      	movs	r2, #3
 8005f46:	4650      	mov	r0, sl
 8005f48:	f7fa f94a 	bl	80001e0 <memchr>
 8005f4c:	b140      	cbz	r0, 8005f60 <_vfiprintf_r+0x198>
 8005f4e:	2340      	movs	r3, #64	; 0x40
 8005f50:	eba0 000a 	sub.w	r0, r0, sl
 8005f54:	fa03 f000 	lsl.w	r0, r3, r0
 8005f58:	9b04      	ldr	r3, [sp, #16]
 8005f5a:	4303      	orrs	r3, r0
 8005f5c:	3401      	adds	r4, #1
 8005f5e:	9304      	str	r3, [sp, #16]
 8005f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f64:	482c      	ldr	r0, [pc, #176]	; (8006018 <_vfiprintf_r+0x250>)
 8005f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f6a:	2206      	movs	r2, #6
 8005f6c:	f7fa f938 	bl	80001e0 <memchr>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d03f      	beq.n	8005ff4 <_vfiprintf_r+0x22c>
 8005f74:	4b29      	ldr	r3, [pc, #164]	; (800601c <_vfiprintf_r+0x254>)
 8005f76:	bb1b      	cbnz	r3, 8005fc0 <_vfiprintf_r+0x1f8>
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	3307      	adds	r3, #7
 8005f7c:	f023 0307 	bic.w	r3, r3, #7
 8005f80:	3308      	adds	r3, #8
 8005f82:	9303      	str	r3, [sp, #12]
 8005f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f86:	443b      	add	r3, r7
 8005f88:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8a:	e767      	b.n	8005e5c <_vfiprintf_r+0x94>
 8005f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f90:	460c      	mov	r4, r1
 8005f92:	2001      	movs	r0, #1
 8005f94:	e7a5      	b.n	8005ee2 <_vfiprintf_r+0x11a>
 8005f96:	2300      	movs	r3, #0
 8005f98:	3401      	adds	r4, #1
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f04f 0c0a 	mov.w	ip, #10
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fa8:	3a30      	subs	r2, #48	; 0x30
 8005faa:	2a09      	cmp	r2, #9
 8005fac:	d903      	bls.n	8005fb6 <_vfiprintf_r+0x1ee>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0c5      	beq.n	8005f3e <_vfiprintf_r+0x176>
 8005fb2:	9105      	str	r1, [sp, #20]
 8005fb4:	e7c3      	b.n	8005f3e <_vfiprintf_r+0x176>
 8005fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fba:	4604      	mov	r4, r0
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e7f0      	b.n	8005fa2 <_vfiprintf_r+0x1da>
 8005fc0:	ab03      	add	r3, sp, #12
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4b16      	ldr	r3, [pc, #88]	; (8006020 <_vfiprintf_r+0x258>)
 8005fc8:	a904      	add	r1, sp, #16
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fd fdba 	bl	8003b44 <_printf_float>
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	1c78      	adds	r0, r7, #1
 8005fd4:	d1d6      	bne.n	8005f84 <_vfiprintf_r+0x1bc>
 8005fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fd8:	07d9      	lsls	r1, r3, #31
 8005fda:	d405      	bmi.n	8005fe8 <_vfiprintf_r+0x220>
 8005fdc:	89ab      	ldrh	r3, [r5, #12]
 8005fde:	059a      	lsls	r2, r3, #22
 8005fe0:	d402      	bmi.n	8005fe8 <_vfiprintf_r+0x220>
 8005fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe4:	f000 faaf 	bl	8006546 <__retarget_lock_release_recursive>
 8005fe8:	89ab      	ldrh	r3, [r5, #12]
 8005fea:	065b      	lsls	r3, r3, #25
 8005fec:	f53f af12 	bmi.w	8005e14 <_vfiprintf_r+0x4c>
 8005ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ff2:	e711      	b.n	8005e18 <_vfiprintf_r+0x50>
 8005ff4:	ab03      	add	r3, sp, #12
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	462a      	mov	r2, r5
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <_vfiprintf_r+0x258>)
 8005ffc:	a904      	add	r1, sp, #16
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7fe f844 	bl	800408c <_printf_i>
 8006004:	e7e4      	b.n	8005fd0 <_vfiprintf_r+0x208>
 8006006:	bf00      	nop
 8006008:	08006fec 	.word	0x08006fec
 800600c:	0800700c 	.word	0x0800700c
 8006010:	08006fcc 	.word	0x08006fcc
 8006014:	08006e74 	.word	0x08006e74
 8006018:	08006e7e 	.word	0x08006e7e
 800601c:	08003b45 	.word	0x08003b45
 8006020:	08005da5 	.word	0x08005da5
 8006024:	08006e7a 	.word	0x08006e7a

08006028 <__swbuf_r>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	460e      	mov	r6, r1
 800602c:	4614      	mov	r4, r2
 800602e:	4605      	mov	r5, r0
 8006030:	b118      	cbz	r0, 800603a <__swbuf_r+0x12>
 8006032:	6983      	ldr	r3, [r0, #24]
 8006034:	b90b      	cbnz	r3, 800603a <__swbuf_r+0x12>
 8006036:	f000 f9e7 	bl	8006408 <__sinit>
 800603a:	4b21      	ldr	r3, [pc, #132]	; (80060c0 <__swbuf_r+0x98>)
 800603c:	429c      	cmp	r4, r3
 800603e:	d12b      	bne.n	8006098 <__swbuf_r+0x70>
 8006040:	686c      	ldr	r4, [r5, #4]
 8006042:	69a3      	ldr	r3, [r4, #24]
 8006044:	60a3      	str	r3, [r4, #8]
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	071a      	lsls	r2, r3, #28
 800604a:	d52f      	bpl.n	80060ac <__swbuf_r+0x84>
 800604c:	6923      	ldr	r3, [r4, #16]
 800604e:	b36b      	cbz	r3, 80060ac <__swbuf_r+0x84>
 8006050:	6923      	ldr	r3, [r4, #16]
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	1ac0      	subs	r0, r0, r3
 8006056:	6963      	ldr	r3, [r4, #20]
 8006058:	b2f6      	uxtb	r6, r6
 800605a:	4283      	cmp	r3, r0
 800605c:	4637      	mov	r7, r6
 800605e:	dc04      	bgt.n	800606a <__swbuf_r+0x42>
 8006060:	4621      	mov	r1, r4
 8006062:	4628      	mov	r0, r5
 8006064:	f000 f93c 	bl	80062e0 <_fflush_r>
 8006068:	bb30      	cbnz	r0, 80060b8 <__swbuf_r+0x90>
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	3b01      	subs	r3, #1
 800606e:	60a3      	str	r3, [r4, #8]
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	6022      	str	r2, [r4, #0]
 8006076:	701e      	strb	r6, [r3, #0]
 8006078:	6963      	ldr	r3, [r4, #20]
 800607a:	3001      	adds	r0, #1
 800607c:	4283      	cmp	r3, r0
 800607e:	d004      	beq.n	800608a <__swbuf_r+0x62>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	07db      	lsls	r3, r3, #31
 8006084:	d506      	bpl.n	8006094 <__swbuf_r+0x6c>
 8006086:	2e0a      	cmp	r6, #10
 8006088:	d104      	bne.n	8006094 <__swbuf_r+0x6c>
 800608a:	4621      	mov	r1, r4
 800608c:	4628      	mov	r0, r5
 800608e:	f000 f927 	bl	80062e0 <_fflush_r>
 8006092:	b988      	cbnz	r0, 80060b8 <__swbuf_r+0x90>
 8006094:	4638      	mov	r0, r7
 8006096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <__swbuf_r+0x9c>)
 800609a:	429c      	cmp	r4, r3
 800609c:	d101      	bne.n	80060a2 <__swbuf_r+0x7a>
 800609e:	68ac      	ldr	r4, [r5, #8]
 80060a0:	e7cf      	b.n	8006042 <__swbuf_r+0x1a>
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <__swbuf_r+0xa0>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	bf08      	it	eq
 80060a8:	68ec      	ldreq	r4, [r5, #12]
 80060aa:	e7ca      	b.n	8006042 <__swbuf_r+0x1a>
 80060ac:	4621      	mov	r1, r4
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f81a 	bl	80060e8 <__swsetup_r>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d0cb      	beq.n	8006050 <__swbuf_r+0x28>
 80060b8:	f04f 37ff 	mov.w	r7, #4294967295
 80060bc:	e7ea      	b.n	8006094 <__swbuf_r+0x6c>
 80060be:	bf00      	nop
 80060c0:	08006fec 	.word	0x08006fec
 80060c4:	0800700c 	.word	0x0800700c
 80060c8:	08006fcc 	.word	0x08006fcc

080060cc <__ascii_wctomb>:
 80060cc:	b149      	cbz	r1, 80060e2 <__ascii_wctomb+0x16>
 80060ce:	2aff      	cmp	r2, #255	; 0xff
 80060d0:	bf85      	ittet	hi
 80060d2:	238a      	movhi	r3, #138	; 0x8a
 80060d4:	6003      	strhi	r3, [r0, #0]
 80060d6:	700a      	strbls	r2, [r1, #0]
 80060d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80060dc:	bf98      	it	ls
 80060de:	2001      	movls	r0, #1
 80060e0:	4770      	bx	lr
 80060e2:	4608      	mov	r0, r1
 80060e4:	4770      	bx	lr
	...

080060e8 <__swsetup_r>:
 80060e8:	4b32      	ldr	r3, [pc, #200]	; (80061b4 <__swsetup_r+0xcc>)
 80060ea:	b570      	push	{r4, r5, r6, lr}
 80060ec:	681d      	ldr	r5, [r3, #0]
 80060ee:	4606      	mov	r6, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	b125      	cbz	r5, 80060fe <__swsetup_r+0x16>
 80060f4:	69ab      	ldr	r3, [r5, #24]
 80060f6:	b913      	cbnz	r3, 80060fe <__swsetup_r+0x16>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 f985 	bl	8006408 <__sinit>
 80060fe:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <__swsetup_r+0xd0>)
 8006100:	429c      	cmp	r4, r3
 8006102:	d10f      	bne.n	8006124 <__swsetup_r+0x3c>
 8006104:	686c      	ldr	r4, [r5, #4]
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800610c:	0719      	lsls	r1, r3, #28
 800610e:	d42c      	bmi.n	800616a <__swsetup_r+0x82>
 8006110:	06dd      	lsls	r5, r3, #27
 8006112:	d411      	bmi.n	8006138 <__swsetup_r+0x50>
 8006114:	2309      	movs	r3, #9
 8006116:	6033      	str	r3, [r6, #0]
 8006118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	f04f 30ff 	mov.w	r0, #4294967295
 8006122:	e03e      	b.n	80061a2 <__swsetup_r+0xba>
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <__swsetup_r+0xd4>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d101      	bne.n	800612e <__swsetup_r+0x46>
 800612a:	68ac      	ldr	r4, [r5, #8]
 800612c:	e7eb      	b.n	8006106 <__swsetup_r+0x1e>
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <__swsetup_r+0xd8>)
 8006130:	429c      	cmp	r4, r3
 8006132:	bf08      	it	eq
 8006134:	68ec      	ldreq	r4, [r5, #12]
 8006136:	e7e6      	b.n	8006106 <__swsetup_r+0x1e>
 8006138:	0758      	lsls	r0, r3, #29
 800613a:	d512      	bpl.n	8006162 <__swsetup_r+0x7a>
 800613c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613e:	b141      	cbz	r1, 8006152 <__swsetup_r+0x6a>
 8006140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006144:	4299      	cmp	r1, r3
 8006146:	d002      	beq.n	800614e <__swsetup_r+0x66>
 8006148:	4630      	mov	r0, r6
 800614a:	f7ff fb31 	bl	80057b0 <_free_r>
 800614e:	2300      	movs	r3, #0
 8006150:	6363      	str	r3, [r4, #52]	; 0x34
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	2300      	movs	r3, #0
 800615c:	6063      	str	r3, [r4, #4]
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	f043 0308 	orr.w	r3, r3, #8
 8006168:	81a3      	strh	r3, [r4, #12]
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	b94b      	cbnz	r3, 8006182 <__swsetup_r+0x9a>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	d003      	beq.n	8006182 <__swsetup_r+0x9a>
 800617a:	4621      	mov	r1, r4
 800617c:	4630      	mov	r0, r6
 800617e:	f000 fa09 	bl	8006594 <__smakebuf_r>
 8006182:	89a0      	ldrh	r0, [r4, #12]
 8006184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006188:	f010 0301 	ands.w	r3, r0, #1
 800618c:	d00a      	beq.n	80061a4 <__swsetup_r+0xbc>
 800618e:	2300      	movs	r3, #0
 8006190:	60a3      	str	r3, [r4, #8]
 8006192:	6963      	ldr	r3, [r4, #20]
 8006194:	425b      	negs	r3, r3
 8006196:	61a3      	str	r3, [r4, #24]
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	b943      	cbnz	r3, 80061ae <__swsetup_r+0xc6>
 800619c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061a0:	d1ba      	bne.n	8006118 <__swsetup_r+0x30>
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	0781      	lsls	r1, r0, #30
 80061a6:	bf58      	it	pl
 80061a8:	6963      	ldrpl	r3, [r4, #20]
 80061aa:	60a3      	str	r3, [r4, #8]
 80061ac:	e7f4      	b.n	8006198 <__swsetup_r+0xb0>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e7f7      	b.n	80061a2 <__swsetup_r+0xba>
 80061b2:	bf00      	nop
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	08006fec 	.word	0x08006fec
 80061bc:	0800700c 	.word	0x0800700c
 80061c0:	08006fcc 	.word	0x08006fcc

080061c4 <abort>:
 80061c4:	b508      	push	{r3, lr}
 80061c6:	2006      	movs	r0, #6
 80061c8:	f000 fa54 	bl	8006674 <raise>
 80061cc:	2001      	movs	r0, #1
 80061ce:	f7fb f8e9 	bl	80013a4 <_exit>
	...

080061d4 <__sflush_r>:
 80061d4:	898a      	ldrh	r2, [r1, #12]
 80061d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	4605      	mov	r5, r0
 80061dc:	0710      	lsls	r0, r2, #28
 80061de:	460c      	mov	r4, r1
 80061e0:	d458      	bmi.n	8006294 <__sflush_r+0xc0>
 80061e2:	684b      	ldr	r3, [r1, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dc05      	bgt.n	80061f4 <__sflush_r+0x20>
 80061e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dc02      	bgt.n	80061f4 <__sflush_r+0x20>
 80061ee:	2000      	movs	r0, #0
 80061f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061f6:	2e00      	cmp	r6, #0
 80061f8:	d0f9      	beq.n	80061ee <__sflush_r+0x1a>
 80061fa:	2300      	movs	r3, #0
 80061fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006200:	682f      	ldr	r7, [r5, #0]
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	d032      	beq.n	800626c <__sflush_r+0x98>
 8006206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	075a      	lsls	r2, r3, #29
 800620c:	d505      	bpl.n	800621a <__sflush_r+0x46>
 800620e:	6863      	ldr	r3, [r4, #4]
 8006210:	1ac0      	subs	r0, r0, r3
 8006212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006214:	b10b      	cbz	r3, 800621a <__sflush_r+0x46>
 8006216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006218:	1ac0      	subs	r0, r0, r3
 800621a:	2300      	movs	r3, #0
 800621c:	4602      	mov	r2, r0
 800621e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006220:	6a21      	ldr	r1, [r4, #32]
 8006222:	4628      	mov	r0, r5
 8006224:	47b0      	blx	r6
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	d106      	bne.n	800623a <__sflush_r+0x66>
 800622c:	6829      	ldr	r1, [r5, #0]
 800622e:	291d      	cmp	r1, #29
 8006230:	d82c      	bhi.n	800628c <__sflush_r+0xb8>
 8006232:	4a2a      	ldr	r2, [pc, #168]	; (80062dc <__sflush_r+0x108>)
 8006234:	40ca      	lsrs	r2, r1
 8006236:	07d6      	lsls	r6, r2, #31
 8006238:	d528      	bpl.n	800628c <__sflush_r+0xb8>
 800623a:	2200      	movs	r2, #0
 800623c:	6062      	str	r2, [r4, #4]
 800623e:	04d9      	lsls	r1, r3, #19
 8006240:	6922      	ldr	r2, [r4, #16]
 8006242:	6022      	str	r2, [r4, #0]
 8006244:	d504      	bpl.n	8006250 <__sflush_r+0x7c>
 8006246:	1c42      	adds	r2, r0, #1
 8006248:	d101      	bne.n	800624e <__sflush_r+0x7a>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	b903      	cbnz	r3, 8006250 <__sflush_r+0x7c>
 800624e:	6560      	str	r0, [r4, #84]	; 0x54
 8006250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006252:	602f      	str	r7, [r5, #0]
 8006254:	2900      	cmp	r1, #0
 8006256:	d0ca      	beq.n	80061ee <__sflush_r+0x1a>
 8006258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800625c:	4299      	cmp	r1, r3
 800625e:	d002      	beq.n	8006266 <__sflush_r+0x92>
 8006260:	4628      	mov	r0, r5
 8006262:	f7ff faa5 	bl	80057b0 <_free_r>
 8006266:	2000      	movs	r0, #0
 8006268:	6360      	str	r0, [r4, #52]	; 0x34
 800626a:	e7c1      	b.n	80061f0 <__sflush_r+0x1c>
 800626c:	6a21      	ldr	r1, [r4, #32]
 800626e:	2301      	movs	r3, #1
 8006270:	4628      	mov	r0, r5
 8006272:	47b0      	blx	r6
 8006274:	1c41      	adds	r1, r0, #1
 8006276:	d1c7      	bne.n	8006208 <__sflush_r+0x34>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0c4      	beq.n	8006208 <__sflush_r+0x34>
 800627e:	2b1d      	cmp	r3, #29
 8006280:	d001      	beq.n	8006286 <__sflush_r+0xb2>
 8006282:	2b16      	cmp	r3, #22
 8006284:	d101      	bne.n	800628a <__sflush_r+0xb6>
 8006286:	602f      	str	r7, [r5, #0]
 8006288:	e7b1      	b.n	80061ee <__sflush_r+0x1a>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006290:	81a3      	strh	r3, [r4, #12]
 8006292:	e7ad      	b.n	80061f0 <__sflush_r+0x1c>
 8006294:	690f      	ldr	r7, [r1, #16]
 8006296:	2f00      	cmp	r7, #0
 8006298:	d0a9      	beq.n	80061ee <__sflush_r+0x1a>
 800629a:	0793      	lsls	r3, r2, #30
 800629c:	680e      	ldr	r6, [r1, #0]
 800629e:	bf08      	it	eq
 80062a0:	694b      	ldreq	r3, [r1, #20]
 80062a2:	600f      	str	r7, [r1, #0]
 80062a4:	bf18      	it	ne
 80062a6:	2300      	movne	r3, #0
 80062a8:	eba6 0807 	sub.w	r8, r6, r7
 80062ac:	608b      	str	r3, [r1, #8]
 80062ae:	f1b8 0f00 	cmp.w	r8, #0
 80062b2:	dd9c      	ble.n	80061ee <__sflush_r+0x1a>
 80062b4:	6a21      	ldr	r1, [r4, #32]
 80062b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062b8:	4643      	mov	r3, r8
 80062ba:	463a      	mov	r2, r7
 80062bc:	4628      	mov	r0, r5
 80062be:	47b0      	blx	r6
 80062c0:	2800      	cmp	r0, #0
 80062c2:	dc06      	bgt.n	80062d2 <__sflush_r+0xfe>
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	e78e      	b.n	80061f0 <__sflush_r+0x1c>
 80062d2:	4407      	add	r7, r0
 80062d4:	eba8 0800 	sub.w	r8, r8, r0
 80062d8:	e7e9      	b.n	80062ae <__sflush_r+0xda>
 80062da:	bf00      	nop
 80062dc:	20400001 	.word	0x20400001

080062e0 <_fflush_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	4605      	mov	r5, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	b913      	cbnz	r3, 80062f0 <_fflush_r+0x10>
 80062ea:	2500      	movs	r5, #0
 80062ec:	4628      	mov	r0, r5
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	b118      	cbz	r0, 80062fa <_fflush_r+0x1a>
 80062f2:	6983      	ldr	r3, [r0, #24]
 80062f4:	b90b      	cbnz	r3, 80062fa <_fflush_r+0x1a>
 80062f6:	f000 f887 	bl	8006408 <__sinit>
 80062fa:	4b14      	ldr	r3, [pc, #80]	; (800634c <_fflush_r+0x6c>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d11b      	bne.n	8006338 <_fflush_r+0x58>
 8006300:	686c      	ldr	r4, [r5, #4]
 8006302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0ef      	beq.n	80062ea <_fflush_r+0xa>
 800630a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800630c:	07d0      	lsls	r0, r2, #31
 800630e:	d404      	bmi.n	800631a <_fflush_r+0x3a>
 8006310:	0599      	lsls	r1, r3, #22
 8006312:	d402      	bmi.n	800631a <_fflush_r+0x3a>
 8006314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006316:	f000 f915 	bl	8006544 <__retarget_lock_acquire_recursive>
 800631a:	4628      	mov	r0, r5
 800631c:	4621      	mov	r1, r4
 800631e:	f7ff ff59 	bl	80061d4 <__sflush_r>
 8006322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006324:	07da      	lsls	r2, r3, #31
 8006326:	4605      	mov	r5, r0
 8006328:	d4e0      	bmi.n	80062ec <_fflush_r+0xc>
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	059b      	lsls	r3, r3, #22
 800632e:	d4dd      	bmi.n	80062ec <_fflush_r+0xc>
 8006330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006332:	f000 f908 	bl	8006546 <__retarget_lock_release_recursive>
 8006336:	e7d9      	b.n	80062ec <_fflush_r+0xc>
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <_fflush_r+0x70>)
 800633a:	429c      	cmp	r4, r3
 800633c:	d101      	bne.n	8006342 <_fflush_r+0x62>
 800633e:	68ac      	ldr	r4, [r5, #8]
 8006340:	e7df      	b.n	8006302 <_fflush_r+0x22>
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <_fflush_r+0x74>)
 8006344:	429c      	cmp	r4, r3
 8006346:	bf08      	it	eq
 8006348:	68ec      	ldreq	r4, [r5, #12]
 800634a:	e7da      	b.n	8006302 <_fflush_r+0x22>
 800634c:	08006fec 	.word	0x08006fec
 8006350:	0800700c 	.word	0x0800700c
 8006354:	08006fcc 	.word	0x08006fcc

08006358 <std>:
 8006358:	2300      	movs	r3, #0
 800635a:	b510      	push	{r4, lr}
 800635c:	4604      	mov	r4, r0
 800635e:	e9c0 3300 	strd	r3, r3, [r0]
 8006362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006366:	6083      	str	r3, [r0, #8]
 8006368:	8181      	strh	r1, [r0, #12]
 800636a:	6643      	str	r3, [r0, #100]	; 0x64
 800636c:	81c2      	strh	r2, [r0, #14]
 800636e:	6183      	str	r3, [r0, #24]
 8006370:	4619      	mov	r1, r3
 8006372:	2208      	movs	r2, #8
 8006374:	305c      	adds	r0, #92	; 0x5c
 8006376:	f7fd fb3d 	bl	80039f4 <memset>
 800637a:	4b05      	ldr	r3, [pc, #20]	; (8006390 <std+0x38>)
 800637c:	6263      	str	r3, [r4, #36]	; 0x24
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <std+0x3c>)
 8006380:	62a3      	str	r3, [r4, #40]	; 0x28
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <std+0x40>)
 8006384:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <std+0x44>)
 8006388:	6224      	str	r4, [r4, #32]
 800638a:	6323      	str	r3, [r4, #48]	; 0x30
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop
 8006390:	080066ad 	.word	0x080066ad
 8006394:	080066cf 	.word	0x080066cf
 8006398:	08006707 	.word	0x08006707
 800639c:	0800672b 	.word	0x0800672b

080063a0 <_cleanup_r>:
 80063a0:	4901      	ldr	r1, [pc, #4]	; (80063a8 <_cleanup_r+0x8>)
 80063a2:	f000 b8af 	b.w	8006504 <_fwalk_reent>
 80063a6:	bf00      	nop
 80063a8:	080062e1 	.word	0x080062e1

080063ac <__sfmoreglue>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	2268      	movs	r2, #104	; 0x68
 80063b0:	1e4d      	subs	r5, r1, #1
 80063b2:	4355      	muls	r5, r2
 80063b4:	460e      	mov	r6, r1
 80063b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063ba:	f7ff fa65 	bl	8005888 <_malloc_r>
 80063be:	4604      	mov	r4, r0
 80063c0:	b140      	cbz	r0, 80063d4 <__sfmoreglue+0x28>
 80063c2:	2100      	movs	r1, #0
 80063c4:	e9c0 1600 	strd	r1, r6, [r0]
 80063c8:	300c      	adds	r0, #12
 80063ca:	60a0      	str	r0, [r4, #8]
 80063cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063d0:	f7fd fb10 	bl	80039f4 <memset>
 80063d4:	4620      	mov	r0, r4
 80063d6:	bd70      	pop	{r4, r5, r6, pc}

080063d8 <__sfp_lock_acquire>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__sfp_lock_acquire+0x8>)
 80063da:	f000 b8b3 	b.w	8006544 <__retarget_lock_acquire_recursive>
 80063de:	bf00      	nop
 80063e0:	200003b1 	.word	0x200003b1

080063e4 <__sfp_lock_release>:
 80063e4:	4801      	ldr	r0, [pc, #4]	; (80063ec <__sfp_lock_release+0x8>)
 80063e6:	f000 b8ae 	b.w	8006546 <__retarget_lock_release_recursive>
 80063ea:	bf00      	nop
 80063ec:	200003b1 	.word	0x200003b1

080063f0 <__sinit_lock_acquire>:
 80063f0:	4801      	ldr	r0, [pc, #4]	; (80063f8 <__sinit_lock_acquire+0x8>)
 80063f2:	f000 b8a7 	b.w	8006544 <__retarget_lock_acquire_recursive>
 80063f6:	bf00      	nop
 80063f8:	200003b2 	.word	0x200003b2

080063fc <__sinit_lock_release>:
 80063fc:	4801      	ldr	r0, [pc, #4]	; (8006404 <__sinit_lock_release+0x8>)
 80063fe:	f000 b8a2 	b.w	8006546 <__retarget_lock_release_recursive>
 8006402:	bf00      	nop
 8006404:	200003b2 	.word	0x200003b2

08006408 <__sinit>:
 8006408:	b510      	push	{r4, lr}
 800640a:	4604      	mov	r4, r0
 800640c:	f7ff fff0 	bl	80063f0 <__sinit_lock_acquire>
 8006410:	69a3      	ldr	r3, [r4, #24]
 8006412:	b11b      	cbz	r3, 800641c <__sinit+0x14>
 8006414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006418:	f7ff bff0 	b.w	80063fc <__sinit_lock_release>
 800641c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006420:	6523      	str	r3, [r4, #80]	; 0x50
 8006422:	4b13      	ldr	r3, [pc, #76]	; (8006470 <__sinit+0x68>)
 8006424:	4a13      	ldr	r2, [pc, #76]	; (8006474 <__sinit+0x6c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	62a2      	str	r2, [r4, #40]	; 0x28
 800642a:	42a3      	cmp	r3, r4
 800642c:	bf04      	itt	eq
 800642e:	2301      	moveq	r3, #1
 8006430:	61a3      	streq	r3, [r4, #24]
 8006432:	4620      	mov	r0, r4
 8006434:	f000 f820 	bl	8006478 <__sfp>
 8006438:	6060      	str	r0, [r4, #4]
 800643a:	4620      	mov	r0, r4
 800643c:	f000 f81c 	bl	8006478 <__sfp>
 8006440:	60a0      	str	r0, [r4, #8]
 8006442:	4620      	mov	r0, r4
 8006444:	f000 f818 	bl	8006478 <__sfp>
 8006448:	2200      	movs	r2, #0
 800644a:	60e0      	str	r0, [r4, #12]
 800644c:	2104      	movs	r1, #4
 800644e:	6860      	ldr	r0, [r4, #4]
 8006450:	f7ff ff82 	bl	8006358 <std>
 8006454:	68a0      	ldr	r0, [r4, #8]
 8006456:	2201      	movs	r2, #1
 8006458:	2109      	movs	r1, #9
 800645a:	f7ff ff7d 	bl	8006358 <std>
 800645e:	68e0      	ldr	r0, [r4, #12]
 8006460:	2202      	movs	r2, #2
 8006462:	2112      	movs	r1, #18
 8006464:	f7ff ff78 	bl	8006358 <std>
 8006468:	2301      	movs	r3, #1
 800646a:	61a3      	str	r3, [r4, #24]
 800646c:	e7d2      	b.n	8006414 <__sinit+0xc>
 800646e:	bf00      	nop
 8006470:	08006c54 	.word	0x08006c54
 8006474:	080063a1 	.word	0x080063a1

08006478 <__sfp>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	4607      	mov	r7, r0
 800647c:	f7ff ffac 	bl	80063d8 <__sfp_lock_acquire>
 8006480:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <__sfp+0x84>)
 8006482:	681e      	ldr	r6, [r3, #0]
 8006484:	69b3      	ldr	r3, [r6, #24]
 8006486:	b913      	cbnz	r3, 800648e <__sfp+0x16>
 8006488:	4630      	mov	r0, r6
 800648a:	f7ff ffbd 	bl	8006408 <__sinit>
 800648e:	3648      	adds	r6, #72	; 0x48
 8006490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006494:	3b01      	subs	r3, #1
 8006496:	d503      	bpl.n	80064a0 <__sfp+0x28>
 8006498:	6833      	ldr	r3, [r6, #0]
 800649a:	b30b      	cbz	r3, 80064e0 <__sfp+0x68>
 800649c:	6836      	ldr	r6, [r6, #0]
 800649e:	e7f7      	b.n	8006490 <__sfp+0x18>
 80064a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064a4:	b9d5      	cbnz	r5, 80064dc <__sfp+0x64>
 80064a6:	4b16      	ldr	r3, [pc, #88]	; (8006500 <__sfp+0x88>)
 80064a8:	60e3      	str	r3, [r4, #12]
 80064aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064ae:	6665      	str	r5, [r4, #100]	; 0x64
 80064b0:	f000 f847 	bl	8006542 <__retarget_lock_init_recursive>
 80064b4:	f7ff ff96 	bl	80063e4 <__sfp_lock_release>
 80064b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064c0:	6025      	str	r5, [r4, #0]
 80064c2:	61a5      	str	r5, [r4, #24]
 80064c4:	2208      	movs	r2, #8
 80064c6:	4629      	mov	r1, r5
 80064c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064cc:	f7fd fa92 	bl	80039f4 <memset>
 80064d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064d8:	4620      	mov	r0, r4
 80064da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064dc:	3468      	adds	r4, #104	; 0x68
 80064de:	e7d9      	b.n	8006494 <__sfp+0x1c>
 80064e0:	2104      	movs	r1, #4
 80064e2:	4638      	mov	r0, r7
 80064e4:	f7ff ff62 	bl	80063ac <__sfmoreglue>
 80064e8:	4604      	mov	r4, r0
 80064ea:	6030      	str	r0, [r6, #0]
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d1d5      	bne.n	800649c <__sfp+0x24>
 80064f0:	f7ff ff78 	bl	80063e4 <__sfp_lock_release>
 80064f4:	230c      	movs	r3, #12
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	e7ee      	b.n	80064d8 <__sfp+0x60>
 80064fa:	bf00      	nop
 80064fc:	08006c54 	.word	0x08006c54
 8006500:	ffff0001 	.word	0xffff0001

08006504 <_fwalk_reent>:
 8006504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006508:	4606      	mov	r6, r0
 800650a:	4688      	mov	r8, r1
 800650c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006510:	2700      	movs	r7, #0
 8006512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006516:	f1b9 0901 	subs.w	r9, r9, #1
 800651a:	d505      	bpl.n	8006528 <_fwalk_reent+0x24>
 800651c:	6824      	ldr	r4, [r4, #0]
 800651e:	2c00      	cmp	r4, #0
 8006520:	d1f7      	bne.n	8006512 <_fwalk_reent+0xe>
 8006522:	4638      	mov	r0, r7
 8006524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006528:	89ab      	ldrh	r3, [r5, #12]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d907      	bls.n	800653e <_fwalk_reent+0x3a>
 800652e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006532:	3301      	adds	r3, #1
 8006534:	d003      	beq.n	800653e <_fwalk_reent+0x3a>
 8006536:	4629      	mov	r1, r5
 8006538:	4630      	mov	r0, r6
 800653a:	47c0      	blx	r8
 800653c:	4307      	orrs	r7, r0
 800653e:	3568      	adds	r5, #104	; 0x68
 8006540:	e7e9      	b.n	8006516 <_fwalk_reent+0x12>

08006542 <__retarget_lock_init_recursive>:
 8006542:	4770      	bx	lr

08006544 <__retarget_lock_acquire_recursive>:
 8006544:	4770      	bx	lr

08006546 <__retarget_lock_release_recursive>:
 8006546:	4770      	bx	lr

08006548 <__swhatbuf_r>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	460e      	mov	r6, r1
 800654c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006550:	2900      	cmp	r1, #0
 8006552:	b096      	sub	sp, #88	; 0x58
 8006554:	4614      	mov	r4, r2
 8006556:	461d      	mov	r5, r3
 8006558:	da08      	bge.n	800656c <__swhatbuf_r+0x24>
 800655a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	061a      	lsls	r2, r3, #24
 8006564:	d410      	bmi.n	8006588 <__swhatbuf_r+0x40>
 8006566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800656a:	e00e      	b.n	800658a <__swhatbuf_r+0x42>
 800656c:	466a      	mov	r2, sp
 800656e:	f000 f903 	bl	8006778 <_fstat_r>
 8006572:	2800      	cmp	r0, #0
 8006574:	dbf1      	blt.n	800655a <__swhatbuf_r+0x12>
 8006576:	9a01      	ldr	r2, [sp, #4]
 8006578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800657c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006580:	425a      	negs	r2, r3
 8006582:	415a      	adcs	r2, r3
 8006584:	602a      	str	r2, [r5, #0]
 8006586:	e7ee      	b.n	8006566 <__swhatbuf_r+0x1e>
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	2000      	movs	r0, #0
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	b016      	add	sp, #88	; 0x58
 8006590:	bd70      	pop	{r4, r5, r6, pc}
	...

08006594 <__smakebuf_r>:
 8006594:	898b      	ldrh	r3, [r1, #12]
 8006596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006598:	079d      	lsls	r5, r3, #30
 800659a:	4606      	mov	r6, r0
 800659c:	460c      	mov	r4, r1
 800659e:	d507      	bpl.n	80065b0 <__smakebuf_r+0x1c>
 80065a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	2301      	movs	r3, #1
 80065aa:	6163      	str	r3, [r4, #20]
 80065ac:	b002      	add	sp, #8
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	ab01      	add	r3, sp, #4
 80065b2:	466a      	mov	r2, sp
 80065b4:	f7ff ffc8 	bl	8006548 <__swhatbuf_r>
 80065b8:	9900      	ldr	r1, [sp, #0]
 80065ba:	4605      	mov	r5, r0
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff f963 	bl	8005888 <_malloc_r>
 80065c2:	b948      	cbnz	r0, 80065d8 <__smakebuf_r+0x44>
 80065c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d4ef      	bmi.n	80065ac <__smakebuf_r+0x18>
 80065cc:	f023 0303 	bic.w	r3, r3, #3
 80065d0:	f043 0302 	orr.w	r3, r3, #2
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	e7e3      	b.n	80065a0 <__smakebuf_r+0xc>
 80065d8:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <__smakebuf_r+0x7c>)
 80065da:	62b3      	str	r3, [r6, #40]	; 0x28
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	6020      	str	r0, [r4, #0]
 80065e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e4:	81a3      	strh	r3, [r4, #12]
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	6163      	str	r3, [r4, #20]
 80065ea:	9b01      	ldr	r3, [sp, #4]
 80065ec:	6120      	str	r0, [r4, #16]
 80065ee:	b15b      	cbz	r3, 8006608 <__smakebuf_r+0x74>
 80065f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f4:	4630      	mov	r0, r6
 80065f6:	f000 f8d1 	bl	800679c <_isatty_r>
 80065fa:	b128      	cbz	r0, 8006608 <__smakebuf_r+0x74>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	89a0      	ldrh	r0, [r4, #12]
 800660a:	4305      	orrs	r5, r0
 800660c:	81a5      	strh	r5, [r4, #12]
 800660e:	e7cd      	b.n	80065ac <__smakebuf_r+0x18>
 8006610:	080063a1 	.word	0x080063a1

08006614 <_malloc_usable_size_r>:
 8006614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006618:	1f18      	subs	r0, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	bfbc      	itt	lt
 800661e:	580b      	ldrlt	r3, [r1, r0]
 8006620:	18c0      	addlt	r0, r0, r3
 8006622:	4770      	bx	lr

08006624 <_raise_r>:
 8006624:	291f      	cmp	r1, #31
 8006626:	b538      	push	{r3, r4, r5, lr}
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	d904      	bls.n	8006638 <_raise_r+0x14>
 800662e:	2316      	movs	r3, #22
 8006630:	6003      	str	r3, [r0, #0]
 8006632:	f04f 30ff 	mov.w	r0, #4294967295
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800663a:	b112      	cbz	r2, 8006642 <_raise_r+0x1e>
 800663c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006640:	b94b      	cbnz	r3, 8006656 <_raise_r+0x32>
 8006642:	4620      	mov	r0, r4
 8006644:	f000 f830 	bl	80066a8 <_getpid_r>
 8006648:	462a      	mov	r2, r5
 800664a:	4601      	mov	r1, r0
 800664c:	4620      	mov	r0, r4
 800664e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006652:	f000 b817 	b.w	8006684 <_kill_r>
 8006656:	2b01      	cmp	r3, #1
 8006658:	d00a      	beq.n	8006670 <_raise_r+0x4c>
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	d103      	bne.n	8006666 <_raise_r+0x42>
 800665e:	2316      	movs	r3, #22
 8006660:	6003      	str	r3, [r0, #0]
 8006662:	2001      	movs	r0, #1
 8006664:	e7e7      	b.n	8006636 <_raise_r+0x12>
 8006666:	2400      	movs	r4, #0
 8006668:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800666c:	4628      	mov	r0, r5
 800666e:	4798      	blx	r3
 8006670:	2000      	movs	r0, #0
 8006672:	e7e0      	b.n	8006636 <_raise_r+0x12>

08006674 <raise>:
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <raise+0xc>)
 8006676:	4601      	mov	r1, r0
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	f7ff bfd3 	b.w	8006624 <_raise_r>
 800667e:	bf00      	nop
 8006680:	2000000c 	.word	0x2000000c

08006684 <_kill_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	; (80066a4 <_kill_r+0x20>)
 8006688:	2300      	movs	r3, #0
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	f7fa fe7f 	bl	8001394 <_kill>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d102      	bne.n	80066a0 <_kill_r+0x1c>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	b103      	cbz	r3, 80066a0 <_kill_r+0x1c>
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	200003ac 	.word	0x200003ac

080066a8 <_getpid_r>:
 80066a8:	f7fa be72 	b.w	8001390 <_getpid>

080066ac <__sread>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	460c      	mov	r4, r1
 80066b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b4:	f000 f894 	bl	80067e0 <_read_r>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	bfab      	itete	ge
 80066bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066be:	89a3      	ldrhlt	r3, [r4, #12]
 80066c0:	181b      	addge	r3, r3, r0
 80066c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066c6:	bfac      	ite	ge
 80066c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ca:	81a3      	strhlt	r3, [r4, #12]
 80066cc:	bd10      	pop	{r4, pc}

080066ce <__swrite>:
 80066ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d2:	461f      	mov	r7, r3
 80066d4:	898b      	ldrh	r3, [r1, #12]
 80066d6:	05db      	lsls	r3, r3, #23
 80066d8:	4605      	mov	r5, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	4616      	mov	r6, r2
 80066de:	d505      	bpl.n	80066ec <__swrite+0x1e>
 80066e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e4:	2302      	movs	r3, #2
 80066e6:	2200      	movs	r2, #0
 80066e8:	f000 f868 	bl	80067bc <_lseek_r>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	4632      	mov	r2, r6
 80066fa:	463b      	mov	r3, r7
 80066fc:	4628      	mov	r0, r5
 80066fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006702:	f000 b817 	b.w	8006734 <_write_r>

08006706 <__sseek>:
 8006706:	b510      	push	{r4, lr}
 8006708:	460c      	mov	r4, r1
 800670a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670e:	f000 f855 	bl	80067bc <_lseek_r>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	bf15      	itete	ne
 8006718:	6560      	strne	r0, [r4, #84]	; 0x54
 800671a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800671e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006722:	81a3      	strheq	r3, [r4, #12]
 8006724:	bf18      	it	ne
 8006726:	81a3      	strhne	r3, [r4, #12]
 8006728:	bd10      	pop	{r4, pc}

0800672a <__sclose>:
 800672a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672e:	f000 b813 	b.w	8006758 <_close_r>
	...

08006734 <_write_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	; (8006754 <_write_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fa fe42 	bl	80013cc <_write>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_write_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_write_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	200003ac 	.word	0x200003ac

08006758 <_close_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d06      	ldr	r5, [pc, #24]	; (8006774 <_close_r+0x1c>)
 800675c:	2300      	movs	r3, #0
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	f7fa fe40 	bl	80013e8 <_close>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_close_r+0x1a>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_close_r+0x1a>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	200003ac 	.word	0x200003ac

08006778 <_fstat_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d07      	ldr	r5, [pc, #28]	; (8006798 <_fstat_r+0x20>)
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	4611      	mov	r1, r2
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	f7fa fe32 	bl	80013ee <_fstat>
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d102      	bne.n	8006794 <_fstat_r+0x1c>
 800678e:	682b      	ldr	r3, [r5, #0]
 8006790:	b103      	cbz	r3, 8006794 <_fstat_r+0x1c>
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	bd38      	pop	{r3, r4, r5, pc}
 8006796:	bf00      	nop
 8006798:	200003ac 	.word	0x200003ac

0800679c <_isatty_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4d06      	ldr	r5, [pc, #24]	; (80067b8 <_isatty_r+0x1c>)
 80067a0:	2300      	movs	r3, #0
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	f7fa fe26 	bl	80013f8 <_isatty>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d102      	bne.n	80067b6 <_isatty_r+0x1a>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	b103      	cbz	r3, 80067b6 <_isatty_r+0x1a>
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
 80067b8:	200003ac 	.word	0x200003ac

080067bc <_lseek_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d07      	ldr	r5, [pc, #28]	; (80067dc <_lseek_r+0x20>)
 80067c0:	4604      	mov	r4, r0
 80067c2:	4608      	mov	r0, r1
 80067c4:	4611      	mov	r1, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	602a      	str	r2, [r5, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f7fa fe16 	bl	80013fc <_lseek>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_lseek_r+0x1e>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_lseek_r+0x1e>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	200003ac 	.word	0x200003ac

080067e0 <_read_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d07      	ldr	r5, [pc, #28]	; (8006800 <_read_r+0x20>)
 80067e4:	4604      	mov	r4, r0
 80067e6:	4608      	mov	r0, r1
 80067e8:	4611      	mov	r1, r2
 80067ea:	2200      	movs	r2, #0
 80067ec:	602a      	str	r2, [r5, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fa fdde 	bl	80013b0 <_read>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_read_r+0x1e>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_read_r+0x1e>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	200003ac 	.word	0x200003ac

08006804 <_init>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

08006810 <_fini>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr
